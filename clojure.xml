<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[adereth]]></title>
  <link href="http://adereth.github.io/clojure.xml" rel="self"/>
  <link href="http://adereth.github.io/"/>
  <updated>2013-10-30T22:04:03-04:00</updated>
  <id>http://adereth.github.io/</id>
  <author>
    <name><![CDATA[Matt Adereth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Efficiently Computing Kendall's Tau]]></title>
    <link href="http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau/"/>
    <updated>2013-10-30T21:45:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau</id>
    <content type="html"><![CDATA[<p>Typically when people talk about correlation they are referring to the <a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson&rsquo;s product-moment coefficient</a>:</p>

<p>$$\rho_{X,Y}={E[(X-\mu_X)(Y-\mu_Y)] \over \sigma_X\sigma_Y}$$</p>

<p>The Pearson coefficient is 1 if the datasets have a perfectly positive linear relationship and -1 if they have a perfectly negative linear relationship.  But what if our data has a clear positive relationship, but it&rsquo;s not linear?  Or what if our data isn&rsquo;t even numeric and doesn&rsquo;t have a meaningful way of computing the average, $\mu$, or standard deviation, $\sigma$?</p>

<p>In these cases, Kendall&rsquo;s Tau is a useful way of measuring the correlation since it only requires that we have a <a href="http://en.wikipedia.org/wiki/Total_order">total ordering</a> for each of our datasets.  For each pair of observations, $(x_1, y_1)$ and $(x_2, y_2)$, we call the pair <em>concordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 &lt; y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 > y_2$$
&hellip;and we call the pair <em>discordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 > y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 &lt; y_2$$
If $x_1 = x_2 \text{ or } y_1 = y_2$, the pair is neither concordant nor discordant.</p>

<p>Kendall&rsquo;s Tau is then defined as:
$$\tau = \frac{n_c-n_d}{\frac{1}{2} n (n-1) }$$
Where $n_c$ is the number of concordant pairs and $n_d$ is the number of discordant pairs.
Since $n (n-1) / 2$ is the total number of pairs, this value ranges from -1 to 1.</p>

<p>Unfortunately, this approach doesn&rsquo;t deal well with tied values.  Consider the following set of $(x,y)$ observations:
$$(1,1), (1,1), (2,2), (3,3)$$
There&rsquo;s a perfectly positive linear relationship between X and Y, but only 5 of the 6 pairs are concordant.  For this case we want to use the $\tau_B$ modified version:</p>

<p>$$\tau_B = \frac{n_c-n_d}{\sqrt{(n_0-n_1)(n_0-n_2)}}$$</p>

<p>&hellip;where:</p>

<p>$$n_0 = n(n-1)/2$$
$$n_1 = \text{Number of pairs with tied values in } X$$
$$n_2 = \text{Number of pairs with tied values in } Y$$</p>

<h2>Computing Naively</h2>

<p>We can compute $\tau_B$ in $O(n^{2})$ by looking at every pair of observations and tallying the number of concordant, discordant, and tied pairs.  Once we have the tallies, we&rsquo;ll apply the formula:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tallies-&gt;kendalls-tau</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">concordant</span> <span class="nv">discordant</span> <span class="nv">pairs</span> <span class="nv">x-ties</span> <span class="nv">y-ties</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">concordant</span> <span class="nv">discordant</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">x-ties</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">y-ties</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a given pair of observations, we&rsquo;ll construct a map describing which tallies it will contribute to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kendall-relations</span> <span class="p">[[[</span><span class="nv">x1</span> <span class="nv">y1</span><span class="p">]</span> <span class="p">[</span><span class="nv">x2</span> <span class="nv">y2</span><span class="p">]]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span> <span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)))</span> <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:else</span> <span class="p">{</span><span class="ss">:discordant</span> <span class="mi">1</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need a way of generating every pair:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">pairs</span> <span class="p">[[</span><span class="nv">o</span> <span class="o">&amp;</span> <span class="nv">more</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="nv">o</span><span class="p">)</span> <span class="nv">nil</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">vector </span><span class="nv">o</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">more</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">more</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; (pairs [1 2 3 4])</span>
</span><span class='line'><span class="c1">;; =&gt; ([1 2] [1 3] [1 4] [2 3] [2 4] [3 4])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we put it all together by computing the relations tally for each pair and combining them using <code>merge-with</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">naive-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">relations</span> <span class="p">(</span><span class="nb">map </span><span class="nv">kendall-relations</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">tallies</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="nb">partial merge-with </span><span class="nv">+</span>
</span><span class='line'>                                 <span class="p">{</span><span class="ss">:pairs</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>                        <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">0</span> <span class="ss">:discordant</span> <span class="mi">0</span>
</span><span class='line'>                         <span class="ss">:x-ties</span> <span class="mi">0</span> <span class="ss">:y-ties</span> <span class="mi">0</span> <span class="ss">:pairs</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>                        <span class="nv">relations</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">tallies-&gt;kendalls-tau</span> <span class="nv">tallies</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Knight&rsquo;s Algorithm</h2>

<p>In 1966, William R. Knight was a visiting statistician at the Fisheries Research Board of Canada.  He wrote:</p>

<blockquote><p>The problem of calculating Kendall&rsquo;s tau arose while attempting to evaluate species associations in catches by the Canadian east coast offshore fishery.  Sample sizes ranging up to 400 were common, making manual calculations out of the question; indeed, an initial program using an asymptotically inefficient method proved expensively slow.</p></blockquote>

<p>Necessity is the mother of invention, and he came up with a clever algorithm for computing Kendall&rsquo;s Tau in $O(n \log{n})$.  First, sort the observations by their $x$ values using your favorite $O(n \log{n})$ algorithm.  Next, sort <em>that</em> sorted list by the $y$ values using a slightly modified <a href="http://en.wikipedia.org/wiki/Merge_sort">merge sort</a> that keeps track of the size of the swaps it had to perform.</p>

<p>Recall that merge sort works as follows:</p>

<ol>
<li>Divide the unsorted list into $n$ sublists, each containing 1 element (a list of 1 element is considered sorted).</li>
<li>Repeatedly merge sublists to produce new sublists until there is only 1 sublist remaining. This will be the sorted list.</li>
</ol>


<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" title="Merge Sort Animation" >
<em>(description and animation from <a href="http://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a>)</em></p>

<p>The trick is performed when merging sublists.  The list was originally sorted by $x$ values, so whenever an element from the second sublist is smaller than the next element from the first sublist we know that the corresponding observation is discordant with however many elements remain in the first sublist.</p>

<p>We can implement this modified merge sort by first handling the case of merging two sorted sequences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Takes a sequence containing two sorted sequences and merges them.  If an</span>
</span><span class='line'><span class="s">element from the second sequence is less than the head of the first sequence, we</span>
</span><span class='line'><span class="s">know that it was discordant with all the elements remaining in the first</span>
</span><span class='line'><span class="s">sequence.  This is the insight that allows us to avoid the O(n^2) comparisons in</span>
</span><span class='line'><span class="s">the naive algorithm.</span>
</span><span class='line'>
</span><span class='line'><span class="s">A tuple containing the count of discords and the merged sequence is returned.&quot;</span>
</span><span class='line'>  <span class="p">[[</span><span class="nv">coll1</span> <span class="nv">coll2</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">;; Explicitly track the remaining counts to avoid doing a linear</span>
</span><span class='line'>         <span class="c1">;; scan of the sequence each time, which would get us back to O(n^2)</span>
</span><span class='line'>         <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll1</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">remaining-j</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">[</span><span class="nv">i</span> <span class="o">&amp;</span> <span class="nv">rest-i</span> <span class="ss">:as</span> <span class="nv">all-i</span><span class="p">]</span> <span class="nv">coll1</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">j</span> <span class="o">&amp;</span> <span class="nv">rest-j</span> <span class="ss">:as</span> <span class="nv">all-j</span><span class="p">]</span> <span class="nv">coll2</span>
</span><span class='line'>         <span class="nv">result</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-j</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-i</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-j</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">i</span> <span class="nv">j</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">swaps</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="nv">remaining-j</span>
</span><span class='line'>                     <span class="nv">rest-i</span> <span class="nv">all-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>     <span class="ss">:j&gt;i</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">remaining-i</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-j</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">all-i</span> <span class="nv">rest-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">j</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can do the full merge sort by applying that function to piece sizes that double until the whole collection is covered by a single sorted piece:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-sort-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Returns a vector containing the number of discordant swaps and the sorted</span>
</span><span class='line'><span class="s">collection.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>         <span class="nv">coll</span> <span class="nv">coll</span>
</span><span class='line'>         <span class="nv">piece-size</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="nv">piece-size</span> <span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">piece-pairs</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="mi">2</span> <span class="nv">pieces</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">piece-pairs</span> <span class="nb">first </span><span class="nv">second</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">new-swaps</span> <span class="nv">new-coll</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">piece-pairs</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">map </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">acc-s</span> <span class="nv">acc-c</span><span class="p">]</span> <span class="p">[</span><span class="nv">s</span> <span class="nv">c</span><span class="p">]]</span>
</span><span class='line'>                             <span class="p">[(</span><span class="nb">+ </span><span class="nv">acc-s</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">acc-c</span> <span class="nv">c</span><span class="p">)])</span>
</span><span class='line'>                           <span class="p">[</span><span class="mi">0</span> <span class="p">[]]))]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">new-swaps</span><span class="p">)</span> <span class="nv">new-coll</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">piece-size</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">coll</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing we are missing now is the tallies of tied pairs.  We could use <a href="http://clojuredocs.org/clojure_core/clojure.core/frequencies"><code>clojure.core/frequencies</code></a>, but Knight&rsquo;s original paper alludes to a different way which takes advantage of the fact that at different stages of the algorithm we have the list sorted by $X$ and then $Y$.  Most implementations do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tied-pair-count</span> <span class="p">[</span><span class="nv">sorted-coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">sorted-coll</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">partition-by</span> <span class="nv">identity</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="nv">count</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">%</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">%</span><span class="p">))</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have all the pieces, so we just have to put them together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">knights-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">n</span> <span class="p">(</span><span class="nb">count </span><span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">pair-count</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">xy-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">x-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="p">(</span><span class="nb">map first </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">sorted-ys</span><span class="p">]</span> <span class="p">(</span><span class="nf">merge-sort-and-count-discords</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">map second </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">y-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">sorted-ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">concordant-minus-discordant</span> <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span>
</span><span class='line'>                                       <span class="nv">x-pair-ties</span>
</span><span class='line'>                                       <span class="nv">y-pair-ties</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">- </span><span class="nv">xy-pair-ties</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">swaps</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="nv">concordant-minus-discordant</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">x-pair-ties</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">y-pair-ties</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>There are certainly many things I would write differently above if I was really trying for performance.  The goal here was to clearly illustrate the algorithm and maintain the asymptotic run-time characteristics.</p>

<p>Also, I recently submitted <a href="https://issues.apache.org/jira/browse/MATH-814">a patch</a> to the Apache Commons Math library that contains an implementation of this in pure Java if that&rsquo;s your thing.</p>

<p>I think this algorithm is a clever little gem and I really enjoyed learning it.  Deconstructing a familiar algorithm like merge sort and utilizing its internal operations for some other purpose is a neat approach that I&rsquo;ll definitely keep in my algorithmic toolbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unicode-math 0.2.0 released]]></title>
    <link href="http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released/"/>
    <updated>2013-10-13T14:28:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>I just deployed a new version of <a href="https://github.com/adereth/unicode-math">unicode-math</a> to Clojars.  It&rsquo;s a silly toy project that implements as many of <a href="http://symbolcodes.tlt.psu.edu/bylanguage/mathchart.html">Unicode&rsquo;s math symbols</a> as possible in Clojure.  If you <code>use</code> it, you can write things like:</p>

<p><a href="http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html">Binet&rsquo;s Fibonacci Number Formula</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">binet-fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="err">ⁿ</span> <span class="err">φ</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="err">ⁿ</span> <span class="p">(</span><span class="nb">- </span><span class="err">φ</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>     <span class="p">(</span><span class="err">√</span> <span class="mi">5</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/deMorgansLaws.html">de Morgan&rsquo;s Laws</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="err">∀</span> <span class="p">[</span><span class="nv">p</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]</span> <span class="nv">q</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="err">¬</span> <span class="p">(</span><span class="err">∧</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="err">∨</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">q</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/Inclusion-ExclusionPrinciple.html">Inclusion-Exclusion Principle</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∪</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">count </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∩</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instructions for use are on the <a href="https://github.com/adereth/unicode-math">project&rsquo;s Github page</a>.  The full list of implemented symbols is in <a href="https://github.com/adereth/unicode-math/blob/master/src/unicode_math/core.clj">src/unicode_math/core.clj</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add it up (properly)]]></title>
    <link href="http://adereth.github.io/blog/2013/10/10/add-it-up/"/>
    <updated>2013-10-10T22:14:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/10/add-it-up</id>
    <content type="html"><![CDATA[<p>Floating point arithmetic can sometimes be frustratingly <a href="https://en.wikipedia.org/wiki/Numerical_stability">unstable</a>, particularly when applied to large datasets.  Even though the classic <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a> seems to make the front page of of Hacker News on a yearly basis (<a href="https://news.ycombinator.com/item?id=4815399">1</a>, <a href="https://news.ycombinator.com/item?id=1982332">2</a>, <a href="http://news.ycombinator.com/item?id=1937182">3</a>, <a href="http://news.ycombinator.com/item?id=1746797">4</a>, <a href="http://news.ycombinator.com/item?id=687604">5</a>,
<a href="http://news.ycombinator.com/item?id=453396">6</a>), I have never seen any big data package actually apply one of the simplest and cheapest recommendations from it.</p>

<p>I&rsquo;m talking about the <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan Summation algorithm</a>.  Maybe it gets ignored because it&rsquo;s covered <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html#1076">half-way through the paper</a>.  Despite being buried, you can tell it&rsquo;s important because the author uses uncharacteristally strong language at the end of the section on the algorithm:</p>

<blockquote><p>Since these bounds hold for almost all commercial hardware, it would be foolish for numerical programmers to ignore such algorithms, and it would be irresponsible for compiler writers to destroy these algorithms by pretending that floating-point variables have real number semantics.</p></blockquote>

<p>Whoa.  Let&rsquo;s not be foolish!</p>

<h2>Example: The Harmonic Series in Clojure</h2>

<p>We&rsquo;re going to be computing a partial sum of the <a href="https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)">Harmonic Series</a>:</p>

<p><img src="http://upload.wikimedia.org/math/9/4/0/9402cf0c5599afa1a47d12d4a704e3de.png" title="\sum_{n=1}^\infty\,\frac{1}{n} \;\;=\;\; 1 \,+\, \frac{1}{2} \,+\, \frac{1}{3} \,+\, \frac{1}{4} \,+\, \frac{1}{5} \,+\, \cdots.\" ></p>

<p>It&rsquo;s another nice example because it contains terms that can&rsquo;t be represented precisely in floating point and the true sum diverges.</p>

<p>Let&rsquo;s start by computing the sum with infinite precision.  Clojure&rsquo;s <a href="https://github.com/clojure/clojure/blob/229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae/src/jvm/clojure/lang/Ratio.java"><code>Ratio</code></a> class represents values internally using <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html"><code>BigInteger</code></a> to separately store the numerator and denominator.  The summation happens using the grade-school style of making the denominators match and summing the numerators, so we have the exact running sum throughout.  At the very end, we convert the number to a floating point double:</p>

<figure class='code'><figcaption><span>Infinite Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-ratios</span> <span class="p">(</span><span class="nb">map / </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-ratios</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1 1/2 1/3 1/4 1/5 1/6)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-ratios</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)</span> <span class="nv">double</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the first 10,000 elements, we&rsquo;ll see numerical differences starting at the 14th decimal place, so just focus on the <em>last two digits</em> in the results.</p>

<p>As expected, we see a slightly different result if we compute the sum of doubles:</p>

<figure class='code'><figcaption><span>Double Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">map double </span><span class="nv">harmonic-ratios</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-doubles</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1.0 0.5 0.3333333333333333 0.25 0.2 0.1666666666666667)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 9.787606036044348 (48 vs. 82 with infinite precision)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One approach that will get more accurate results is to use an arbitrary precision representation of the numbers, like <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html"><code>BigDecimal</code></a>.  If we naively try to convert <code>harmonic-ratios</code> to <code>BigDecimal</code>, we get an <code>ArithmeticException</code> as soon as we hit 1/3:</p>

<figure class='code'><figcaption><span>Converting Fractions to BigDecimals </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 1M</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="nv">/2</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 0.5M</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="nv">/3</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to explicitly set the precision that we want using a <a href="http://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html"><code>MathContext</code></a>.  Let&rsquo;s use 32 decimal places for good measure:</p>

<figure class='code'><figcaption><span>32 Decimal Place Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">inverse-bigdec</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">context</span> <span class="p">(</span><span class="nf">java.math.MathContext.</span> <span class="mi">32</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.divide</span> <span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">bigdec</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">context</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-bigdecs</span> <span class="p">(</span><span class="nb">map </span><span class="nv">inverse-bigdec</span> <span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-bigdecs</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1M 0.5M 0.33333333333333333333333333333333M 0.25M 0.2M 0.16666666666666666666666666666667M)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-bigdecs</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)</span> <span class="nv">double</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382 (perfectly matches infinite precision result)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s see how <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan Summation algorithm</a> performs on doubles:</p>

<figure class='code'><figcaption><span>Double Precision with Kahan Summation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kahan-sum</span> <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[[</span><span class="nv">x</span> <span class="o">&amp;</span> <span class="nv">xs</span><span class="p">]</span> <span class="nv">coll</span> <span class="nv">sum</span> <span class="mf">0.0</span> <span class="nv">carry</span> <span class="mf">0.0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-not </span><span class="nv">x</span> <span class="nv">sum</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">carry</span><span class="p">)</span> <span class="nv">t</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="nv">sum</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="nv">xs</span> <span class="nv">t</span> <span class="p">(</span><span class="nb">- </span><span class="nv">t</span> <span class="nv">sum</span> <span class="nv">y</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="nv">kahan-sum</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382 (perfectly matches infinite precision result)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything but vanilla summation of doubles has given us the same answer!</p>

<p>To be fair to doubles, we are summing them in what intuitively is a poor order.  The smallest values are being added to the largest intermediate sums, preventing their low-order bits from accumulating.  We can try to remedy this by reversing the order:</p>

<figure class='code'><figcaption><span>Double Precision Reversed </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="nb">reverse </span><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 9.787606036044386</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that&rsquo;s different.  This is the first time we&rsquo;re seeing the floating point noise lead to something larger than the infinite precision answer.</p>

<h2>Conclusion</h2>

<p>For just a couple additional floating point operations per element, we get a result that competes with the more expensive arbitrary precision solutions.  It also does better than the naive approach of pre-sorting, which is both more expensive and eliminates the ability to deal with the data in a streaming fashion.</p>

<p>In a subsequent post, I plan on covering how Kahan Summation can be used effectively in a map-reduce framework.</p>
]]></content>
  </entry>
  
</feed>
