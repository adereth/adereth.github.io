<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[adereth]]></title>
  <link href="http://adereth.github.io/clojure.xml" rel="self"/>
  <link href="http://adereth.github.io/"/>
  <updated>2013-12-15T13:23:16-05:00</updated>
  <id>http://adereth.github.io/</id>
  <author>
    <name><![CDATA[Matt Adereth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A few interesting Clojure microbenchmarks]]></title>
    <link href="http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/"/>
    <updated>2013-11-22T07:50:00-05:00</updated>
    <id>http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>


<p></p>

<!--       font-family: Arial, sans-serif; "Menlo","Monaco","Andale Mono","lucida console","Courier New",monospace;-->


<!-- CSS Styles: -->


<div>
  <style type="text/css">

    .chart {
      font-family: monospace;
      font-size: 10px;
      margin-top: -40px;
    }

    .bar {
      fill: grey;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

  </style>
</div>




<!-- Global Variables and Handlers: -->


<script type="text/javascript">

  var margin = {top: 40, right: 40, bottom: 60, left: 110},
      width = $('.entry-content').width();

  $(window).resize(function() {
    width = $('.entry-content').width();
  });

  function draw(data, chart, height) {
    
    $(chart).empty();

    var x = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.mean})])
        .range([0, width - margin.left - margin.right]);

    var y = d3.scale.ordinal()
        .domain(d3.range(data.length))
        .rangeRoundBands([height - margin.top - margin.bottom, 0], 0.2);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .tickPadding(8)
    .ticks(8);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickPadding(8)
        .tickSize(0);

    var svg = d3.select(chart).append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('class', 'chart')
          .append('g')
        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    svg.selectAll('.chart')
        .data(data)
    .enter().append('rect')
        .attr('class', 'bar')
        .attr('y', function(d, i) { return y(i) })
        .attr('width', function(d) { return x(d.mean) })
        .attr('height', y.rangeBand());

    svg.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(0, ' + y.rangeExtent()[1] + ')')
        .call(xAxis);

    svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "end")
        .attr("x", width / 2 - 45)
        .attr("y", height - 60)
        .text("nanoseconds");

    svg.append('g')
        .attr('class', 'y axis')
        .call(yAxis)
      .selectAll('text')
        .text(function(d) { return data[d].code; });
    
  }
  
  function drawWithResize(data, chart, height) {
    draw(data, chart, height);
    $(window).resize(function() {draw(data, chart, height); })
  }
;


</script>


<p><a href="http://ideolalia.com/">Zach Tellman</a> delivered a really informative and practical unsession at <a href="http://clojure-conj.org/">Clojure Conj 2013</a> entitled &ldquo;Predictably Fast Clojure.&rdquo;  It was described as:</p>

<blockquote><p>An exploration of some of the underlying mechanisms in Clojure, and how to build an intuition for how fast your code should run. Time permitting, we&rsquo;ll also explore how to work around these mechanisms, and exploit the full power of the JVM.</p></blockquote>

<p>I&rsquo;d like to share a few interesting things that I learned from this talk and that I subsequently verified and explored.</p>

<h2>How to benchmark</h2>

<p>It turns out that benchmarking is hard and benchmarking on the JVM is even harder.  Fortunately, the folks at the Elliptic Group have thought long and hard about how to do it right and have written <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=robust+java+benchmarking">a couple of great articles</a> on the matter.  Hugo Duncan&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium library</a> makes it super easy to use these robust techniques.</p>

<p>All the benchmarks in this post were run on my dual-core 2.6 GHz Intel Core i5 laptop.  The JVM was started with <code>lein with-profile production repl</code>, which enables more aggressive JIT action at the cost of slower start times.  If you try to use Criterium without this, you&rsquo;ll get warnings spewed for every benchmark you run.</p>

<h2>Surprising operations on lists, vectors, and tuples</h2>

<p>The first thing that he discussed was the relatively poor performance of <code>first</code> on vectors.</p>

<p>For the tests, I made the some simple collections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ve</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">li</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tu</span> <span class="p">(</span><span class="nf">clj-tuple/tuple</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then I timed them each with <code>first</code> and <code>(nth coll 0)</code>:</p>

<div id='chart-1'></div>


<script type='text/javascript'>
  var data = [
      {code: "(first ve)", mean: 59.387551, lower: 56.557346, upper: 75.434730},
      {code: "(first li)", mean: 11.814687, lower: 9.933760, upper: 17.651180},
      {code: "(first tu)", mean: 12.026005, lower: 11.096498, upper: 17.716830},
      {code: "(nth ve 0)", mean: 14.507457, lower: 13.379794, upper: 19.732508},
      {code: "(nth li 0)", mean: 132.042247, lower: 123.849601, upper: 173.395438},
      {code: "(nth tu 0)", mean: 11.240653, lower: 10.739338, upper: 12.333350},
      ];
  data.reverse();
  drawWithResize(data, '#chart-1', 275);
</script>


<p>The <a href="http://clojuredocs.org/clojure_core/clojure.core/first">documentation</a> says that <code>first</code> &ldquo;calls seq on its argument.&rdquo;  This is effectively true, but if you look at the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/RT.java#L575">source</a> you&rsquo;ll see that if the collection implements <code>ISeq</code>, <code>seq</code> doesn&rsquo;t need to be called.  As a result, the performance of <code>first</code> on lists, which do implement <code>ISeq</code>, is much better than on vectors, which don&rsquo;t.  Zach took advantage of this observation in his <a href="https://github.com/ztellman/clj-tuple">clj-tuple</a> library and made sure that tuples implement <code>ISeq</code>.</p>

<p>What&rsquo;s really interesting is that you can use <code>(nth coll 0)</code> to get the first element of a vector faster that you can with <code>first</code>.  Unfortunately, this only does well with vectors.  The performance is abysmal when applied to lists, so you should stick to <code>first</code> if you don&rsquo;t know the data structure you are operating on.</p>

<p>The apparent slowness of <code>seq</code> on a vector made me wonder about the <code>empty?</code> function, which uses <code>seq</code> under the hood:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">source</span> <span class="nv">empty?</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">empty?</span>
</span><span class='line'>  <span class="s">&quot;Returns true if coll has no items - same as (not (seq coll)).</span>
</span><span class='line'><span class="s">  Please use the idiom (seq x) rather than (not (empty? x))&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>   <span class="ss">:static</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span><span class="p">]</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">seq </span><span class="nv">coll</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If using <code>seq</code> is so slow, perhaps we can get better performance by just getting the count of elements and testing if it&rsquo;s zero:</p>

<div id='chart-empty'></div>


<script type='text/javascript'>
  var dataE = [
{code: "(empty? ve)", mean: 22.436542, lower: 22.052842, upper: 23.003189},
{code: "(empty? li)", mean: 12.293540, lower: 11.680523, upper: 15.369996},
{code: "(empty? tu)", mean: 18.512765, lower: 17.351246, upper: 22.757244},
{code: "(= 0 (count ve))", mean: 11.209652, lower: 10.451370, upper: 15.123089},
{code: "(= 0 (count li))", mean: 10.710336, lower: 10.417919, upper: 11.667121},
{code: "(= 0 (count tu))", mean: 10.741061, lower: 10.396224, upper: 13.246183},
      ];
  dataE.reverse();
  drawWithResize(dataE, '#chart-empty', 275);
</script>


<p>Of course, this is a bad idea for lazy sequences and should probably be avoided, as we&rsquo;ll incur a cost that is linear in the size of the sequence just to get the count.</p>

<p>I don&rsquo;t think this will affect my day to day code, but it certainly is interesting and surfaced a bit more about how things actually work in Clojure.</p>

<h2>Inconsistent protocol timings</h2>

<p>This was a surprising one that also peeled back a layer on Clojure&rsquo;s implementation.  In Fogus&rsquo;s <a href="http://blog.fogus.me/2011/10/14/why-clojure-doesnt-need-invokedynamic-but-it-might-be-nice/">Why Clojure might not need invokedynamic, but it might be nice</a>, he explained:</p>

<blockquote><p>Clojure&rsquo;s protocols are polymorphic on the type of the first argument. The protocol functions are call-site cached (with no per-call lookup cost if the target class remains stable). In other words, the implementation of Clojure&rsquo;s protocols are built on polymorphic inline caches.</p></blockquote>

<p>The consequence of this is that we will see worse performance if the type of the first argument to a protocol&rsquo;s method keeps changing.  I made a simple test to see how significant this is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">P</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">x</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">P</span>
</span><span class='line'>  <span class="nv">String</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">Long</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">g</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">f</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">s0</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">s1</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n0</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n1</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>g</code> calls <code>f</code> on both its arguments and we expect <code>f</code> to perform best when it&rsquo;s consistently called on a single type:</p>

<div id='chart-2'></div>


<script type='text/javascript'>
  var data2 = [
{code: "(g n0 n1)", mean: 21.597699},
{code: "(g s0 s1)", mean: 22.550262},
{code: "(g n0 s0)", mean: 37.527409}
      ];
  data2.reverse();
  drawWithResize(data2, '#chart-2', 190);
</script>


<p>The expectation was correct.  There was some subsequent talk about whether the penalty of this cache miss was predictable.  Theoretically, the cost could be unbounded if you extend the protocol with enough types and have horrible luck with the hash codes of those types colliding, but my understanding of the caching logic is that it will usually be the small constant that we observed here.</p>

<p>You can see why by taking a look at how the cache works in <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/MethodImplCache.java#L76">MethodImplCache.java</a>.  The hash code of the class is shifted and masked by values that form a simple perfect hash, which is determined by the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/clj/clojure/core.clj#L5971"><code>maybe-min-hash</code> function</a>.  The use of a perfect hash means that we should see consistent lookup times for even moderately large caches.</p>

<p>In the rare case that a perfect hash can&rsquo;t be found by <code>maybe-min-hash</code>, the cache falls back to using a <code>PersistentArrayMap</code>, which can have slightly worse performance.  In any case, I don&rsquo;t think there&rsquo;s much to worry about here.</p>

<p>One neat thing I discovered while testing all of this is that you don&rsquo;t suffer this cache-miss penalty if you declare that you support a protocol in your <code>deftype</code> or if you <code>reify</code>, but you do if you use <code>extend-protocol</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">X</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">P</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dt</span> <span class="p">(</span><span class="nf">X.</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">re</span> <span class="p">(</span><span class="nf">reify</span> <span class="nv">P</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">Y</span> <span class="p">[])</span>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">P</span>
</span><span class='line'>  <span class="nv">Y</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ep</span> <span class="p">(</span><span class="nf">Y.</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<div id='chart-3'></div>


<script type='text/javascript'>
  var data3 = [
      {code: "(g s0 dt)", mean: 19.389459},
      {code: "(g s0 re)", mean: 19.747690},
      {code: "(g s0 ep)", mean: 76.890915},
      ];
  data3.reverse();
  drawWithResize(data3, '#chart-3', 190);
</script>


<p>My understanding is that the declaration of a protocol results in the creation of function objects and in a corresponding interface.  When the function is called, the first thing it does when trying to dispatch is see if the first argument implements the interface for the protocol that declared the function in the first place.  If it did, the corresponding method on the object is called.  If it doesn&rsquo;t implement the interface, it next uses the MethodImplCache and has the potential to suffer from the cache miss.  What&rsquo;s great is that if the object does implement the interface, the most recent entry in the cache is unaffected.</p>

<p>We can verify that the reified object and the instance of the type that was deftyped with the protocol both implement the interface and the other one doesn&rsquo;t:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">dt</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">user.P</span> <span class="nv">clojure.lang.IType</span> <span class="nv">java.lang.Object</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">re</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">clojure.lang.IObj</span> <span class="nv">user.P</span> <span class="nv">java.lang.Object</span> <span class="nv">clojure.lang.IMeta</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">ep</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">clojure.lang.IType</span> <span class="nv">java.lang.Object</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Determining if your type hints worked</h2>

<p>Often when we want to squeeze every last bit of performance, we use type hints to avoid reflection and to force the use of primitives.  Zach demonstrated how to use Gary Trakhman&rsquo;s <a href="https://github.com/gtrak/no.disassemble">no.disassemble</a> to inspect the byte code of a function directly from the REPL.</p>

<p>I haven&rsquo;t gotten to play with it yet, but the ability to quickly compare the byte code between two implementations in the REPL looked amazing.</p>

<h2>Thanks</h2>

<p>Thanks to Zach Tellman for the informative presentation that motivated this and to David Greenberg for help investigating the protocol performance issues.</p>

<p>If there&rsquo;s anything I got wrong, please let me know in the comments&hellip; thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[core.matrix + Apache Commons Math]]></title>
    <link href="http://adereth.github.io/blog/2013/11/08/core-dot-matrix-plus-apache-commons-math/"/>
    <updated>2013-11-08T08:08:00-05:00</updated>
    <id>http://adereth.github.io/blog/2013/11/08/core-dot-matrix-plus-apache-commons-math</id>
    <content type="html"><![CDATA[<p>I&rsquo;d like to share a little project I did to make it more convenient to use Apache Commons Math&rsquo;s linear algebra classes with Clojure.</p>

<h2>Apache Commons Math</h2>

<p><img src="http://adereth.github.io/images/acm.gif" alt="Apache Commons Math Logo" /></p>

<p><a href="http://commons.apache.org/proper/commons-math/index.html">Apache Commons Math</a> is a Java library of mathematics and statistics components.  It&rsquo;s loaded with useful things including:</p>

<ul>
<li>Statistics</li>
<li>Data Generation</li>
<li>Probability Distributions</li>
<li>Machine Learning</li>
<li>Optimization</li>
<li>Numerical Analysis</li>
<li>Curve Fitting</li>
<li>Linear Algebra</li>
<li>Complex Numbers</li>
<li>Ordinary Differential Equations</li>
</ul>


<p>I highly recommend at least skimming the <a href="http://commons.apache.org/proper/commons-math/userguide/index.html">User Guide</a>.  It&rsquo;s useful to know what&rsquo;s already available and you may even discover a branch of mathematics that you find interesting.</p>

<p>As with most Java libraries, it&rsquo;s generally pleasant to use from Clojure via interop.  Of course, there are a few places where there&rsquo;s unnecessary object constructiion just to get at methods that could easily be static and there are a few others where <em>mutation</em> rears its ugly head.  For the non-static cases, it&rsquo;s trivial enough to create a <code>fn</code> that creates the object and calls the method you need.</p>

<p>Many of the methods in the library either accept or return matrices and vectors, using the <a href="http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> and <a href="http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/linear/RealVector.html">RealVector</a> interfaces.  While we could use interop to create and use these, it&rsquo;s nice to be able to use them in idiomatic Clojure and even nicer to be able to seamlessly use them with pure Clojure data structures.</p>

<h2>core.matrix</h2>

<p><a href="https://github.com/mikera/core.matrix">core.matrix</a> is a library and API that aims to make matrix and array programming idiomatic, elegant and fast in Clojure.  It features pluggable support for different underlying matrix library implementations.</p>

<p>For all my examples, I&rsquo;ve included core.matrix as <code>m</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.core.matrix</span> <span class="ss">:as</span> <span class="nv">m</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>apache-commons-matrix</h2>

<p>After implementing a few protocols, I was able to get full support for Apache Commons Math&rsquo;s matrices and vectors into the core.matrix API, which I&rsquo;ve released as <a href="https://github.com/adereth/apache-commons-matrix">adereth/apache-commons-matrix</a>.</p>

<p>Once you&rsquo;ve loaded <code>apache-commons-matrix.core</code>, you can begin using the <code>core.matrix</code> functions on any combination of Apache Commons Math matrices and vectors and any other implementation of matrix and vectors, including Clojure&rsquo;s built-in persistent vectors.</p>

<p>Without this, you have to write some pretty cumbersome array manipulation code to get the interop to work.  For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">org.apache.commons.math3.linear.Array2DRowRealMatrix.</span>
</span><span class='line'> <span class="p">(</span><span class="nb">into-array </span><span class="p">[(</span><span class="nf">double-array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">double-array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">])]))</span>
</span><span class='line'><span class="c1">;; #&lt;Array2DRowRealMatrix Array2DRowRealMatrix{ {1.0,1.0}, {1.0,0.0} }&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;versus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">m/matrix</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]]))</span>
</span><span class='line'><span class="c1">;; #&lt;Array2DRowRealMatrix Array2DRowRealMatrix{ {1.0,1.0}, {1.0,0.0} }&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re working from the REPL or otherwise don&rsquo;t care about indirectly changing the behavior of your code, you could even avoid <code>with-implementation</code> and just make <code>:apache-commons</code> the default by evaluating:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/set-current-implementation</span> <span class="ss">:apache-commons</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things become really convenient when you start combining Apache Commons Math data structures with Clojure&rsquo;s.  For example, we can multiply a <code>RealMatrix</code> and a vector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib-matrix</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/matrix</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">m/transform</span> <span class="nv">fib-matrix</span> <span class="p">[</span><span class="mi">5</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; #&lt;ArrayRealVector {8; 5}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the type of the result depends on the implementation of the first parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib-vector</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/array</span> <span class="p">[</span><span class="mi">5</span> <span class="mi">3</span><span class="p">])))</span>
</span><span class='line'><span class="c1">;; #&lt;ArrayRealVector {5; 3}&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">m/transform</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]]</span> <span class="nv">fib-vector</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; [8.0 5.0]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementation Experience</h2>

<p>It was really easy to follow the <a href="https://github.com/mikera/core.matrix/wiki/Implementation-Guide">Implementation Guide for core.matrix</a> that Mike Anderson wrote.  There were just a handful of protocols that I needed to implement and I magically got all the functionality of core.matrix.  The test framework is incredibly thorough and it immediately revealed a number of subtle bugs in my initial implementation.  Overall, it was a great experience and I wish that all interfaces provided such nice documentation and testing.</p>

<h2>Conclusion</h2>

<p>If you&rsquo;re doing any math on the JVM, you should at least check out what Apache Commons Math has to offer.  If you&rsquo;re using it in Clojure, I recommend using core.matrix instead of interop whenever possible.  If you do try this out, please let me know if there&rsquo;s anything missing or just send me a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficiently Computing Kendall's Tau]]></title>
    <link href="http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau/"/>
    <updated>2013-10-30T21:45:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau</id>
    <content type="html"><![CDATA[<p>Typically when people talk about correlation they are referring to the <a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson&rsquo;s product-moment coefficient</a>:</p>

<p>$$\rho_{X,Y}={E[(X-\mu_X)(Y-\mu_Y)] \over \sigma_X\sigma_Y}$$</p>

<p>The Pearson coefficient is 1 if the datasets have a perfectly positive linear relationship and -1 if they have a perfectly negative linear relationship.  But what if our data has a clear positive relationship, but it&rsquo;s not linear?  Or what if our data isn&rsquo;t even numeric and doesn&rsquo;t have a meaningful way of computing the average, $\mu$, or standard deviation, $\sigma$?</p>

<p>In these cases, Kendall&rsquo;s Tau is a useful way of measuring the correlation since it only requires that we have a <a href="http://en.wikipedia.org/wiki/Total_order">total ordering</a> for each of our datasets.  For each pair of observations, $(x_1, y_1)$ and $(x_2, y_2)$, we call the pair <em>concordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 &lt; y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 > y_2$$
&hellip;and we call the pair <em>discordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 > y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 &lt; y_2$$
If $x_1 = x_2 \text{ or } y_1 = y_2$, the pair is neither concordant nor discordant.</p>

<p>Kendall&rsquo;s Tau is then defined as:
$$\tau = \frac{n_c-n_d}{\frac{1}{2} n (n-1) }$$
Where $n_c$ is the number of concordant pairs and $n_d$ is the number of discordant pairs.
Since $n (n-1) / 2$ is the total number of pairs, this value ranges from -1 to 1.</p>

<p>Unfortunately, this approach doesn&rsquo;t deal well with tied values.  Consider the following set of $(x,y)$ observations:
$$(1,1), (1,1), (2,2), (3,3)$$
There&rsquo;s a perfectly positive linear relationship between X and Y, but only 5 of the 6 pairs are concordant.  For this case we want to use the $\tau_B$ modified version:</p>

<p>$$\tau_B = \frac{n_c-n_d}{\sqrt{(n_0-n_1)(n_0-n_2)}}$$</p>

<p>&hellip;where:</p>

<p>$$n_0 = n(n-1)/2$$
$$n_1 = \text{Number of pairs with tied values in } X$$
$$n_2 = \text{Number of pairs with tied values in } Y$$</p>

<h2>Computing Naively</h2>

<p>We can compute $\tau_B$ in $O(n^{2})$ by looking at every pair of observations and tallying the number of concordant, discordant, and tied pairs.  Once we have the tallies, we&rsquo;ll apply the formula:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kendalls-tau-from-tallies</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">concordant</span> <span class="nv">discordant</span> <span class="nv">pairs</span> <span class="nv">x-ties</span> <span class="nv">y-ties</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">concordant</span> <span class="nv">discordant</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">x-ties</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">y-ties</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a given pair of observations, we&rsquo;ll construct a map describing which tallies it will contribute to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kendall-relations</span> <span class="p">[[[</span><span class="nv">x1</span> <span class="nv">y1</span><span class="p">]</span> <span class="p">[</span><span class="nv">x2</span> <span class="nv">y2</span><span class="p">]]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span> <span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)))</span> <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:else</span> <span class="p">{</span><span class="ss">:discordant</span> <span class="mi">1</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need a way of generating every pair:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">pairs</span> <span class="p">[[</span><span class="nv">o</span> <span class="o">&amp;</span> <span class="nv">more</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="nv">o</span><span class="p">)</span> <span class="nv">nil</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">vector </span><span class="nv">o</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">more</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">more</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; (pairs [1 2 3 4])</span>
</span><span class='line'><span class="c1">;; =&gt; ([1 2] [1 3] [1 4] [2 3] [2 4] [3 4])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we put it all together by computing the relations tally for each pair and combining them using <code>merge-with</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">naive-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">relations</span> <span class="p">(</span><span class="nb">map </span><span class="nv">kendall-relations</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">tallies</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="nb">partial merge-with </span><span class="nv">+</span>
</span><span class='line'>                                 <span class="p">{</span><span class="ss">:pairs</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>                        <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">0</span> <span class="ss">:discordant</span> <span class="mi">0</span>
</span><span class='line'>                         <span class="ss">:x-ties</span> <span class="mi">0</span> <span class="ss">:y-ties</span> <span class="mi">0</span> <span class="ss">:pairs</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>                        <span class="nv">relations</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">kendalls-tau-from-tallies</span> <span class="nv">tallies</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Knight&rsquo;s Algorithm</h2>

<p>In 1966, William R. Knight was a visiting statistician at the Fisheries Research Board of Canada.  He wrote:</p>

<blockquote><p>The problem of calculating Kendall&rsquo;s tau arose while attempting to evaluate species associations in catches by the Canadian east coast offshore fishery.  Sample sizes ranging up to 400 were common, making manual calculations out of the question; indeed, an initial program using an asymptotically inefficient method proved expensively slow.</p></blockquote>

<p>Necessity is the mother of invention, so he came up with a clever algorithm for computing Kendall&rsquo;s Tau in $O(n \log{n})$ which he published in his paper entitled &ldquo;<a href="http://www.jstor.org/stable/2282833">A Computer Method for Calculating Kendall&rsquo;s Tau with Ungrouped Data</a>&rdquo;.</p>

<p>First, sort the observations by their $x$ values using your favorite $O(n \log{n})$ algorithm.  Next, sort <em>that</em> sorted list by the $y$ values using a slightly modified <a href="http://en.wikipedia.org/wiki/Merge_sort">merge sort</a> that keeps track of the size of the swaps it had to perform.</p>

<p>Recall that merge sort works as follows:</p>

<ol>
<li>Divide the unsorted list into $n$ sublists, each containing 1 element (a list of 1 element is considered sorted).</li>
<li>Repeatedly merge sublists to produce new sublists until there is only 1 sublist remaining. This will be the sorted list.</li>
</ol>


<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" title="Merge Sort Animation" >
<em>(description and animation from <a href="http://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a>)</em></p>

<p>The trick is performed when merging sublists.  The list was originally sorted by $x$ values, so whenever an element from the second sublist is smaller than the next element from the first sublist we know that the corresponding observation is discordant with however many elements remain in the first sublist.</p>

<p>We can implement this modified merge sort by first handling the case of merging two sorted sequences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Takes a sequence containing two sorted sequences and merges them.  If an</span>
</span><span class='line'><span class="s">element from the second sequence is less than the head of the first sequence, we</span>
</span><span class='line'><span class="s">know that it was discordant with all the elements remaining in the first</span>
</span><span class='line'><span class="s">sequence.  This is the insight that allows us to avoid the O(n^2) comparisons in</span>
</span><span class='line'><span class="s">the naive algorithm.</span>
</span><span class='line'>
</span><span class='line'><span class="s">A tuple containing the count of discords and the merged sequence is returned.&quot;</span>
</span><span class='line'>  <span class="p">[[</span><span class="nv">coll1</span> <span class="nv">coll2</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">;; Explicitly track the remaining counts to avoid doing a linear</span>
</span><span class='line'>         <span class="c1">;; scan of the sequence each time, which would get us back to O(n^2)</span>
</span><span class='line'>         <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll1</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">remaining-j</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">[</span><span class="nv">i</span> <span class="o">&amp;</span> <span class="nv">rest-i</span> <span class="ss">:as</span> <span class="nv">all-i</span><span class="p">]</span> <span class="nv">coll1</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">j</span> <span class="o">&amp;</span> <span class="nv">rest-j</span> <span class="ss">:as</span> <span class="nv">all-j</span><span class="p">]</span> <span class="nv">coll2</span>
</span><span class='line'>         <span class="nv">result</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-j</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-i</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-j</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">i</span> <span class="nv">j</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">swaps</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="nv">remaining-j</span>
</span><span class='line'>                     <span class="nv">rest-i</span> <span class="nv">all-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>     <span class="ss">:j&gt;i</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">remaining-i</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-j</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">all-i</span> <span class="nv">rest-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">j</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can do the full merge sort by applying that function to piece sizes that double until the whole collection is covered by a single sorted piece:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-sort-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Returns a vector containing the number of discordant swaps and the sorted</span>
</span><span class='line'><span class="s">collection.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>         <span class="nv">coll</span> <span class="nv">coll</span>
</span><span class='line'>         <span class="nv">piece-size</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="nv">piece-size</span> <span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">piece-pairs</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="mi">2</span> <span class="nv">pieces</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">piece-pairs</span> <span class="nb">first </span><span class="nv">second</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">new-swaps</span> <span class="nv">new-coll</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">piece-pairs</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">map </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">acc-s</span> <span class="nv">acc-c</span><span class="p">]</span> <span class="p">[</span><span class="nv">s</span> <span class="nv">c</span><span class="p">]]</span>
</span><span class='line'>                             <span class="p">[(</span><span class="nb">+ </span><span class="nv">acc-s</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">acc-c</span> <span class="nv">c</span><span class="p">)])</span>
</span><span class='line'>                           <span class="p">[</span><span class="mi">0</span> <span class="p">[]]))]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">new-swaps</span><span class="p">)</span> <span class="nv">new-coll</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">piece-size</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">coll</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing we are missing now is the tallies of tied pairs.  We could use <a href="http://clojuredocs.org/clojure_core/clojure.core/frequencies"><code>clojure.core/frequencies</code></a>, but Knight&rsquo;s original paper alludes to a different way which takes advantage of the fact that at different stages of the algorithm we have the list sorted by $X$ and then $Y$.  Most implementations do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tied-pair-count</span> <span class="p">[</span><span class="nv">sorted-coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">sorted-coll</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">partition-by</span> <span class="nv">identity</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="nv">count</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">%</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">%</span><span class="p">))</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have all the pieces, so we just have to put them together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">knights-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">n</span> <span class="p">(</span><span class="nb">count </span><span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">pair-count</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">xy-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">x-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="p">(</span><span class="nb">map first </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">sorted-ys</span><span class="p">]</span> <span class="p">(</span><span class="nf">merge-sort-and-count-discords</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">map second </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">y-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">sorted-ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">concordant-minus-discordant</span> <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span>
</span><span class='line'>                                       <span class="nv">x-pair-ties</span>
</span><span class='line'>                                       <span class="nv">y-pair-ties</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">- </span><span class="nv">xy-pair-ties</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">swaps</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="nv">concordant-minus-discordant</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">x-pair-ties</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">y-pair-ties</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>There are certainly many things I would write differently above if I was really trying for performance.  The goal here was to clearly illustrate the algorithm and maintain the asymptotic run-time characteristics.</p>

<p>Also, I recently submitted <a href="https://issues.apache.org/jira/browse/MATH-814">a patch</a> to the Apache Commons Math library that contains an implementation of this in pure Java if that&rsquo;s your thing.</p>

<p>I think this algorithm is a clever little gem and I really enjoyed learning it.  Deconstructing a familiar algorithm like merge sort and utilizing its internal operations for some other purpose is a neat approach that I&rsquo;ll definitely keep in my algorithmic toolbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unicode-math 0.2.0 released]]></title>
    <link href="http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released/"/>
    <updated>2013-10-13T14:28:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>I just deployed a new version of <a href="https://github.com/adereth/unicode-math">unicode-math</a> to Clojars.  It&rsquo;s a silly toy project that implements as many of <a href="http://symbolcodes.tlt.psu.edu/bylanguage/mathchart.html">Unicode&rsquo;s math symbols</a> as possible in Clojure.  If you <code>use</code> it, you can write things like:</p>

<p><a href="http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html">Binet&rsquo;s Fibonacci Number Formula</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">binet-fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="err">ⁿ</span> <span class="err">φ</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="err">ⁿ</span> <span class="p">(</span><span class="nb">- </span><span class="err">φ</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>     <span class="p">(</span><span class="err">√</span> <span class="mi">5</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/deMorgansLaws.html">de Morgan&rsquo;s Laws</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="err">∀</span> <span class="p">[</span><span class="nv">p</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]</span> <span class="nv">q</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="err">¬</span> <span class="p">(</span><span class="err">∧</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="err">∨</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">q</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/Inclusion-ExclusionPrinciple.html">Inclusion-Exclusion Principle</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∪</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">count </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∩</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instructions for use are on the <a href="https://github.com/adereth/unicode-math">project&rsquo;s Github page</a>.  The full list of implemented symbols is in <a href="https://github.com/adereth/unicode-math/blob/master/src/unicode_math/core.clj">src/unicode_math/core.clj</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add it up (properly)]]></title>
    <link href="http://adereth.github.io/blog/2013/10/10/add-it-up/"/>
    <updated>2013-10-10T22:14:00-04:00</updated>
    <id>http://adereth.github.io/blog/2013/10/10/add-it-up</id>
    <content type="html"><![CDATA[<p>Floating point arithmetic can sometimes be frustratingly <a href="https://en.wikipedia.org/wiki/Numerical_stability">unstable</a>, particularly when applied to large datasets.  Even though the classic <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a> seems to make the front page of of Hacker News on a yearly basis (<a href="https://news.ycombinator.com/item?id=4815399">1</a>, <a href="https://news.ycombinator.com/item?id=1982332">2</a>, <a href="http://news.ycombinator.com/item?id=1937182">3</a>, <a href="http://news.ycombinator.com/item?id=1746797">4</a>, <a href="http://news.ycombinator.com/item?id=687604">5</a>,
<a href="http://news.ycombinator.com/item?id=453396">6</a>), I have never seen any big data package actually apply one of the simplest and cheapest recommendations from it.</p>

<p>I&rsquo;m talking about the <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan Summation algorithm</a>.  Maybe it gets ignored because it&rsquo;s covered <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html#1076">half-way through the paper</a>.  Despite being buried, you can tell it&rsquo;s important because the author uses uncharacteristally strong language at the end of the section on the algorithm:</p>

<blockquote><p>Since these bounds hold for almost all commercial hardware, it would be foolish for numerical programmers to ignore such algorithms, and it would be irresponsible for compiler writers to destroy these algorithms by pretending that floating-point variables have real number semantics.</p></blockquote>

<p>Whoa.  Let&rsquo;s not be foolish!</p>

<h2>Example: The Harmonic Series in Clojure</h2>

<p>We&rsquo;re going to be computing a partial sum of the <a href="https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)">Harmonic Series</a>:</p>

<p><img src="http://upload.wikimedia.org/math/9/4/0/9402cf0c5599afa1a47d12d4a704e3de.png" title="\sum_{n=1}^\infty\,\frac{1}{n} \;\;=\;\; 1 \,+\, \frac{1}{2} \,+\, \frac{1}{3} \,+\, \frac{1}{4} \,+\, \frac{1}{5} \,+\, \cdots.\" ></p>

<p>It&rsquo;s another nice example because it contains terms that can&rsquo;t be represented precisely in floating point and the true sum diverges.</p>

<p>Let&rsquo;s start by computing the sum with infinite precision.  Clojure&rsquo;s <a href="https://github.com/clojure/clojure/blob/229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae/src/jvm/clojure/lang/Ratio.java"><code>Ratio</code></a> class represents values internally using <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html"><code>BigInteger</code></a> to separately store the numerator and denominator.  The summation happens using the grade-school style of making the denominators match and summing the numerators, so we have the exact running sum throughout.  At the very end, we convert the number to a floating point double:</p>

<figure class='code'><figcaption><span>Infinite Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-ratios</span> <span class="p">(</span><span class="nb">map / </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-ratios</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1 1/2 1/3 1/4 1/5 1/6)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-ratios</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)</span> <span class="nv">double</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the first 10,000 elements, we&rsquo;ll see numerical differences starting at the 14th decimal place, so just focus on the <em>last two digits</em> in the results.</p>

<p>As expected, we see a slightly different result if we compute the sum of doubles:</p>

<figure class='code'><figcaption><span>Double Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">map double </span><span class="nv">harmonic-ratios</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-doubles</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1.0 0.5 0.3333333333333333 0.25 0.2 0.1666666666666667)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 9.787606036044348 (48 vs. 82 with infinite precision)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One approach that will get more accurate results is to use an arbitrary precision representation of the numbers, like <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html"><code>BigDecimal</code></a>.  If we naively try to convert <code>harmonic-ratios</code> to <code>BigDecimal</code>, we get an <code>ArithmeticException</code> as soon as we hit 1/3:</p>

<figure class='code'><figcaption><span>Converting Fractions to BigDecimals </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 1M</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="nv">/2</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 0.5M</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="nv">/3</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to explicitly set the precision that we want using a <a href="http://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html"><code>MathContext</code></a>.  Let&rsquo;s use 32 decimal places for good measure:</p>

<figure class='code'><figcaption><span>32 Decimal Place Precision </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">inverse-bigdec</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">context</span> <span class="p">(</span><span class="nf">java.math.MathContext.</span> <span class="mi">32</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.divide</span> <span class="p">(</span><span class="nf">bigdec</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">bigdec</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">context</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">harmonic-bigdecs</span> <span class="p">(</span><span class="nb">map </span><span class="nv">inverse-bigdec</span> <span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">6</span> <span class="nv">harmonic-bigdecs</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1M 0.5M 0.33333333333333333333333333333333M 0.25M 0.2M 0.16666666666666666666666666666667M)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-bigdecs</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)</span> <span class="nv">double</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382 (perfectly matches infinite precision result)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s see how <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan Summation algorithm</a> performs on doubles:</p>

<figure class='code'><figcaption><span>Double Precision with Kahan Summation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kahan-sum</span> <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[[</span><span class="nv">x</span> <span class="o">&amp;</span> <span class="nv">xs</span><span class="p">]</span> <span class="nv">coll</span> <span class="nv">sum</span> <span class="mf">0.0</span> <span class="nv">carry</span> <span class="mf">0.0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-not </span><span class="nv">x</span> <span class="nv">sum</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">carry</span><span class="p">)</span> <span class="nv">t</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="nv">sum</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="nv">xs</span> <span class="nv">t</span> <span class="p">(</span><span class="nb">- </span><span class="nv">t</span> <span class="nv">sum</span> <span class="nv">y</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="nv">kahan-sum</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; 9.787606036044382 (perfectly matches infinite precision result)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything but vanilla summation of doubles has given us the same answer!</p>

<p>To be fair to doubles, we are summing them in what intuitively is a poor order.  The smallest values are being added to the largest intermediate sums, preventing their low-order bits from accumulating.  We can try to remedy this by reversing the order:</p>

<figure class='code'><figcaption><span>Double Precision Reversed </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">harmonic-doubles</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10000</span><span class="p">)</span> <span class="nb">reverse </span><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 9.787606036044386</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that&rsquo;s different.  This is the first time we&rsquo;re seeing the floating point noise lead to something larger than the infinite precision answer.</p>

<h2>Conclusion</h2>

<p>For just a couple additional floating point operations per element, we get a result that competes with the more expensive arbitrary precision solutions.  It also does better than the naive approach of pre-sorting, which is both more expensive and eliminates the ability to deal with the data in a streaming fashion.</p>

<p>In a subsequent post, I plan on covering how Kahan Summation can be used effectively in a map-reduce framework.</p>
]]></content>
  </entry>
  
</feed>
