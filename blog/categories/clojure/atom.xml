<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | adereth]]></title>
  <link href="http://adereth.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://adereth.github.io/"/>
  <updated>2014-02-12T07:24:42-05:00</updated>
  <id>http://adereth.github.io/</id>
  <author>
    <name><![CDATA[Matt Adereth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where LISP Fits]]></title>
    <link href="http://adereth.github.io/blog/2014/02/03/where-lisp-fits/"/>
    <updated>2014-02-03T07:19:00-05:00</updated>
    <id>http://adereth.github.io/blog/2014/02/03/where-lisp-fits</id>
    <content type="html"><![CDATA[<p>There are a lot of great essays about the power and joy of LISP.  I had read a bunch of them, but none convinced me to actually put the energy in to make it over those parentheses-shaped speed bumps.  A part of me always wanted to, mostly because I&rsquo;m convinced that our inevitable robot overlords will have to be programs that write programs and everything I had heard made me think that this would likely be done in a LISP.  It just makes sense to be prepared.</p>

<p>Almost two years ago, a coworker showed me some gorgeous code that used Clojure&rsquo;s <a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E">thrush macro</a> and I fell in love.  I found myself jonesing for <code>C-x C-e</code> whenever I tried going back to Java.  I devoured <a href="http://www.amazon.com/gp/product/1934356867/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356867&amp;linkCode=as2&amp;tag=adereth-20">Programming Clojure</a>, then <a href="http://www.amazon.com/gp/product/1935182641/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182641&amp;linkCode=as2&amp;tag=adereth-20">The Joy of Clojure</a>.  In search of a purer hit, I turned to the source: <a href="http://www-formal.stanford.edu/jmc/recursive.pdf">McCarthy&rsquo;s original paper on LISP</a>.  After reading it, I realized what someone could have told me that would have convinced me to invest the time 12 years earlier.</p>

<p>There&rsquo;s a lot of interesting stuff in that paper, but what really struck me was that it felt like it fit into a theoretical framework that I thought I already knew reasonably well.  This post isn&rsquo;t about the power of LISP, which has been covered by others better than I could.  Rather, it&rsquo;s about where LISP fits in the world of computation.</p>

<p><em>None of what I&rsquo;m about to say is novel or rigorous.  I&rsquo;m pretty sure that all the novel and rigorous stuff around this topic is 50 &ndash; 75 years old, but I just wasn&rsquo;t exposed to it as directly as I&rsquo;m going to try and lay out.</em></p>

<h2>The Automaton Model of Computation</h2>

<p>One of my favorite classes in school was <a href="http://www.cs.cmu.edu/~lblum/flac/index.htm">15-453: Formal Languages, Automata, and Computation</a>, which used <a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=113318779X&amp;linkCode=as2&amp;tag=adereth-20">Sipser&rsquo;s Introduction to the Theory of Computation</a>:</p>

<p><a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=113318779X&linkCode=as2&tag=adereth-20"><img src="http://adereth.github.io/images/sipser.jpg" width="250"></a></p>

<p>One aspect that I really enjoyed was that there was a narrative; we started with Finite State Automata (FSA), analyzed the additional power of Pushdown Automata (PDA), and saw it culminate in Turing Machines (TM).  Each of these models look very similar and have a natural connection: <em>they are each just state machines with different types of external memory.</em></p>

<p>The tape in the Turing Machine can be viewed as two stacks, with one stack representing everything to the left of the current position and the other stack as the current position and everything to the right.  With this model, we can view the computational hierarchy (FSA &ndash;> PDA &ndash;> TM) as just state machines with 0, 1, or 2 stacks.  I think it&rsquo;s quite an elegant representation and it makes the progression seem quite natural.</p>

<p>A key insight along the journey is that these machines are equivalent in power to other useful systems.  A sizable section in the chapter on Finite State Automata is dedicated to their equivalence with Regular Expressions (RegEx).  Context Free Grammars (CFG) are actually introduced <em>before</em> Pushdown Automata.  But when we get to Turing Machines, there&rsquo;s nothing but a couple paragraphs in a section called &ldquo;Equivalence with Other Models&rdquo;, which says:</p>

<blockquote><p>Many [languages], such as Pascal and LISP, look quite different from one another in style and structure.  Can some algorithm be programmed in one of them and not the others?  Of course not &mdash; we can compile LISP into Pascal and Pascal into LISP, which means that the two languages describe <em>exactly</em> the same class of algorithms.  So do all other reasonable programming languages.</p></blockquote>

<p>The book and class leave it at that and proceed onto the limits of computability, which is the real point of the material.  But there&rsquo;s a natural question that isn&rsquo;t presented in the book and which I never thought to ask:</p>

<center>
Finite State Automata <i class="fa fa-arrows-h"></i> Regular Expressions<br>
Pushdown Automata <i class="fa fa-arrows-h"></i> Context Free Grammars<br>
Turing Machines <i class="fa fa-arrows-h"></i> ?
</center>


<br>


<p>While we know that there are many models that equal Turing Machines, we could also construct other models that equal FSAs or PDAs.  Why are RegExs and CFGs used as the parallel models of computation?  With the machine model, we were able to just add a stack to move up at each level &ndash; is there a natural connection between RegExs and CFGs that we extrapolate to find their next level that is Turing equivalent?</p>

<h2>The Chomsky-Schützenberger Hierarchy</h2>

<p>It turns out that the answers to these questions were well covered in the 1950&rsquo;s by the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Chomsky-Schützenberger Hierarchy of Formal Grammars</a>.</p>

<p>The left-hand side of the relations above are the automaton-based models and the right-hand side are the language-based models.  The language models are all implemented as production rules, where some symbols are converted to other symbols.  The different levels of computation just have different restrictions on what kind of replacements rules are allowed.</p>

<p>For instance RegExs are all rules of the form $A \to a$ and $A \to aB$, where the uppercase letters are <a href="http://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols">non-terminal symbols</a> and the lowercase are terminal.  In CFGs, some of the restrictions on the right-hand side are lifted.  Allowing terminals to appear on the left-hand side lets us make rules that are conditional on what has already been replaced, which appropriately gets called &ldquo;Context Sensitive Grammars.&rdquo;  Finally, when all the rules are lifted, we get Recursively Enumerable languages, which are Turing equivalent.  The <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Wikipedia page</a> for the hierarchy and the respective levels is a good source for learning more.</p>

<p>When you look at the definition of LISP in McCarthy&rsquo;s paper, it&rsquo;s much closer to being an applied version of Chomsky&rsquo;s style than Turing&rsquo;s.  This isn&rsquo;t surprising, given that they were contemporaries at MIT.  In McCarthy&rsquo;s <a href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html#SECTION00030000000000000000">History of Lisp</a>, he expicitly states that making a usable version of this other side was his goal:</p>

<blockquote><p>These simplifications made LISP into a way of describing computable functions much neater than the Turing machines or the general recursive definitions used in recursive function theory.  The fact that Turing machines constitute an awkward programming language doesn&rsquo;t much bother recursive function theorists, because they almost never have any reason to write particular recursive definitions, since the theory concerns recursive functions in general.  They often have reason to prove that recursive functions with specific properties exist, but this can be done by an informal argument without having to write them down explicitly.  In the early days of computing, some people developed programming languages based on Turing machines; perhaps it seemed more scientific.  Anyway, I decided to write a paper describing LISP both as a programming language and as a formalism for doing recursive function theory.</p></blockquote>

<p>Here we have it straight from the source.  McCarthy was trying to capture the power of recursive definitions in a usable form.  Just like the automata theorists, once the linguists theorist hit Turing completeness, they focused on the limits instead of the usage.</p>

<p>Theoreticians are more interested in the equality of the systems than the usability, but as practitioners we know that it matters that some problems are more readily solvable in different representations.  Sometimes it&rsquo;s more appropriate to use a RegEx and sometimes an FSA is better suited, even though you could apply either.  While nobody is busting out the Turing Machine to tackle real-world problems, some of our languages are more influenced by one side or the other.</p>

<h2>Turing Machines Considered Harmful</h2>

<p>If you track back the imperative/functional divide to Turing Machines and Chomsky&rsquo;s forms, some of the roots are showing.  Turing Machines are conducive to a couple things that are considered harmful in larger systems: GOTO-based<sup><a href="http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html">1</a></sup> and mutation-centric<sup><a href="https://www.google.com/search?q=mutable+state+considered+harmful">2</a></sup> thinking.  In a lot of cases, we&rsquo;re finding that the languages influenced by the language-side are better suited for our problems.  Paul Graham <a href="http://www.paulgraham.com/diff.html">argues</a> that the popular languages have been steadily evolving towards the LISPy side.</p>

<p>Anyway, this is a connection that I wish I had been shown at the peak of my interest in automata theory because it would have gotten me a lot more excited about LISP sooner.  I think it&rsquo;s interesting to look at LISP as something that has the same theoretical underpinnings as these other tools (RegEx and CFG) that we already acknowledged as vital.</p>

<p><em>Thanks to <a href="http://jliszka.github.io/">Jason Liszka</a> and my colleagues at <a href="http://www.twosigma.com">Two Sigma</a> for help with this post!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every project.clj]]></title>
    <link href="http://adereth.github.io/blog/2014/01/20/every-project-dot-clj/"/>
    <updated>2014-01-20T17:33:00-05:00</updated>
    <id>http://adereth.github.io/blog/2014/01/20/every-project-dot-clj</id>
    <content type="html"><![CDATA[<p>I was recently looking for an interesting relational dataset for another project and the idea of using the dependencies for every Clojure project on GitHub came up.  It turns out that it&rsquo;s possible to download almost every project.clj using <a href="https://github.com/Raynes/tentacles">Tentacles</a>, so I decided to&hellip;</p>

<p><img src="/images/download-all.png" width="350"></p>

<p>The most annoying part was dealing with GitHub&rsquo;s rate limits, but after waiting a few hours I had them all on local disk and was able to play around.  I haven&rsquo;t gotten to dig into the data for the actual project I&rsquo;m doing, but there were a couple simple queries that I thought were worth sharing.</p>

<h2>Most frequently included packages</h2>

<p>I was able to download 10770 project.clj files.  Here are the 50 most frequently included packages listed in their <code>:dependencies</code>:</p>

<table>
<thead>
<tr>
<th>Dependency </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.clojure/clojure-contrib </td>
<td> 1524</td>
</tr>
<tr>
<td>compojure </td>
<td> 1348</td>
</tr>
<tr>
<td>hiccup </td>
<td> 743</td>
</tr>
<tr>
<td>clj-http </td>
<td> 738</td>
</tr>
<tr>
<td>ring/ring-jetty-adapter </td>
<td> 607</td>
</tr>
<tr>
<td>cheshire </td>
<td> 558</td>
</tr>
<tr>
<td>org.clojure/data.json </td>
<td> 552</td>
</tr>
<tr>
<td>clj-time </td>
<td> 526</td>
</tr>
<tr>
<td>org.clojure/tools.logging </td>
<td> 490</td>
</tr>
<tr>
<td>enlive </td>
<td> 444</td>
</tr>
<tr>
<td>noir </td>
<td> 388</td>
</tr>
<tr>
<td>ring/ring-core </td>
<td> 375</td>
</tr>
<tr>
<td>ring </td>
<td> 361</td>
</tr>
<tr>
<td>org.clojure/tools.cli </td>
<td> 348</td>
</tr>
<tr>
<td>org.clojure/java.jdbc </td>
<td> 344</td>
</tr>
<tr>
<td>org.clojure/clojurescript </td>
<td> 339</td>
</tr>
<tr>
<td>org.clojure/core.async </td>
<td> 235</td>
</tr>
<tr>
<td>midje </td>
<td> 227</td>
</tr>
<tr>
<td>org.clojure/math.numeric-tower </td>
<td> 219</td>
</tr>
<tr>
<td>korma </td>
<td> 206</td>
</tr>
<tr>
<td>incanter </td>
<td> 202</td>
</tr>
<tr>
<td>seesaw </td>
<td> 195</td>
</tr>
<tr>
<td>overtone </td>
<td> 172</td>
</tr>
<tr>
<td>slingshot </td>
<td> 160</td>
</tr>
<tr>
<td>quil </td>
<td> 158</td>
</tr>
<tr>
<td>com.taoensso/timbre </td>
<td> 150</td>
</tr>
<tr>
<td>http-kit </td>
<td> 149</td>
</tr>
<tr>
<td>ring/ring-devel </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/math.combinatorics </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/core.logic </td>
<td> 138</td>
</tr>
<tr>
<td>environ </td>
<td> 132</td>
</tr>
<tr>
<td>aleph </td>
<td> 132</td>
</tr>
<tr>
<td>log4j </td>
<td> 131</td>
</tr>
<tr>
<td>ch.qos.logback/logback-classic </td>
<td> 125</td>
</tr>
<tr>
<td>org.clojure/tools.nrepl </td>
<td> 124</td>
</tr>
<tr>
<td>congomongo </td>
<td> 124</td>
</tr>
<tr>
<td>com.datomic/datomic-free </td>
<td> 123</td>
</tr>
<tr>
<td>com.novemberain/monger </td>
<td> 123</td>
</tr>
<tr>
<td>lib-noir </td>
<td> 121</td>
</tr>
<tr>
<td>org.clojure/core.match </td>
<td> 118</td>
</tr>
<tr>
<td>ring/ring-json </td>
<td> 111</td>
</tr>
<tr>
<td>clojure </td>
<td> 110</td>
</tr>
<tr>
<td>org.clojure/data.xml </td>
<td> 110</td>
</tr>
<tr>
<td>log4j/log4j </td>
<td> 109</td>
</tr>
<tr>
<td>mysql/mysql-connector-java </td>
<td> 109</td>
</tr>
<tr>
<td>postgresql/postgresql </td>
<td> 107</td>
</tr>
<tr>
<td>org.clojure/data.csv </td>
<td> 101</td>
</tr>
<tr>
<td>org.clojure/tools.trace </td>
<td> 98</td>
</tr>
<tr>
<td>org.clojure/tools.namespace </td>
<td> 92</td>
</tr>
<tr>
<td>ring-server </td>
<td> 92</td>
</tr>
</tbody>
</table>


<br/>


<p>I think it makes a nice hit-list of projects to check out!</p>

<p>A couple interesting things jumped out at me:</p>

<ol>
<li>12.5% of Clojure projects on GitHub are using Compojure.  Impressive.</li>
<li>congomongo, com.novemberain/monger, com.datomic/datomic-free, mysql/mysql-connector-java, and postgresql/postgresql are all clustered together in the low 100&rsquo;s.</li>
</ol>


<h2>Most frequently applied licenses</h2>

<p>Just over half of the project.clj&rsquo;s don&rsquo;t contain a <code>:license</code>.  Here are the most popular:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>EPL </td>
<td> 4430</td>
</tr>
<tr>
<td>MIT </td>
<td> 336</td>
</tr>
<tr>
<td>Apache </td>
<td> 106</td>
</tr>
<tr>
<td>BSD </td>
<td> 92</td>
</tr>
<tr>
<td>GPL </td>
<td> 90</td>
</tr>
<tr>
<td>LGPL </td>
<td> 25</td>
</tr>
<tr>
<td>CC </td>
<td> 21</td>
</tr>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>AGPL </td>
<td> 11</td>
</tr>
<tr>
<td>Mozilla  </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br/>


<p>The EPL&rsquo;s dominance doesn&rsquo;t come as a surprise, given Clojure&rsquo;s use of it for the core libraries.</p>

<p>23 projects have &ldquo;WTF&rdquo; or &ldquo;fuck&rdquo; in their license string:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>Do What The Fuck You Want To Public License </td>
<td> 3</td>
</tr>
<tr>
<td>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2 </td>
<td> 1</td>
</tr>
<tr>
<td>All Rights Reserved Muthafucka </td>
<td> 1</td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>I&rsquo;d like to share a mirror of just the project.clj files wrapped up in a single download, but I want to be conscientious of the variety of licenses.  I&rsquo;ll clean up the code for pulling and summarizing all this data soon so others can play with it.  In the meantime, feel free to suggest other analyses that could be done on these&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quine Tweet Challenge]]></title>
    <link href="http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge/"/>
    <updated>2014-01-08T07:49:00-05:00</updated>
    <id>http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Quine_(computing)">quine</a> is a program which takes no input and outputs a copy of its own source code.  There&rsquo;s a history of making challenges out of variants on the idea (shortest quine, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Ouroboros_Programs">Ouroboros Programs</a>, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Multiquines">Multiquines</a>).  I&rsquo;d like to propose a new variant for our modern social age: the Quine Tweet.</p>

<h2>Inspiration</h2>

<p>Last year I was working through <a href="http://www.4clojure.com/">4Clojure</a> and I had to reacquaint myself with how to implement one for <a href="http://www.4clojure.com/problem/125">Problem #125: Gus&rsquo;s Quinundrum</a>.</p>

<p>A few months later, I saw this tweet from <a href="https://twitter.com/gtrakGT">Gary Trakhman</a>:</p>

<blockquote class="twitter-tweet" lang="en"><p>So simple!&#10;(defn send-tweet&#10;  [tweet]&#10;  (api/statuses-update :oauth-creds my-creds&#10;                       :params {:status tweet}))</p>&mdash; Gary Trakhman (@gtrakGT) <a href="https://twitter.com/gtrakGT/statuses/403227496352862208">November 20, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Seeing him tweet source code that tweets got me thinking about code that tweets its own source code.  Could a Quine Tweet be written?  I took a stab at adapting my Clojure code for Gus&rsquo;s Quinundrum, but I just couldn&rsquo;t make it fit in 140 characters.</p>

<h2>Enter Wolfram</h2>

<p>The next day, this came across my dash:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Hello world! -- tweeting with <a href="https://twitter.com/search?q=%23wolframlang&amp;src=hash">#wolframlang</a> on <a href="https://twitter.com/Raspberry_Pi">@Raspberry_Pi</a> using Send[&quot;Twitter&quot;,&quot;Hello world!&quot; ...]</p>&mdash; Stephen Wolfram (@stephen_wolfram) <a href="https://twitter.com/stephen_wolfram/statuses/403600114247565312">November 21, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Maybe this will enable my impossible dream of a Quine Tweet&hellip;</p>

<p>I finally got a Raspberry Pi running with the Wolfram Language and I made it happen:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>\{o, c\} = FromCharacterCode\[\{\{92, 40\}, \{92, 41\}\}\] ; SendMessage\[&quot;Twitter&quot;, StringReplace\[InString\[$Line\], \{o -&gt; &quot;&quot;, c -&gt; &quot;&quot;\}\]\]</p>&mdash; Matt Adereth (@adereth) <a href="https://twitter.com/adereth/statuses/420778395988135936">January 8, 2014</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>If you paste it into a notebook and evaluate, you&rsquo;ll get prompted for authorization and it&rsquo;ll post itself.  Here&rsquo;s a brief explanation of what it does:</p>

<ol>
<li><a href="http://reference.wolfram.com/mathematica/ref/$Line.html"><code>$Line</code></a> is the count of input expressions that have been evaluated.</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/InString.html"><code>InString</code></a> is a function that gets the input for the i<sup>th</sup> input expression.  It returns a string that has some extra escaped parentheses.</li>
<li>92 is the ASCII code for <code>\\</code>. 40 and 41 are the codes for <code>(</code> and <code>)</code>.  <a href="http://reference.wolfram.com/mathematica/ref/FromCharacterCode.html"><code>FromCharacterCode</code></a> can take a list of lists of ASCII codes and return a list of strings.  The list is destructured into the variables <code>o</code> (open) and <code>c</code> (close).</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/StringReplace.html"><code>StringReplace</code></a> is then used to clean up the extra parentheses.</li>
<li><code>SendMessage</code> is the new function in the Wolfram language that does all the hard work of posting.</li>
</ol>


<p>I don&rsquo;t think this is really in the true spirit of a quine, as having something like <code>InString</code> makes it a bit trivial, but you do what you must when you only have 140 characters!</p>

<h2>The Challenge</h2>

<p>So, can it be done in any other languages?  Here&rsquo;s what I think are fair restrictions:</p>

<ol>
<li>Any standard Twitter client library for your language can be linked using the language&rsquo;s normal methods (pom.xml, project.clj, etc.)</li>
<li>The authorization token can be supplied outside of source, either interactively or through a text file.  I don&rsquo;t imagine anyone wants to be sharing that&hellip;</li>
</ol>


<p>Bonus points if you manage to make the tweet and source include <code>#quine</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Counting Stars on GitHub]]></title>
    <link href="http://adereth.github.io/blog/2013/12/23/counting-stars-on-github/"/>
    <updated>2013-12-23T08:10:00-05:00</updated>
    <id>http://adereth.github.io/blog/2013/12/23/counting-stars-on-github</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://mbostock.github.com/d3/d3.min.js"></script>


<p>I&rsquo;ve been working on a nerd ethnography project with the <a href="http://developer.github.com/v3/">GitHub API</a>.  There&rsquo;s so much fun data to play with there that it&rsquo;s inevitable that I&rsquo;ll get a little distracted&hellip;</p>

<p>One distraction was the realization that I could use the search API to get a massive list of the top repos ordered by star count.  Once I started looking at the results, I realized that star data is an interesting alternative metric for evaluating language popularity.  Instead of looking at which languages people are actually writing new projects using, we can see which languages are used for the most popular projects.</p>

<h2>What are stars?</h2>

<p>In August 2012, GitHub <a href="https://github.com/blog/1204-notifications-stars">announced</a> a new version of their notification system that allowed users to easily mark a repository as interesting by &ldquo;starring&rdquo; it:</p>

<p><img src="/images/github-star-ui.png" alt="GitHub star UI" /></p>

<p>Stars are essentially lightweight bookmarks that are publicly visible.  Even though they were introduced just over a year ago, all &ldquo;watches&rdquo; were converted to stars so there&rsquo;s plenty of data.</p>

<h2>Which are the most starred repos?</h2>

<p>Let&rsquo;s start by looking at the top 20:</p>

<table>
<thead>
<tr>
<th> Rank </th>
<th> Repository </th>
<th> Language </th>
<th> Stars</th>
</tr>
</thead>
<tbody>
<tr>
<td> 1 </td>
<td> <a href="http://github.com/twbs/bootstrap">twbs/bootstrap</a> </td>
<td> JavaScript </td>
<td> 62111</td>
</tr>
<tr>
<td> 2 </td>
<td> <a href="http://github.com/jquery/jquery">jquery/jquery</a> </td>
<td> JavaScript </td>
<td> 27082</td>
</tr>
<tr>
<td> 3 </td>
<td> <a href="http://github.com/joyent/node">joyent/node</a> </td>
<td> JavaScript </td>
<td> 26352</td>
</tr>
<tr>
<td> 4 </td>
<td> <a href="http://github.com/h5bp/html5-boilerplate">h5bp/html5-boilerplate</a> </td>
<td> CSS </td>
<td> 23355</td>
</tr>
<tr>
<td> 5 </td>
<td> <a href="http://github.com/mbostock/d3">mbostock/d3</a> </td>
<td> JavaScript </td>
<td> 20715</td>
</tr>
<tr>
<td> 6 </td>
<td> <a href="http://github.com/rails/rails">rails/rails</a> </td>
<td> Ruby </td>
<td> 20284</td>
</tr>
<tr>
<td> 7 </td>
<td> <a href="http://github.com/FortAwesome/Font-Awesome">FortAwesome/Font-Awesome</a> </td>
<td> CSS </td>
<td> 19506</td>
</tr>
<tr>
<td> 8 </td>
<td> <a href="http://github.com/bartaz/impress.js">bartaz/impress.js</a> </td>
<td> JavaScript </td>
<td> 18637</td>
</tr>
<tr>
<td> 9 </td>
<td> <a href="http://github.com/angular/angular.js">angular/angular.js</a> </td>
<td> JavaScript </td>
<td> 17994</td>
</tr>
<tr>
<td> 10 </td>
<td> <a href="http://github.com/jashkenas/backbone">jashkenas/backbone</a> </td>
<td> JavaScript </td>
<td> 16502</td>
</tr>
<tr>
<td> 11 </td>
<td> <a href="http://github.com/Homebrew/homebrew">Homebrew/homebrew</a> </td>
<td> Ruby </td>
<td> 15065</td>
</tr>
<tr>
<td> 12 </td>
<td> <a href="http://github.com/zurb/foundation">zurb/foundation</a> </td>
<td> JavaScript </td>
<td> 14944</td>
</tr>
<tr>
<td> 13 </td>
<td> <a href="http://github.com/blueimp/jQuery-File-Upload">blueimp/jQuery-File-Upload</a> </td>
<td> JavaScript </td>
<td> 14312</td>
</tr>
<tr>
<td> 14 </td>
<td> <a href="http://github.com/harvesthq/chosen">harvesthq/chosen</a> </td>
<td> JavaScript </td>
<td> 14232</td>
</tr>
<tr>
<td> 15 </td>
<td> <a href="http://github.com/mrdoob/three.js">mrdoob/three.js</a> </td>
<td> JavaScript </td>
<td> 13686</td>
</tr>
<tr>
<td> 16 </td>
<td> <a href="http://github.com/vhf/free-programming-books">vhf/free-programming-books</a> </td>
<td> <em>Unknown</em> </td>
<td> 13658</td>
</tr>
<tr>
<td> 17 </td>
<td> <a href="http://github.com/adobe/brackets">adobe/brackets</a> </td>
<td> JavaScript </td>
<td> 13557</td>
</tr>
<tr>
<td> 18 </td>
<td> <a href="http://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh</a> </td>
<td> Shell </td>
<td> 13337</td>
</tr>
<tr>
<td> 19 </td>
<td> <a href="http://github.com/jekyll/jekyll">jekyll/jekyll</a> </td>
<td> Ruby </td>
<td> 13283</td>
</tr>
<tr>
<td> 20 </td>
<td> <a href="http://github.com/github/gitignore">github/gitignore</a> </td>
<td> <em>Unknown</em> </td>
<td> 13128</td>
</tr>
</tbody>
</table>


<br/>


<p>If you want to play with the data yourself, I&rsquo;ve put a cache of the top 5000 repositories <a href="/data/top-5000-repos.20131219.csv">here</a>.  I&rsquo;ve also posted the Clojure code I wrote to collect the data at <a href="https://github.com/adereth/counting-stars">adereth/counting-stars</a>.</p>

<h2>Which languages have the top spots?</h2>

<p>In <a href="http://adambard.com/blog/top-github-languages-for-2013-so-far/">Adam Bard&rsquo;s Top Github Languages for 2013 (so far)</a>, he counted repo creation and found that JavaScript and Ruby were pretty close.  The top star counts tell a very different story, with JavaScript dominating 7 of the top 10 spots.  CSS was in 11th place in his analysis, but it&rsquo;s 2 of the top 10 spots.</p>

<p>Observing that 7 of the top 10 spots are JavaScript gives a sense for both the volume and the relative ranking of JavaScript in that range of the leaderboard, but just seeing that another language is 50 of the top 5000 spots doesn&rsquo;t give nearly as much color.</p>

<p>One approach is to look at the number of repos in different ranges for each language:</p>

<table>
<thead>
<tr>
<th>Language </th>
<th> 1-10 </th>
<th> 1-100 </th>
<th> 1-1000 </th>
<th> 1-5000 </th>
<th> Top Repository</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript </td>
<td> 7 </td>
<td> 54 </td>
<td> 385 </td>
<td> 1605 </td>
<td> <a href="http://github.com/twbs/bootstrap">twbs/bootstrap</a> (1)</td>
</tr>
<tr>
<td>CSS </td>
<td> 2 </td>
<td> 8 </td>
<td> 41 </td>
<td> 174 </td>
<td> <a href="http://github.com/h5bp/html5-boilerplate">h5bp/html5-boilerplate</a> (4)</td>
</tr>
<tr>
<td>Ruby </td>
<td> 1 </td>
<td> 9 </td>
<td> 153 </td>
<td> 786 </td>
<td> <a href="http://github.com/rails/rails">rails/rails</a> (6)</td>
</tr>
<tr>
<td>Python </td>
<td>  </td>
<td> 5 </td>
<td> 64 </td>
<td> 420 </td>
<td> <a href="http://github.com/django/django">django/django</a> (44)</td>
</tr>
<tr>
<td><em>Unknown</em> </td>
<td>  </td>
<td> 5 </td>
<td> 30 </td>
<td> 138 </td>
<td> <a href="http://github.com/vhf/free-programming-books">vhf/free-programming-books</a> (15)</td>
</tr>
<tr>
<td>C++ </td>
<td>  </td>
<td> 4 </td>
<td> 22 </td>
<td> 108 </td>
<td> <a href="http://github.com/textmate/textmate">textmate/textmate</a> (35)</td>
</tr>
<tr>
<td>PHP </td>
<td>  </td>
<td> 3 </td>
<td> 38 </td>
<td> 248 </td>
<td> <a href="http://github.com/symfony/symfony">symfony/symfony</a> (58)</td>
</tr>
<tr>
<td>Shell </td>
<td>  </td>
<td> 3 </td>
<td> 19 </td>
<td> 89 </td>
<td> <a href="http://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh</a> (18)</td>
</tr>
<tr>
<td>Objective-C </td>
<td>  </td>
<td> 2 </td>
<td> 89 </td>
<td> 495 </td>
<td> <a href="http://github.com/AFNetworking/AFNetworking">AFNetworking/AFNetworking</a> (30)</td>
</tr>
<tr>
<td>C </td>
<td>  </td>
<td> 2 </td>
<td> 31 </td>
<td> 185 </td>
<td> <a href="http://github.com/torvalds/linux">torvalds/linux</a> (25)</td>
</tr>
<tr>
<td>Go </td>
<td>  </td>
<td> 2 </td>
<td> 13 </td>
<td> 61 </td>
<td> <a href="http://github.com/dotcloud/docker">dotcloud/docker</a> (45)</td>
</tr>
<tr>
<td>Java </td>
<td>  </td>
<td> 1 </td>
<td> 32 </td>
<td> 255 </td>
<td> <a href="http://github.com/nathanmarz/storm">nathanmarz/storm</a> (56)</td>
</tr>
<tr>
<td>VimL </td>
<td>  </td>
<td> 1 </td>
<td> 23 </td>
<td> 66 </td>
<td> <a href="http://github.com/mathiasbynens/dotfiles">mathiasbynens/dotfiles</a> (57)</td>
</tr>
<tr>
<td>CoffeeScript </td>
<td>  </td>
<td> 1 </td>
<td> 22 </td>
<td> 80 </td>
<td> <a href="http://github.com/jashkenas/coffee-script">jashkenas/coffee-script</a> (43)</td>
</tr>
<tr>
<td>Scala </td>
<td>  </td>
<td>  </td>
<td> 13 </td>
<td> 46 </td>
<td> <a href="http://github.com/playframework/playframework">playframework/playframework</a> (178)</td>
</tr>
<tr>
<td>C# </td>
<td>  </td>
<td>  </td>
<td> 8 </td>
<td> 65 </td>
<td> <a href="http://github.com/SignalR/SignalR">SignalR/SignalR</a> (205)</td>
</tr>
<tr>
<td>Clojure </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 37 </td>
<td> <a href="http://github.com/technomancy/leiningen">technomancy/leiningen</a> (361)</td>
</tr>
<tr>
<td>Perl </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 26 </td>
<td> <a href="http://github.com/sitaramc/gitolite">sitaramc/gitolite</a> (138)</td>
</tr>
<tr>
<td>ActionScript </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 10 </td>
<td> <a href="http://github.com/mozilla/shumway">mozilla/shumway</a> (606)</td>
</tr>
<tr>
<td>Emacs Lisp </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 20 </td>
<td> <a href="http://github.com/technomancy/emacs-starter-kit">technomancy/emacs-starter-kit</a> (477)</td>
</tr>
<tr>
<td>Erlang </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 15 </td>
<td> <a href="http://github.com/erlang/otp">erlang/otp</a> (568)</td>
</tr>
<tr>
<td>Haskell </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 12 </td>
<td> <a href="http://github.com/jgm/pandoc">jgm/pandoc</a> (740)</td>
</tr>
<tr>
<td>TypeScript </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 4 </td>
<td> <a href="http://github.com/bitcoin/bitcoin">bitcoin/bitcoin</a> (161)</td>
</tr>
<tr>
<td>Assembly </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 3 </td>
<td> <a href="http://github.com/jmechner/Prince-of-Persia-Apple-II">jmechner/Prince-of-Persia-Apple-II</a> (269)</td>
</tr>
<tr>
<td>Elixir </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 2 </td>
<td> <a href="http://github.com/elixir-lang/elixir">elixir-lang/elixir</a> (666)</td>
</tr>
<tr>
<td>Objective-J </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 2 </td>
<td> <a href="http://github.com/cappuccino/cappuccino">cappuccino/cappuccino</a> (667)</td>
</tr>
<tr>
<td>Rust </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/mozilla/rust">mozilla/rust</a> (225)</td>
</tr>
<tr>
<td>Vala </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/p-e-w/finalterm">p-e-w/finalterm</a> (282)</td>
</tr>
<tr>
<td>Julia </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/JuliaLang/julia">JuliaLang/julia</a> (356)</td>
</tr>
<tr>
<td>Visual Basic </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/bmatzelle/gow">bmatzelle/gow</a> (800)</td>
</tr>
<tr>
<td>TeX </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 6 </td>
<td> <a href="http://github.com/ieure/sicp">ieure/sicp</a> (2441)</td>
</tr>
<tr>
<td>R </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 5 </td>
<td> <a href="http://github.com/johnmyleswhite/ML_for_Hackers">johnmyleswhite/ML_for_Hackers</a> (2125)</td>
</tr>
<tr>
<td>Lua </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 4 </td>
<td> <a href="http://github.com/leafo/moonscript">leafo/moonscript</a> (3351)</td>
</tr>
<tr>
<td>PowerShell </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 3 </td>
<td> <a href="http://github.com/chocolatey/chocolatey">chocolatey/chocolatey</a> (1580)</td>
</tr>
<tr>
<td>Prolog </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 3 </td>
<td> <a href="http://github.com/onyxfish/csvkit">onyxfish/csvkit</a> (3498)</td>
</tr>
<tr>
<td>XSLT </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/wakaleo/game-of-life">wakaleo/game-of-life</a> (1093)</td>
</tr>
<tr>
<td>Matlab </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/zk00006/OpenTLD">zk00006/OpenTLD</a> (1292)</td>
</tr>
<tr>
<td>OCaml </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/MLstate/opalang">MLstate/opalang</a> (1380)</td>
</tr>
<tr>
<td>Dart </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/dart-lang/spark">dart-lang/spark</a> (1463)</td>
</tr>
<tr>
<td>Groovy </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/Netflix/asgard">Netflix/asgard</a> (1489)</td>
</tr>
<tr>
<td>Lasso </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/symfony/symfony-docs">symfony/symfony-docs</a> (2047)</td>
</tr>
<tr>
<td>LiveScript </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/gkz/LiveScript">gkz/LiveScript</a> (2226)</td>
</tr>
<tr>
<td>Scheme </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/eholk/harlan">eholk/harlan</a> (2648)</td>
</tr>
<tr>
<td>Common Lisp </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/google/lisp-koans">google/lisp-koans</a> (2889)</td>
</tr>
<tr>
<td>XML </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/kswedberg/jquery-tmbundle">kswedberg/jquery-tmbundle</a> (2972)</td>
</tr>
<tr>
<td>Mirah </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/mirah/mirah">mirah/mirah</a> (2985)</td>
</tr>
<tr>
<td>Arc </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/arclanguage/anarki">arclanguage/anarki</a> (3389)</td>
</tr>
<tr>
<td>DOT </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/cplusplus/draft">cplusplus/draft</a> (3583)</td>
</tr>
<tr>
<td>Racket </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/plt/racket">plt/racket</a> (3761)</td>
</tr>
<tr>
<td>F# </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/fsharp/fsharp">fsharp/fsharp</a> (4518)</td>
</tr>
<tr>
<td>D </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/D-Programming-Language/phobos">D-Programming-Language/phobos</a> (4719)</td>
</tr>
<tr>
<td>Ragel in Ruby Host </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/jgarber/redcloth">jgarber/redcloth</a> (4829)</td>
</tr>
<tr>
<td>Puppet </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/ansible/ansible-examples">ansible/ansible-examples</a> (4979)</td>
</tr>
</tbody>
</table>


<br/>


<p>The table is interesting, but it still doesn&rsquo;t give us a good sense for how the middle languages (C#, Scala, Clojure, Go) compare.  It also reveals that there are different star distributions within the languages.  For instance, CSS makes a showing in the top 10 but it has way fewer representatives (174) in the top 5000 than PHP (248), Objective C (495), or Java (255).</p>

<p>Looking at the top repo for each language also exposes a weakness in the methodology: GitHub&rsquo;s language identification isn&rsquo;t perfect and there are number of polyglot projects.  The top Java repo is <a href="http://github.com/nathanmarz/storm">Storm</a>, which uses enough Clojure (20.1% by GitHub&rsquo;s measure) to make this identification questionable when you take into account Clojure&rsquo;s conciseness over Java&rsquo;s.</p>

<h2>What about star counts?</h2>

<p>Looking at the results after ranking obscures the actual distribution of stars.  Using a <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.36.6685&amp;rep=rep1&amp;type=pdf">squarified treemap</a> with star count for the size and no hierarchy is a compact way of visualizing the ranking while exposing details about the absolute popularity of each repo.  The squarified treemap algorithm roughly maintains the order going from one corner to the other.</p>

<p>Here are the top 1000 repos, using stars for the size and language for the color:</p>

<p><em>(Language and repository name shown on mouseover, click to visit repository.  A bit of a fail on touch devices right now.)</em></p>

<div id='tm'></div>




<!-- CSS Styles: -->


<div>
  <style type="text/css">
.node {
  border: solid 1px white;
  font: 8px Lato;
  line-height: 12px;
  overflow: hidden;
  position: absolute;
  text-indent: 2px;
}

.tooltip{
    display: inline;
    position: relative;
}

.tooltip:hover:after{
    background: #333;
    background: rgba(0,0,0,.8);
    border-radius: 5px;
    bottom: 26px;
    color: #fff;
    content: attr(title);
    left: 20%;
    padding: 5px 15px;
    position: absolute;
    z-index: 98;
    width: 220px;
}

.tooltip:hover:before{
    border: solid;
    border-color: #333 transparent;
    border-width: 6px 6px 0 6px;
    bottom: 20px;
    content: "";
    left: 50%;
    position: absolute;
    z-index: 99;
}

  </style>
</div>




<script type="text/javascript">

var color = d3.scale.category20();

var margin = {top: 10, right: 0, bottom: 10, left: 0},
    width = $('.entry-content').width(),
    height = 500;

var treemap = d3.layout.treemap()
    .size([width, height])
    .sticky(true)
    .value(function(d) { return d.Stars; });

var div = d3.select("#tm").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

d3.csv("/data/top-1000-repos.20131219.csv", function(repos) {
  treemap.nodes({"children": repos});

  var node = div.datum(repos).selectAll(".node")
    .data(treemap.nodes)
    .enter()
      .append("a")
      .attr("href", function(d) { return d.children ? null : ("http://github.com/" + d.Repository); })
      .attr("class", function(d) { return d.children ? null : "tooltip"; })
      .attr("title", function(d) { return d.children ? null : "Repository: " + d.Repository + "\nLanguage: " + d.Language + "\nStars: " + d.Stars; })
      .append("div")
    .attr("class", "node")
    .call(position)
    .style("background", function(d) { return d.children ? null : color(d.Language); });
});

function position() {
  this.style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; });
};

</script>


<p>Despite being a little chaotic, we can start to see some of the details of the distributions.  It still suffers from being difficult to glean information about the middling languages.  The comparisons become a little easier if we group the boxes by language.  That&rsquo;s pretty easy, since that&rsquo;s really the intended usage of treemaps.</p>

<p>Here are the top 5000 grouped by language:</p>

<div id='tm2'></div>




<script type="text/javascript">

var treemap2 = d3.layout.treemap()
    .size([width, height])
    .sticky(true)
    .value(function(d) {return d.children ? null : d.stargazers_count; });

var div2 = d3.select("#tm2").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

d3.json("/data/lang-map.json", function(root) {
  var node = div2.datum(root).selectAll(".node")
      .data(treemap2.nodes)
      .enter()
      .append("a")
      .attr("href", function(d) { return d.children ? null : ("http://github.com/" + d.user + "/" + d.name); })
      .attr("class", function(d) { return d.children ? null : "tooltip"; })
      .attr("title", function(d) { return d.children ? null : "Repository: " + d.user + "/" + d.name + "\nLanguage: " + d.language + "\nStars: " + d.stargazers_count; })

      .append("div")
      .attr("class", "node")
      .call(position)
      .style("background", function(d) { return d.children ? color(d.name) : null; });

  d3.selectAll("input").on("change", function change() {
    var value = this.value === "count"
        ? function() { return 1; }
        : function(d) { return d.size; };

    node
        .data(treemap.value(value).nodes)
      .transition()
        .duration(1500)
        .call(position);
  });
});


function position() {
  this.style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; });
};

</script>


<p>Honestly, I&rsquo;m not really in love with this visualization, but it was a fun experiment.  I have some ideas for more effective representations, but I need to work on my d3.js-fu.  Hopefully it serves as an inspirational starting point for someone else&hellip;</p>

<h2>Conclusion</h2>

<p>Firstly, GitHub&rsquo;s API is really cool and can give you some insights that aren&rsquo;t exposed through their UI.  Like I said at the start of this post, I have another project that caused me to look at this API in the first place and I&rsquo;m really excited for the possibilities with this data.</p>

<p>GitHub&rsquo;s current UI is really focused on using stars to expose what&rsquo;s trending and doesn&rsquo;t really make it easy to see the all-time greatest hits.  Perhaps the expectation is that everyone already knows these repos, but I certainly didn&rsquo;t and I&rsquo;ve discovered or rediscovered a few gems.  My <a href="/blog/2013/12/15/font-awesome-easter-egg/">previous post</a> came about because of my discovery of <a href="http://fontawesome.io/">Font Awesome</a> through this investigation.</p>

<p>I&rsquo;ll close out with a couple questions (with no question marks) for the audience:</p>

<ol>
<li><p>Through this lens, JavaScript is <em>way</em> more popular than other metrics seem to indicate.  One hypothesis is that we all end up exposing things through the browser, so you end up doing something in JavaScript no matter what your language of choice is.  I&rsquo;m interested in other ideas and would also appreciate thoughts on how to validate them.</p></li>
<li><p>It&rsquo;s not obvious to me how to best aggregate ranking data.  I&rsquo;d love to see someone else take this data and expose something more interesting.  Even if you&rsquo;re not going to do anything with the data, any ideas are appreciated.</p></li>
</ol>


<p><i class="fa fa-star fa-2x"></i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A few interesting Clojure microbenchmarks]]></title>
    <link href="http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/"/>
    <updated>2013-11-22T07:50:00-05:00</updated>
    <id>http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>


<p></p>

<!--       font-family: Arial, sans-serif; "Menlo","Monaco","Andale Mono","lucida console","Courier New",monospace;-->


<!-- CSS Styles: -->


<div>
  <style type="text/css">

    .chart {
      font-family: monospace;
      font-size: 10px;
      margin-top: -40px;
    }

    .bar {
      fill: grey;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

  </style>
</div>




<!-- Global Variables and Handlers: -->


<script type="text/javascript">

  var margin = {top: 40, right: 40, bottom: 60, left: 110},
      width = $('.entry-content').width();

  $(window).resize(function() {
    width = $('.entry-content').width();
  });

  function draw(data, chart, height) {
    
    $(chart).empty();

    var x = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.mean})])
        .range([0, width - margin.left - margin.right]);

    var y = d3.scale.ordinal()
        .domain(d3.range(data.length))
        .rangeRoundBands([height - margin.top - margin.bottom, 0], 0.2);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .tickPadding(8)
    .ticks(8);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickPadding(8)
        .tickSize(0);

    var svg = d3.select(chart).append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('class', 'chart')
          .append('g')
        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    svg.selectAll('.chart')
        .data(data)
    .enter().append('rect')
        .attr('class', 'bar')
        .attr('y', function(d, i) { return y(i) })
        .attr('width', function(d) { return x(d.mean) })
        .attr('height', y.rangeBand());

    svg.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(0, ' + y.rangeExtent()[1] + ')')
        .call(xAxis);

    svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "end")
        .attr("x", width / 2 - 45)
        .attr("y", height - 60)
        .text("nanoseconds");

    svg.append('g')
        .attr('class', 'y axis')
        .call(yAxis)
      .selectAll('text')
        .text(function(d) { return data[d].code; });
    
  }
  
  function drawWithResize(data, chart, height) {
    draw(data, chart, height);
    $(window).resize(function() {draw(data, chart, height); })
  }
;


</script>


<p><a href="http://ideolalia.com/">Zach Tellman</a> delivered a really informative and practical unsession at <a href="http://clojure-conj.org/">Clojure Conj 2013</a> entitled &ldquo;Predictably Fast Clojure.&rdquo;  It was described as:</p>

<blockquote><p>An exploration of some of the underlying mechanisms in Clojure, and how to build an intuition for how fast your code should run. Time permitting, we&rsquo;ll also explore how to work around these mechanisms, and exploit the full power of the JVM.</p></blockquote>

<p>I&rsquo;d like to share a few interesting things that I learned from this talk and that I subsequently verified and explored.</p>

<h2>How to benchmark</h2>

<p>It turns out that benchmarking is hard and benchmarking on the JVM is even harder.  Fortunately, the folks at the Elliptic Group have thought long and hard about how to do it right and have written <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=robust+java+benchmarking">a couple of great articles</a> on the matter.  Hugo Duncan&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium library</a> makes it super easy to use these robust techniques.</p>

<p>All the benchmarks in this post were run on my dual-core 2.6 GHz Intel Core i5 laptop.  The JVM was started with <code>lein with-profile production repl</code>, which enables more aggressive JIT action at the cost of slower start times.  If you try to use Criterium without this, you&rsquo;ll get warnings spewed for every benchmark you run.</p>

<h2>Surprising operations on lists, vectors, and tuples</h2>

<p>The first thing that he discussed was the relatively poor performance of <code>first</code> on vectors.</p>

<p>For the tests, I made the some simple collections:
<code>clojure
(def ve [0 1 2])
(def li '(0 1 2))
(def tu (clj-tuple/tuple 0 1 2))
</code></p>

<p>And then I timed them each with <code>first</code> and <code>(nth coll 0)</code>:</p>

<div id='chart-1'></div>


<script type='text/javascript'>
  var data = [
      {code: "(first ve)", mean: 59.387551, lower: 56.557346, upper: 75.434730},
      {code: "(first li)", mean: 11.814687, lower: 9.933760, upper: 17.651180},
      {code: "(first tu)", mean: 12.026005, lower: 11.096498, upper: 17.716830},
      {code: "(nth ve 0)", mean: 14.507457, lower: 13.379794, upper: 19.732508},
      {code: "(nth li 0)", mean: 132.042247, lower: 123.849601, upper: 173.395438},
      {code: "(nth tu 0)", mean: 11.240653, lower: 10.739338, upper: 12.333350},
      ];
  data.reverse();
  drawWithResize(data, '#chart-1', 275);
</script>


<p>The <a href="http://clojuredocs.org/clojure_core/clojure.core/first">documentation</a> says that <code>first</code> &ldquo;calls seq on its argument.&rdquo;  This is effectively true, but if you look at the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/RT.java#L575">source</a> you&rsquo;ll see that if the collection implements <code>ISeq</code>, <code>seq</code> doesn&rsquo;t need to be called.  As a result, the performance of <code>first</code> on lists, which do implement <code>ISeq</code>, is much better than on vectors, which don&rsquo;t.  Zach took advantage of this observation in his <a href="https://github.com/ztellman/clj-tuple">clj-tuple</a> library and made sure that tuples implement <code>ISeq</code>.</p>

<p>What&rsquo;s really interesting is that you can use <code>(nth coll 0)</code> to get the first element of a vector faster that you can with <code>first</code>.  Unfortunately, this only does well with vectors.  The performance is abysmal when applied to lists, so you should stick to <code>first</code> if you don&rsquo;t know the data structure you are operating on.</p>

<p>The apparent slowness of <code>seq</code> on a vector made me wonder about the <code>empty?</code> function, which uses <code>seq</code> under the hood:</p>

<p><code>clojure
user=&gt; (source empty?)
(defn empty?
  "Returns true if coll has no items - same as (not (seq coll)).
  Please use the idiom (seq x) rather than (not (empty? x))"
  {:added "1.0"
   :static true}
  [coll] (not (seq coll)))
</code></p>

<p>If using <code>seq</code> is so slow, perhaps we can get better performance by just getting the count of elements and testing if it&rsquo;s zero:</p>

<div id='chart-empty'></div>


<script type='text/javascript'>
  var dataE = [
{code: "(empty? ve)", mean: 22.436542, lower: 22.052842, upper: 23.003189},
{code: "(empty? li)", mean: 12.293540, lower: 11.680523, upper: 15.369996},
{code: "(empty? tu)", mean: 18.512765, lower: 17.351246, upper: 22.757244},
{code: "(= 0 (count ve))", mean: 11.209652, lower: 10.451370, upper: 15.123089},
{code: "(= 0 (count li))", mean: 10.710336, lower: 10.417919, upper: 11.667121},
{code: "(= 0 (count tu))", mean: 10.741061, lower: 10.396224, upper: 13.246183},
      ];
  dataE.reverse();
  drawWithResize(dataE, '#chart-empty', 275);
</script>


<p>Of course, this is a bad idea for lazy sequences and should probably be avoided, as we&rsquo;ll incur a cost that is linear in the size of the sequence just to get the count.</p>

<p>I don&rsquo;t think this will affect my day to day code, but it certainly is interesting and surfaced a bit more about how things actually work in Clojure.</p>

<h2>Inconsistent protocol timings</h2>

<p>This was a surprising one that also peeled back a layer on Clojure&rsquo;s implementation.  In Fogus&rsquo;s <a href="http://blog.fogus.me/2011/10/14/why-clojure-doesnt-need-invokedynamic-but-it-might-be-nice/">Why Clojure might not need invokedynamic, but it might be nice</a>, he explained:</p>

<blockquote><p>Clojure&rsquo;s protocols are polymorphic on the type of the first argument. The protocol functions are call-site cached (with no per-call lookup cost if the target class remains stable). In other words, the implementation of Clojure&rsquo;s protocols are built on polymorphic inline caches.</p></blockquote>

<p>The consequence of this is that we will see worse performance if the type of the first argument to a protocol&rsquo;s method keeps changing.  I made a simple test to see how significant this is:</p>

<p>```clojure
(defprotocol P
  (f [x]))</p>

<p>(extend-protocol P
  String (f [<em>] 1)
  Long (f [</em>] 2))</p>

<p>(defn g [x y]
  (+ (f x) (f y)))</p>

<p>(def s0 &ldquo;foo&rdquo;)
(def s1 &ldquo;bar&rdquo;)
(def n0 0)
(def n1 1)
```</p>

<p><code>g</code> calls <code>f</code> on both its arguments and we expect <code>f</code> to perform best when it&rsquo;s consistently called on a single type:</p>

<div id='chart-2'></div>


<script type='text/javascript'>
  var data2 = [
{code: "(g n0 n1)", mean: 21.597699},
{code: "(g s0 s1)", mean: 22.550262},
{code: "(g n0 s0)", mean: 37.527409}
      ];
  data2.reverse();
  drawWithResize(data2, '#chart-2', 190);
</script>


<p>The expectation was correct.  There was some subsequent talk about whether the penalty of this cache miss was predictable.  Theoretically, the cost could be unbounded if you extend the protocol with enough types and have horrible luck with the hash codes of those types colliding, but my understanding of the caching logic is that it will usually be the small constant that we observed here.</p>

<p>You can see why by taking a look at how the cache works in <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/MethodImplCache.java#L76">MethodImplCache.java</a>.  The hash code of the class is shifted and masked by values that form a simple perfect hash, which is determined by the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/clj/clojure/core.clj#L5971"><code>maybe-min-hash</code> function</a>.  The use of a perfect hash means that we should see consistent lookup times for even moderately large caches.</p>

<p>In the rare case that a perfect hash can&rsquo;t be found by <code>maybe-min-hash</code>, the cache falls back to using a <code>PersistentArrayMap</code>, which can have slightly worse performance.  In any case, I don&rsquo;t think there&rsquo;s much to worry about here.</p>

<p>One neat thing I discovered while testing all of this is that you don&rsquo;t suffer this cache-miss penalty if you declare that you support a protocol in your <code>deftype</code> or if you <code>reify</code>, but you do if you use <code>extend-protocol</code>:</p>

<p>```clojure
(deftype X []
  P
  (f [_] 3))
(def dt (X.))</p>

<p>(def re (reify P (f [_] 4)))</p>

<p>(deftype Y [])
(extend-protocol P
  Y
  (f [_] 5))
(def ep (Y.))
```</p>

<div id='chart-3'></div>


<script type='text/javascript'>
  var data3 = [
      {code: "(g s0 dt)", mean: 19.389459},
      {code: "(g s0 re)", mean: 19.747690},
      {code: "(g s0 ep)", mean: 76.890915},
      ];
  data3.reverse();
  drawWithResize(data3, '#chart-3', 190);
</script>


<p>My understanding is that the declaration of a protocol results in the creation of function objects and in a corresponding interface.  When the function is called, the first thing it does when trying to dispatch is see if the first argument implements the interface for the protocol that declared the function in the first place.  If it did, the corresponding method on the object is called.  If it doesn&rsquo;t implement the interface, it next uses the MethodImplCache and has the potential to suffer from the cache miss.  What&rsquo;s great is that if the object does implement the interface, the most recent entry in the cache is unaffected.</p>

<p>We can verify that the reified object and the instance of the type that was deftyped with the protocol both implement the interface and the other one doesn&rsquo;t:</p>

<p>```clojure
user=> (supers (type dt))</p>

<h1>{user.P clojure.lang.IType java.lang.Object}</h1>

<p>user=> (supers (type re))</p>

<h1>{clojure.lang.IObj user.P java.lang.Object clojure.lang.IMeta}</h1>

<p>user=> (supers (type ep))</p>

<h1>{clojure.lang.IType java.lang.Object}</h1>

<p>```</p>

<h2>Determining if your type hints worked</h2>

<p>Often when we want to squeeze every last bit of performance, we use type hints to avoid reflection and to force the use of primitives.  Zach demonstrated how to use Gary Trakhman&rsquo;s <a href="https://github.com/gtrak/no.disassemble">no.disassemble</a> to inspect the byte code of a function directly from the REPL.</p>

<p>I haven&rsquo;t gotten to play with it yet, but the ability to quickly compare the byte code between two implementations in the REPL looked amazing.</p>

<h2>Thanks</h2>

<p>Thanks to Zach Tellman for the informative presentation that motivated this and to David Greenberg for help investigating the protocol performance issues.</p>

<p>If there&rsquo;s anything I got wrong, please let me know in the comments&hellip; thanks!</p>
]]></content>
  </entry>
  
</feed>
