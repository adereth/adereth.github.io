<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | adereth]]></title>
  <link href="http://adereth.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://adereth.github.io/"/>
  <updated>2014-08-14T18:41:30-07:00</updated>
  <id>http://adereth.github.io/</id>
  <author>
    <name><![CDATA[Matt Adereth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Clojure Evaluation Keybindings in Emacs]]></title>
    <link href="http://adereth.github.io/blog/2014/05/29/custom-clojure-evaluation-keybindings-in-emacs/"/>
    <updated>2014-05-29T06:28:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/05/29/custom-clojure-evaluation-keybindings-in-emacs</id>
    <content type="html"><![CDATA[<p>I love <a href="http://blog.jayfields.com/2014/01/repl-driven-development.html">REPL Driven Development</a>.  My style is to write expressions directly in the file that I&rsquo;m working on and to use <code>C-x C-e</code> to view the value of the last command in the minibuffer.</p>

<p>Being able to move my cursor to a sub-expression and see the value of that expression immediately feels like a superpower.  I love this ability and it&rsquo;s one of the things that keeps me locked into Clojure+Emacs as my preferred enviroment.</p>

<p>This power can be taken to the next level by making custom evaluation commands that run whatever you want on the expression at your cursor.</p>

<h2>The Basic Pattern</h2>

<p>Let&rsquo;s start by looking at the Elisp that defines <code>cider-eval-last-sexp</code>, which is what gets invoked when we press <code>C-x C-e</code>:</p>

<p>```clojure
(defun cider-eval-last-sexp (&amp;optional prefix)
  &ldquo;Evaluate the expression preceding point.
If invoked with a PREFIX argument, print the result in the current buffer.&rdquo;
  (interactive &ldquo;P&rdquo;)
  (if prefix</p>

<pre><code>  (cider-interactive-eval-print (cider-last-sexp))
(cider-interactive-eval (cider-last-sexp))))
</code></pre>

<p>```</p>

<p>The important part is that we can use <code>cider-last-sexp</code> to get the expression before the cursor as a string and we can evaluate a string by passing it to <code>cider-interactive-eval</code>.  We&rsquo;ll write some basic Elisp to make a new function that modifies the string before evaluation and then we&rsquo;ll bind this function to a new key sequence.</p>

<p>The essential pattern we&rsquo;ll use is:</p>

<p>```clojure
(defun custom-eval-last-sexp ()
  (interactive)
  (cider-interactive-eval</p>

<pre><code>(format "(require 'some-namespace)
         (some-namespace/some-fn %s)"
        (cider-last-sexp))))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c c&rdquo;) &lsquo;custom-eval-last-sexp)
```</p>

<p>If you happen to still be using Swank or nrepl.el, you should use <code>swank-interactive-eval</code> and <code>swank-last-sexp</code> or <code>swank-interactive-eval</code> and <code>nrepl-last-sexp</code>.</p>

<p>Let&rsquo;s look at some of the useful things we can do with this&hellip;</p>

<h2>Collections</h2>

<p>I frequently deal with collections that are too big to display nicely in the minibuffer.  It&rsquo;s nice to be able to explore them with a couple keystrokes.  Here&rsquo;s a simple application of the pattern that gives us the size of the collection by just hitting <code>C-c c</code>:</p>

<p>```clojure
(defun count-last-expression ()</p>

<pre><code>   (interactive)
   (cider-interactive-eval
     (format "(count %s)"
             (cider-last-expression))))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c c&rdquo;) &lsquo;count-last-expression)
```</p>

<p>Another useful one is to just show the nth value.  This one is a little more interesting because it requires a parameter:</p>

<p>```clojure
(defun nth-from-last-expression (n)</p>

<pre><code>   (interactive "p")
   (cider-interactive-eval
     (format "(nth %s %s)"
             (cider-last-expression) n)))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c n&rdquo;) `nth-from-last-expression)
```</p>

<p>If you just use <code>C-c n</code>, Emacs defaults the parameter value to 1.  You can pass an argument using <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html">Emacs' universal argument functionality</a>.  For example, to get the 0<sup>th</sup> element, you could either use <code>C-u 0 C-c n</code> or <code>M-0 C-c n</code>.</p>

<h2>Write to File</h2>

<p>Sometimes the best way to view a value is to look at it in an external program.  I&rsquo;ve used this pattern when working on Clojure code that generates SVG, HTML, and <a href="/blog/2014/04/09/3d-printing-with-clojure/">3D models</a>.  Here&rsquo;s what I use for 3D modeling:</p>

<p>```clojure
(defun spit-scad-last-expression ()
  (interactive)
  (cider-interactive-eval</p>

<pre><code>(format 
  "(require 'scad-clj.scad)
   (spit \"eval.scad\" (scad-clj.scad/write-scad %s))"
  (cider-last-expression))))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c 3&rdquo;) &lsquo;spit-scad-last-expression)
```</p>

<p>This writes the <code>eval.scad</code> file to the root directory of the project.  It&rsquo;s great because OpenSCAD watches open files and automatically refreshes when they change.  You can run this on an expression that defines a shape and immediately see the shape in another window.  I used this technique in <a href="http://www.meetup.com/Clojure-NYC/events/180303582/">my recent presentation on 3D printing at the Clojure NYC meetup</a> and I got feedback that this made the live demos easier to follow.</p>

<p>Here&rsquo;s what it looks like when you <code>C-c 3</code> on a nested expression that defines a cube:</p>

<p><img src="/images/show-scad.png" alt="OpenScad Screenshot" /></p>

<h2>View Swing Components</h2>

<p>If you have to use Swing, your pain can be slightly mitigated by having a quick way to view components.  This will give you a shortcut to pop up a new frame that contains what your expression evaluates to:</p>

<p>```clojure
(defun frame-last-expression ()
  (interactive)
  (cider-interactive-eval</p>

<pre><code>(format 
 "(doto (javax.swing.JFrame. \"eval\")
    (.. (getContentPane) (add %s))
    (.pack)
    (.show))"
 (cider-last-expression))))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c f&rdquo;) &lsquo;frame-last-expression)
```</p>

<p>This plays nicely with <a href="https://github.com/daveray/seesaw">Seesaw</a>, but doesn&rsquo;t presume that you have it on your classpath.  Here&rsquo;s what it looks like when you <code>C-c f</code> at the end of an expression that defines a Swing component:</p>

<p><img src="/images/show-frame.png" alt="JFrame Screenshot" /></p>

<h2>Benchmarking with Criterium</h2>

<p>In <a href="/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/">A Few Interesing Clojure Microbenchmarks</a>, I mentioned Hugo Duncan&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium library</a>.  It&rsquo;s a reliable way of measuring the performance of an expression.  We can bring it closer to our fingertips by making a function for benchmarking an expression instead of just evaluating it:</p>

<p>```clojure
(defun benchmark-last-expression ()
  (interactive)
  (cider-interactive-eval</p>

<pre><code>(format "(require 'criterium.core)
         (criterium.core/quick-benchmark %s)"
        (cider-last-expression))))
</code></pre>

<p>(define-key cider-mode-map (kbd &ldquo;C-c b&rdquo;) &lsquo;benchmark-last-expression)
```</p>

<h2>Conclusion</h2>

<p>I find this simple pattern to be quite handy.  Also, when I&rsquo;m showing off the power of nrepl to the uninitiated, being able to invoke arbitrary functions on whatever is at my cursor looks like pure magic.</p>

<p>I hope you find this useful and if you invent any useful bindings or alternative ways of implementing this pattern, please share!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Printing with Clojure]]></title>
    <link href="http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure/"/>
    <updated>2014-04-09T07:02:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing some 3D printing for <a href="https://twitter.com/adereth/status/444145229109555200/photo/1">my next keyboard project</a> and I&rsquo;ve got a workflow that I&rsquo;m pretty happy with that I&rsquo;d like to share.</p>

<p>When I first started trying to make models a month ago, I tried <a href="http://www.blender.org/">Blender</a>.  It&rsquo;s an amazing beast, but after a few hours of tutorials it was clear that it would take a while to get proficient with it.  Also, it is really designed for interactive modeling and I need something that I can programmatically tweak.</p>

<h2>OpenSCAD</h2>

<p><img src="/images/openscad.gif" alt="OpenSCAD Screenshot" /></p>

<p>A couple of friends suggested <a href="http://www.openscad.org/">OpenSCAD</a>, which is touted as &ldquo;the programmers' solid 3D CAD modeler.&rdquo;  It provides a power set of primitive shapes and operations, but the language itself leaves a bit to be desired.  This isn&rsquo;t a beat-up-on-SCAD post, but a few of the things that irked me were:</p>

<ul>
<li>Strange function application syntax (parameters in parens after the function name with an expression or block following the closing paren)</li>
<li>Unclear variable binding rules (multiple passes are made over the code and the results of changing a variable may affect things earlier in the code unexpectedly)</li>
<li>No package/namespace management</li>
<li>Multiple looping constructs that depend on what you are going to do with the results, not on how you want to loop</li>
</ul>


<h2>scad-clj</h2>

<p>Fortunately, <a href="https://github.com/farrellm">Matt Farrell</a> has written <a href="https://github.com/farrellm/scad-clj">scad-clj</a>, an OpenSCAD DSL in Clojure.  It addresses every issue I had with OpenSCAD and lends itself to a really nice workflow with the Clojure REPL.</p>

<p>To get started using it, add the dependency on <a href="https://clojars.org/scad-clj"><code>[scad-clj "0.1.0"]</code></a> to your <code>project.clj</code> and fire up your REPL.</p>

<p>All of the functions for creating 3D models live in the <code>scad-clj.model</code> namespace.  There&rsquo;s no documentation yet, so in the beginning you&rsquo;ll have to look at the <a href="https://github.com/farrellm/scad-clj/blob/master/src/scad_clj/model.clj">source for <code>model.clj</code></a> and occassionally the <a href="http://www.openscad.org/documentation.html">OpenSCAD documentation</a>.  Fortunately, there really isn&rsquo;t much to learn and it&rsquo;s quite a revelation to discover that almost everything you&rsquo;ll want to do can be done with a handful of functions.</p>

<p>Here&rsquo;s a simple model that showcases each of the primitive shapes:</p>

<p><code>clojure
(def primitives
  (union
   (cube 100 100 100)
   (sphere 110)
   (cylinder 10 150)))
</code></p>

<p>Evaluating this gives us a data structure that can be converted into an .scad file using <code>scad-clj.scad/write-scad</code> to generate a string and <code>spit</code>.</p>

<p>```clojure
(spit &ldquo;post-demo.scad&rdquo;</p>

<pre><code>  (write-scad primitives))
</code></pre>

<p>```</p>

<p>We&rsquo;re going to use OpenSCAD to view the results.  One feature of OpenSCAD that is super useful for this workflow is that it watches opened files and automatically refreshes the rendering when the file is updated.  This means that we can just re-evaluate our Clojure code and see the results immediately in another window:</p>

<p><img src="/images/scad-primitives.png" alt="Primitives Screenshot" /></p>

<p>scad-clj makes all new primitive shapes centered at the origin.  We can use the shape operator functions to move them around and deform them:</p>

<p>```clojure
(def primitives
  (union
   (&ndash;>> (cube 100 100 100)</p>

<pre><code>    (rotate (/ Math/PI 4) [1 1 1])
    (translate [150 0 0]))
</code></pre>

<p>   (&ndash;>> (sphere 70)</p>

<pre><code>    (scale [1/2 1/2 2])
    (translate [-150 0 0]))
</code></pre>

<p>   (cylinder 10 160)))
```</p>

<p><img src="/images/scad-operators.png" alt="Operator Screenshot" /></p>

<p>I snuck <code>union</code> into those examples.  Shapes can also be combined using <code>intersection</code>, <code>difference</code>, and <code>hull</code>.  It&rsquo;s pretty incredible how much can be done with just these.  For example, here&rsquo;s the latest iteration of my keyboard design built using clj-scad:</p>

<p><img src="/images/scad-keyboard.png" alt="Keyboard" /></p>

<h2>3D Printing</h2>

<p>Once your design is complete, you can use OpenSCAD to export it as an STL file which can then be imported to software like <a href="http://replicat.org/">ReplicatorG</a> or <a href="https://www.makerbot.com/makerware/">Makerware</a> for processing into an .x3g file that can be printed:</p>

<p><img src="/images/printed.JPG" alt="Keyboard" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where LISP Fits]]></title>
    <link href="http://adereth.github.io/blog/2014/02/03/where-lisp-fits/"/>
    <updated>2014-02-03T07:19:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/02/03/where-lisp-fits</id>
    <content type="html"><![CDATA[<p>There are a lot of great essays about the power and joy of LISP.  I had read a bunch of them, but none convinced me to actually put the energy in to make it over those parentheses-shaped speed bumps.  A part of me always wanted to, mostly because I&rsquo;m convinced that our inevitable robot overlords will have to be programs that write programs and everything I had heard made me think that this would likely be done in a LISP.  It just makes sense to be prepared.</p>

<p>Almost two years ago, a coworker showed me some gorgeous code that used Clojure&rsquo;s <a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E">thrush macro</a> and I fell in love.  I found myself jonesing for <code>C-x C-e</code> whenever I tried going back to Java.  I devoured <a href="http://www.amazon.com/gp/product/1934356867/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356867&amp;linkCode=as2&amp;tag=adereth-20">Programming Clojure</a>, then <a href="http://www.amazon.com/gp/product/1935182641/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182641&amp;linkCode=as2&amp;tag=adereth-20">The Joy of Clojure</a>.  In search of a purer hit, I turned to the source: <a href="http://www-formal.stanford.edu/jmc/recursive.pdf">McCarthy&rsquo;s original paper on LISP</a>.  After reading it, I realized what someone could have told me that would have convinced me to invest the time 12 years earlier.</p>

<p>There&rsquo;s a lot of interesting stuff in that paper, but what really struck me was that it felt like it fit into a theoretical framework that I thought I already knew reasonably well.  This post isn&rsquo;t about the power of LISP, which has been covered by others better than I could.  Rather, it&rsquo;s about where LISP fits in the world of computation.</p>

<p><em>None of what I&rsquo;m about to say is novel or rigorous.  I&rsquo;m pretty sure that all the novel and rigorous stuff around this topic is 50 &ndash; 75 years old, but I just wasn&rsquo;t exposed to it as directly as I&rsquo;m going to try and lay out.</em></p>

<h2>The Automaton Model of Computation</h2>

<p>One of my favorite classes in school was <a href="http://www.cs.cmu.edu/~lblum/flac/index.htm">15-453: Formal Languages, Automata, and Computation</a>, which used <a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=113318779X&amp;linkCode=as2&amp;tag=adereth-20">Sipser&rsquo;s Introduction to the Theory of Computation</a>:</p>

<p><a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=113318779X&linkCode=as2&tag=adereth-20"><img src="http://adereth.github.io/images/sipser.jpg" width="250"></a></p>

<p>One aspect that I really enjoyed was that there was a narrative; we started with Finite State Automata (FSA), analyzed the additional power of Pushdown Automata (PDA), and saw it culminate in Turing Machines (TM).  Each of these models look very similar and have a natural connection: <em>they are each just state machines with different types of external memory.</em></p>

<p>The tape in the Turing Machine can be viewed as two stacks, with one stack representing everything to the left of the current position and the other stack as the current position and everything to the right.  With this model, we can view the computational hierarchy (FSA &ndash;> PDA &ndash;> TM) as just state machines with 0, 1, or 2 stacks.  I think it&rsquo;s quite an elegant representation and it makes the progression seem quite natural.</p>

<p>A key insight along the journey is that these machines are equivalent in power to other useful systems.  A sizable section in the chapter on Finite State Automata is dedicated to their equivalence with Regular Expressions (RegEx).  Context Free Grammars (CFG) are actually introduced <em>before</em> Pushdown Automata.  But when we get to Turing Machines, there&rsquo;s nothing but a couple paragraphs in a section called &ldquo;Equivalence with Other Models&rdquo;, which says:</p>

<blockquote><p>Many [languages], such as Pascal and LISP, look quite different from one another in style and structure.  Can some algorithm be programmed in one of them and not the others?  Of course not &mdash; we can compile LISP into Pascal and Pascal into LISP, which means that the two languages describe <em>exactly</em> the same class of algorithms.  So do all other reasonable programming languages.</p></blockquote>

<p>The book and class leave it at that and proceed onto the limits of computability, which is the real point of the material.  But there&rsquo;s a natural question that isn&rsquo;t presented in the book and which I never thought to ask:</p>

<center>
Finite State Automata <i class="fa fa-arrows-h"></i> Regular Expressions<br>
Pushdown Automata <i class="fa fa-arrows-h"></i> Context Free Grammars<br>
Turing Machines <i class="fa fa-arrows-h"></i> ?
</center>


<br>


<p>While we know that there are many models that equal Turing Machines, we could also construct other models that equal FSAs or PDAs.  Why are RegExs and CFGs used as the parallel models of computation?  With the machine model, we were able to just add a stack to move up at each level &ndash; is there a natural connection between RegExs and CFGs that we extrapolate to find their next level that is Turing equivalent?</p>

<h2>The Chomsky-Schützenberger Hierarchy</h2>

<p>It turns out that the answers to these questions were well covered in the 1950&rsquo;s by the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Chomsky-Schützenberger Hierarchy of Formal Grammars</a>.</p>

<p>The left-hand side of the relations above are the automaton-based models and the right-hand side are the language-based models.  The language models are all implemented as production rules, where some symbols are converted to other symbols.  The different levels of computation just have different restrictions on what kind of replacements rules are allowed.</p>

<p>For instance RegExs are all rules of the form $A \to a$ and $A \to aB$, where the uppercase letters are <a href="http://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols">non-terminal symbols</a> and the lowercase are terminal.  In CFGs, some of the restrictions on the right-hand side are lifted.  Allowing terminals to appear on the left-hand side lets us make rules that are conditional on what has already been replaced, which appropriately gets called &ldquo;Context Sensitive Grammars.&rdquo;  Finally, when all the rules are lifted, we get Recursively Enumerable languages, which are Turing equivalent.  The <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Wikipedia page</a> for the hierarchy and the respective levels is a good source for learning more.</p>

<p>When you look at the definition of LISP in McCarthy&rsquo;s paper, it&rsquo;s much closer to being an applied version of Chomsky&rsquo;s style than Turing&rsquo;s.  This isn&rsquo;t surprising, given that they were contemporaries at MIT.  In McCarthy&rsquo;s <a href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html#SECTION00030000000000000000">History of Lisp</a>, he expicitly states that making a usable version of this other side was his goal:</p>

<blockquote><p>These simplifications made LISP into a way of describing computable functions much neater than the Turing machines or the general recursive definitions used in recursive function theory.  The fact that Turing machines constitute an awkward programming language doesn&rsquo;t much bother recursive function theorists, because they almost never have any reason to write particular recursive definitions, since the theory concerns recursive functions in general.  They often have reason to prove that recursive functions with specific properties exist, but this can be done by an informal argument without having to write them down explicitly.  In the early days of computing, some people developed programming languages based on Turing machines; perhaps it seemed more scientific.  Anyway, I decided to write a paper describing LISP both as a programming language and as a formalism for doing recursive function theory.</p></blockquote>

<p>Here we have it straight from the source.  McCarthy was trying to capture the power of recursive definitions in a usable form.  Just like the automata theorists, once the linguists theorist hit Turing completeness, they focused on the limits instead of the usage.</p>

<p>Theoreticians are more interested in the equality of the systems than the usability, but as practitioners we know that it matters that some problems are more readily solvable in different representations.  Sometimes it&rsquo;s more appropriate to use a RegEx and sometimes an FSA is better suited, even though you could apply either.  While nobody is busting out the Turing Machine to tackle real-world problems, some of our languages are more influenced by one side or the other.</p>

<h2>Turing Machines Considered Harmful</h2>

<p>If you track back the imperative/functional divide to Turing Machines and Chomsky&rsquo;s forms, some of the roots are showing.  Turing Machines are conducive to a couple things that are considered harmful in larger systems: GOTO-based<sup><a href="http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html">1</a></sup> and mutation-centric<sup><a href="https://www.google.com/search?q=mutable+state+considered+harmful">2</a></sup> thinking.  In a lot of cases, we&rsquo;re finding that the languages influenced by the language-side are better suited for our problems.  Paul Graham <a href="http://www.paulgraham.com/diff.html">argues</a> that the popular languages have been steadily evolving towards the LISPy side.</p>

<p>Anyway, this is a connection that I wish I had been shown at the peak of my interest in automata theory because it would have gotten me a lot more excited about LISP sooner.  I think it&rsquo;s interesting to look at LISP as something that has the same theoretical underpinnings as these other tools (RegEx and CFG) that we already acknowledged as vital.</p>

<p><em>Thanks to <a href="http://jliszka.github.io/">Jason Liszka</a> and my colleagues at <a href="http://www.twosigma.com">Two Sigma</a> for help with this post!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every project.clj]]></title>
    <link href="http://adereth.github.io/blog/2014/01/20/every-project-dot-clj/"/>
    <updated>2014-01-20T17:33:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/01/20/every-project-dot-clj</id>
    <content type="html"><![CDATA[<p>I was recently looking for an interesting relational dataset for another project and the idea of using the dependencies for every Clojure project on GitHub came up.  It turns out that it&rsquo;s possible to download almost every project.clj using <a href="https://github.com/Raynes/tentacles">Tentacles</a>, so I decided to&hellip;</p>

<p><img src="/images/download-all.png" width="350"></p>

<p>The most annoying part was dealing with GitHub&rsquo;s rate limits, but after waiting a few hours I had them all on local disk and was able to play around.  I haven&rsquo;t gotten to dig into the data for the actual project I&rsquo;m doing, but there were a couple simple queries that I thought were worth sharing.</p>

<h2>Most frequently included packages</h2>

<p>I was able to download 10770 project.clj files.  Here are the 50 most frequently included packages listed in their <code>:dependencies</code>:</p>

<table>
<thead>
<tr>
<th>Dependency </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.clojure/clojure-contrib </td>
<td> 1524</td>
</tr>
<tr>
<td>compojure </td>
<td> 1348</td>
</tr>
<tr>
<td>hiccup </td>
<td> 743</td>
</tr>
<tr>
<td>clj-http </td>
<td> 738</td>
</tr>
<tr>
<td>ring/ring-jetty-adapter </td>
<td> 607</td>
</tr>
<tr>
<td>cheshire </td>
<td> 558</td>
</tr>
<tr>
<td>org.clojure/data.json </td>
<td> 552</td>
</tr>
<tr>
<td>clj-time </td>
<td> 526</td>
</tr>
<tr>
<td>org.clojure/tools.logging </td>
<td> 490</td>
</tr>
<tr>
<td>enlive </td>
<td> 444</td>
</tr>
<tr>
<td>noir </td>
<td> 388</td>
</tr>
<tr>
<td>ring/ring-core </td>
<td> 375</td>
</tr>
<tr>
<td>ring </td>
<td> 361</td>
</tr>
<tr>
<td>org.clojure/tools.cli </td>
<td> 348</td>
</tr>
<tr>
<td>org.clojure/java.jdbc </td>
<td> 344</td>
</tr>
<tr>
<td>org.clojure/clojurescript </td>
<td> 339</td>
</tr>
<tr>
<td>org.clojure/core.async </td>
<td> 235</td>
</tr>
<tr>
<td>midje </td>
<td> 227</td>
</tr>
<tr>
<td>org.clojure/math.numeric-tower </td>
<td> 219</td>
</tr>
<tr>
<td>korma </td>
<td> 206</td>
</tr>
<tr>
<td>incanter </td>
<td> 202</td>
</tr>
<tr>
<td>seesaw </td>
<td> 195</td>
</tr>
<tr>
<td>overtone </td>
<td> 172</td>
</tr>
<tr>
<td>slingshot </td>
<td> 160</td>
</tr>
<tr>
<td>quil </td>
<td> 158</td>
</tr>
<tr>
<td>com.taoensso/timbre </td>
<td> 150</td>
</tr>
<tr>
<td>http-kit </td>
<td> 149</td>
</tr>
<tr>
<td>ring/ring-devel </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/math.combinatorics </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/core.logic </td>
<td> 138</td>
</tr>
<tr>
<td>environ </td>
<td> 132</td>
</tr>
<tr>
<td>aleph </td>
<td> 132</td>
</tr>
<tr>
<td>log4j </td>
<td> 131</td>
</tr>
<tr>
<td>ch.qos.logback/logback-classic </td>
<td> 125</td>
</tr>
<tr>
<td>org.clojure/tools.nrepl </td>
<td> 124</td>
</tr>
<tr>
<td>congomongo </td>
<td> 124</td>
</tr>
<tr>
<td>com.datomic/datomic-free </td>
<td> 123</td>
</tr>
<tr>
<td>com.novemberain/monger </td>
<td> 123</td>
</tr>
<tr>
<td>lib-noir </td>
<td> 121</td>
</tr>
<tr>
<td>org.clojure/core.match </td>
<td> 118</td>
</tr>
<tr>
<td>ring/ring-json </td>
<td> 111</td>
</tr>
<tr>
<td>clojure </td>
<td> 110</td>
</tr>
<tr>
<td>org.clojure/data.xml </td>
<td> 110</td>
</tr>
<tr>
<td>log4j/log4j </td>
<td> 109</td>
</tr>
<tr>
<td>mysql/mysql-connector-java </td>
<td> 109</td>
</tr>
<tr>
<td>postgresql/postgresql </td>
<td> 107</td>
</tr>
<tr>
<td>org.clojure/data.csv </td>
<td> 101</td>
</tr>
<tr>
<td>org.clojure/tools.trace </td>
<td> 98</td>
</tr>
<tr>
<td>org.clojure/tools.namespace </td>
<td> 92</td>
</tr>
<tr>
<td>ring-server </td>
<td> 92</td>
</tr>
</tbody>
</table>


<br/>


<p>I think it makes a nice hit-list of projects to check out!</p>

<p>A couple interesting things jumped out at me:</p>

<ol>
<li>12.5% of Clojure projects on GitHub are using Compojure.  Impressive.</li>
<li>congomongo, com.novemberain/monger, com.datomic/datomic-free, mysql/mysql-connector-java, and postgresql/postgresql are all clustered together in the low 100&rsquo;s.</li>
</ol>


<h2>Most frequently applied licenses</h2>

<p>Just over half of the project.clj&rsquo;s don&rsquo;t contain a <code>:license</code>.  Here are the most popular:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>EPL </td>
<td> 4430</td>
</tr>
<tr>
<td>MIT </td>
<td> 336</td>
</tr>
<tr>
<td>Apache </td>
<td> 106</td>
</tr>
<tr>
<td>BSD </td>
<td> 92</td>
</tr>
<tr>
<td>GPL </td>
<td> 90</td>
</tr>
<tr>
<td>LGPL </td>
<td> 25</td>
</tr>
<tr>
<td>CC </td>
<td> 21</td>
</tr>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>AGPL </td>
<td> 11</td>
</tr>
<tr>
<td>Mozilla  </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br/>


<p>The EPL&rsquo;s dominance doesn&rsquo;t come as a surprise, given Clojure&rsquo;s use of it for the core libraries.</p>

<p>23 projects have &ldquo;WTF&rdquo; or &ldquo;fuck&rdquo; in their license string:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>Do What The Fuck You Want To Public License </td>
<td> 3</td>
</tr>
<tr>
<td>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2 </td>
<td> 1</td>
</tr>
<tr>
<td>All Rights Reserved Muthafucka </td>
<td> 1</td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>I&rsquo;d like to share a mirror of just the project.clj files wrapped up in a single download, but I want to be conscientious of the variety of licenses.  I&rsquo;ll clean up the code for pulling and summarizing all this data soon so others can play with it.  In the meantime, feel free to suggest other analyses that could be done on these&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quine Tweet Challenge]]></title>
    <link href="http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge/"/>
    <updated>2014-01-08T07:49:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Quine_(computing)">quine</a> is a program which takes no input and outputs a copy of its own source code.  There&rsquo;s a history of making challenges out of variants on the idea (shortest quine, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Ouroboros_Programs">Ouroboros Programs</a>, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Multiquines">Multiquines</a>).  I&rsquo;d like to propose a new variant for our modern social age: the Quine Tweet.</p>

<h2>Inspiration</h2>

<p>Last year I was working through <a href="http://www.4clojure.com/">4Clojure</a> and I had to reacquaint myself with how to implement one for <a href="http://www.4clojure.com/problem/125">Problem #125: Gus&rsquo;s Quinundrum</a>.</p>

<p>A few months later, I saw this tweet from <a href="https://twitter.com/gtrakGT">Gary Trakhman</a>:</p>

<blockquote class="twitter-tweet" lang="en"><p>So simple!&#10;(defn send-tweet&#10;  [tweet]&#10;  (api/statuses-update :oauth-creds my-creds&#10;                       :params {:status tweet}))</p>&mdash; Gary Trakhman (@gtrakGT) <a href="https://twitter.com/gtrakGT/statuses/403227496352862208">November 20, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Seeing him tweet source code that tweets got me thinking about code that tweets its own source code.  Could a Quine Tweet be written?  I took a stab at adapting my Clojure code for Gus&rsquo;s Quinundrum, but I just couldn&rsquo;t make it fit in 140 characters.</p>

<h2>Enter Wolfram</h2>

<p>The next day, this came across my dash:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Hello world! -- tweeting with <a href="https://twitter.com/search?q=%23wolframlang&amp;src=hash">#wolframlang</a> on <a href="https://twitter.com/Raspberry_Pi">@Raspberry_Pi</a> using Send[&quot;Twitter&quot;,&quot;Hello world!&quot; ...]</p>&mdash; Stephen Wolfram (@stephen_wolfram) <a href="https://twitter.com/stephen_wolfram/statuses/403600114247565312">November 21, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Maybe this will enable my impossible dream of a Quine Tweet&hellip;</p>

<p>I finally got a Raspberry Pi running with the Wolfram Language and I made it happen:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>\{o, c\} = FromCharacterCode\[\{\{92, 40\}, \{92, 41\}\}\] ; SendMessage\[&quot;Twitter&quot;, StringReplace\[InString\[$Line\], \{o -&gt; &quot;&quot;, c -&gt; &quot;&quot;\}\]\]</p>&mdash; Matt Adereth (@adereth) <a href="https://twitter.com/adereth/statuses/420778395988135936">January 8, 2014</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>If you paste it into a notebook and evaluate, you&rsquo;ll get prompted for authorization and it&rsquo;ll post itself.  Here&rsquo;s a brief explanation of what it does:</p>

<ol>
<li><a href="http://reference.wolfram.com/mathematica/ref/$Line.html"><code>$Line</code></a> is the count of input expressions that have been evaluated.</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/InString.html"><code>InString</code></a> is a function that gets the input for the i<sup>th</sup> input expression.  It returns a string that has some extra escaped parentheses.</li>
<li>92 is the ASCII code for <code>\\</code>. 40 and 41 are the codes for <code>(</code> and <code>)</code>.  <a href="http://reference.wolfram.com/mathematica/ref/FromCharacterCode.html"><code>FromCharacterCode</code></a> can take a list of lists of ASCII codes and return a list of strings.  The list is destructured into the variables <code>o</code> (open) and <code>c</code> (close).</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/StringReplace.html"><code>StringReplace</code></a> is then used to clean up the extra parentheses.</li>
<li><code>SendMessage</code> is the new function in the Wolfram language that does all the hard work of posting.</li>
</ol>


<p>I don&rsquo;t think this is really in the true spirit of a quine, as having something like <code>InString</code> makes it a bit trivial, but you do what you must when you only have 140 characters!</p>

<h2>The Challenge</h2>

<p>So, can it be done in any other languages?  Here&rsquo;s what I think are fair restrictions:</p>

<ol>
<li>Any standard Twitter client library for your language can be linked using the language&rsquo;s normal methods (pom.xml, project.clj, etc.)</li>
<li>The authorization token can be supplied outside of source, either interactively or through a text file.  I don&rsquo;t imagine anyone wants to be sharing that&hellip;</li>
</ol>


<p>Bonus points if you manage to make the tweet and source include <code>#quine</code>!</p>
]]></content>
  </entry>
  
</feed>
