<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matt Adereth</title>
  <id>http://adereth.github.io/</id>
  <link href="http://adereth.github.io/atom.xml" rel="self"/>
  <link href="http://adereth.github.io/" rel="alternate"/>
  <updated>2025-08-19T04:16:24Z</updated>
  <author>
    <name>Matt Adereth</name>
  </author>
  <entry>
    <title>Estimating Win Rates in Battle Royale Games</title>
    <link href="http://adereth.github.io/blog/2021/07/12/estimating-win-rates-in-battle-royale-games/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2021/07/12/estimating-win-rates-in-battle-royale-games/</id>
    <updated>2021-07-12T00:00:00Z</updated>
    <published>2021-07-12T00:00:00Z</published>
    <content type="html">&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/apex-legends.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For the past year, I've been completely obsessed with &lt;a href=&quot;https://www.ea.com/games/apex-legends&quot;&gt;Apex Legends&lt;/a&gt;, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Battle_royale_game&quot;&gt;battle royale&lt;/a&gt; game that pits 20 teams of 3 players against each other in a shrinking map. Teams fight and eliminate each other until a single team is left standing.&lt;/p&gt;
&lt;p&gt;I've watched my win rate for each competitive season of the game and wondered what a reasonable win rate for an average player might be. There are a bunch of factors to consider and the more I thought about the more I realized I'd need to turn to simulation understand how the factors would interact with each other. I'm going to share my thinking and results and I'd love to hear what else should be considered.&lt;/p&gt;
&lt;h1&gt;Initial Expectations&lt;/h1&gt;
&lt;p&gt;In a simple world where all players are of equal skill, you'd expect the win rate for all players to converge to 0.05, since there are 20 teams in each match.&lt;/p&gt;
&lt;p&gt;Not all players are equal, of course! We might expect that an average-skilled player will have a win rate significantly below 0.05, since you have to beat &lt;em&gt;everyone&lt;/em&gt; and it's very likely there will be better players present in each match.&lt;/p&gt;
&lt;p&gt;Since it's an elimation style game, worse players will return to the queue of players for the next game at a much faster rate than better players. We would then expect to see the distribution of players in each game to not be the same as the overall population distribution. Worse players will be overrepresented in each game, possibly driving the win rate for average-skilled players up.&lt;/p&gt;
&lt;p&gt;Another important consideration is that it's a team game and the teams are totally random if we assume everyone is &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Solo%20queue&quot;&gt;solo-queueing&lt;/a&gt;. This could have an averaging effect on each team's aggregate skill, pushing the expected win rate closer to 0.05. We'll also see that the choice of aggregation function will have a big impact on the expected win rate of best and worst players.&lt;/p&gt;
&lt;p&gt;We have some factors that could push the expected win rate for an average-skilled player over 0.05, under 0.05, and towards 0.05. How do these factors interact? Which matter most?&lt;/p&gt;
&lt;h1&gt;Basic Simulation Framework&lt;/h1&gt;
&lt;p&gt;We'll simulate the behavior of an entire population by maintaining two queues. One  is a queue of players waiting to join a new game and the other is a queue of active games from which players will be eliminated and returned to the waiting queue.&lt;/p&gt;
&lt;p&gt;Start by populating the waiting queue with a set of players with skills sampled from a distribution. Then, in a loop:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check if there are at least &lt;code&gt;gameSize&lt;/code&gt; players in the waiting queue to start a new game. We need 60 players for a game in Apex Legends.&lt;/li&gt;
&lt;li&gt;If there are, randomly assign the players to teams of size &lt;code&gt;teamSize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Apply a &lt;code&gt;teamSkillFunction&lt;/code&gt; to each team to compute the aggregated team skill.&lt;/li&gt;
&lt;li&gt;Apply a probabilistic sort using the team skills as weights to determine the order in which teams will be elimated.&lt;/li&gt;
&lt;li&gt;Add the newly created game to the end of the active game queue.&lt;/li&gt;
&lt;li&gt;Move the next eliminated team from the head of the active game queue to the waiting queue.&lt;/li&gt;
&lt;li&gt;If there are any teams remaining in the active game selected in step #6, put the updated game at the end of the active game queue.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Probabilistic Sorting&lt;/h1&gt;
&lt;p&gt;One design decision is how to determine the results of a game given a set of skill values for each team. The approach I took was to treat the skill value as a weight and to sample from the weighted discrete distribution to pick a winner. We continue to pick a team from the remaining teams until a full elimation order has been chosen.&lt;/p&gt;
&lt;p&gt;This ordering can be computed by doing random selection as described above, but it can also be done efficiently by sampling a value for each team $i$ from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Beta_distribution&quot;&gt;beta distribution&lt;/a&gt; parameterized as $\text{B}(1, w_i)$ and then sorting by the sampled values. This ends up giving the same result because $$P(x &amp;lt; y \mid x \sim \text{B}(1, w_i), y \sim \text{B}(1, w_j)) = \frac{w_i}{w_i + w_j}$$ ...which I think is a pretty neat result.&lt;/p&gt;
&lt;p&gt;Mathematica's built-in &lt;a href=&quot;https://reference.wolfram.com/language/ref/RandomSample.html&quot;&gt;RandomSample&lt;/a&gt; function was used to compute these weighted pseudorandom permutations.&lt;/p&gt;
&lt;p&gt;This method is a dramatic simplification of how games actually play out, but it's sufficient for demonstrating a lot of the interesting effects I was hoping to explore.&lt;/p&gt;
&lt;h1&gt;Simulating a Solo Battle Royale (Tetris 99)&lt;/h1&gt;
&lt;p&gt;Before we jump into simulating Apex Legends, which has the complexity of figuring out how to combine players skill as a team, let's look at a simpler battle royale game that has individuals competing:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/tetris-99.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The idea is basically the same and the same simulator defined above can easily be used to explore win rate dynamics here. In Tetris 99, there are 99 players playing Tetris simulatenously. When a player clears multiple lines, they can have junk pieces randomly dropped on any of the other players. Again, the last player standing wins.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/tetris-99-gameplay.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here, we expect the factors that push the expected win rate away from the baseline of 1/99 to be even stronger than in Apex Legends. With 99 players, it's extremely likely that there will be multiple players better than you, but we also will expect better players to remain in matches much longer and new games will have worse players overrepresented.&lt;/p&gt;
&lt;p&gt;First, let's verify the baseline case by running a simulation where all players have the same skill:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;tetrisConstantSkill&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SimulateBattleRoyale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;|&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playerCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gameSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;iterations&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;skillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConstantArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSkillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Total&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&amp;gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With 1000 players and 10,000,000 iterations, we end up with a normal looking distribution of win rates:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-tetris-const.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The mean is $0.0101018$, which is very close to $1/99 = 0.\overline{01}$.&lt;/p&gt;
&lt;p&gt;Now we can start to explore how the dynamics of differing skills affect the distribution of win rates. Let's use uniformly distributed player skills. We won't see the effect of the queue if we have exactly 99 players in our population, so each game contains the full uniformly distributed set of skills.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-tetris-uniform-small.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This linear result is expected, since the likelihood of a player $i$ being chosen as the winner is $w_i / \sum_{j=1}^{99} w_j$ and the denominator is a constant. It starts to become interesting and less easy to compute analytically when we introduce the fact that worse players are elimated earlier from the game and returned to the player queue. Let's run with 1000 players in the population instead of exactly 99:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;tetris&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SimulateBattleRoyale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;|&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playerCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gameSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;iterations&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;skillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Identity&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSkillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Total&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is where it starts to get interesting! Worse players get elimated earlier, so they queue up for more games and end up with a much higher count of games played:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-tetris-pdf.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now that there are 1000 players in the population, the expected win rate for player $i$ is $w_i / \sum_{j=1}^{1000} p_j w_j$, where $p_j$ is the probability that player $j$ is in the game. The plot above is actually the same shape as the PDF of skill levels in an average game and can be used to compute $p$.&lt;/p&gt;
&lt;p&gt;We still expect there to be a linear relationship for the win rate, but with a different slope because the denominator is now a different constant. Before the denominator was $\sum_{j=1}^{99} w_j = 99 * \frac{1}{2} = 49.5$, but with the queue dynamics in place and 1000 players, it's $38.73$. This translates to a $27.8\%$ increase in the expected win rate for each player because they tend to be up against weaker competition.&lt;/p&gt;
&lt;p&gt;There are a ton of simplifying assumptions here, but I think the most egregiously wrong is the choice of distribution of for player skill in the population. There's a long tail of skill, which is supported by my 14.5% win rate:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Created my own account so my filthy casual family stops messing with my Tetris 99 stats &lt;a href=&quot;https://t.co/PDYxCjPXrL&quot;&gt;pic.twitter.com/PDYxCjPXrL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aͫdͣeͭrͭeth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/1103817681893908480?ref_src=twsrc%5Etfw&quot;&gt;March 8, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h1&gt;Simulating Team Games (Apex Legends)&lt;/h1&gt;
&lt;p&gt;Now that we've established that the variable amount of time a player lasts in a game can push up the expected win rate, let's look at the effect of random 3 person teams. There are a ton of different ways we can choose to aggregate the skill level of a team, but let's start with the obvious choice of averaging the skills of the team members:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;apexMean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SimulateBattleRoyale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;|&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playerCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gameSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;iterations&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;skillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Identity&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSkillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mean&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-mean-wr.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We still observe an approximately linear win rate but with a key difference: a positive intercept. The expected win rate is now:&lt;/p&gt;
&lt;p&gt;$$\frac{w_i/3 + 2 \bar{t} / 3}{w_i/3 + 2 \bar{t} / 3 + 19 \bar{t}}$$&lt;/p&gt;
&lt;p&gt;where $\bar{t}$ is the expected average skill level in a game. We'll assume that the population is large enough that removing player $i$ from the pool of possible players doesn't significantly affect $\bar{t}$. We can see that in this model even the worst player ($w_i = 0$) has a $\frac{2/3}{19 + 2/3} = 0.0339$ likelihood of winning. It's interesting to note that the intercept here is independent on the distribution of player skills and only depends on our choice of team aggregation function and winner selection method.&lt;/p&gt;
&lt;p&gt;We can also look at the count of games played to get a sense for the expected distribution of player skills in a given game:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-mean-pdf.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Even though worse players are losing faster and returning to the queue more often, the discrepency between the worst and best players isn't nearly as dramatic as it was in the Tetris 99 simulation.&lt;/p&gt;
&lt;h2&gt;Alternative Aggregations&lt;/h2&gt;
&lt;p&gt;Instead of using the mean of the players, we can experiment with other aggregation functions. We can imagine a game where a teams performance is limited by its worst player by using a min function or a game where strong players are able to &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=carry&quot;&gt;carry&lt;/a&gt; by using a max function.&lt;/p&gt;
&lt;h3&gt;Min&lt;/h3&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;apexMin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SimulateBattleRoyale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;|&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playerCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gameSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;iterations&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;skillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Identity&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSkillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Min&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the first simulation that gives us a win rate plot that doesn't look linear:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-min-wr.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As expected, a player with no chance of winning always loses. It becomes interesting when we look at the win rate of higher skilled players, which starts to flatten around the median since it becomes increasingly likely that there's a worse player on the team. Being above average doesn't really confer a significan benefit in this model.&lt;/p&gt;
&lt;p&gt;It's also worth noting that model using the min aggregation function also results in a PDF of player distributions that looks similar to the single-player Tetris 99 model:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-min-pdf.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The worst players are eliminated rapidly in this model and return to queue at a rate that causes them to be over-represented in new games.&lt;/p&gt;
&lt;h2&gt;Max&lt;/h2&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;apexMax&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SimulateBattleRoyale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;|&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playerCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gameSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;iterations&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;skillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Identity&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;teamSkillFunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Max&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we use the max aggregration function we see the opposite effect on the expected win rates:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-max-wr.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Below median players are rarely the determining factor in their team's performance, so we see a relatively flat win rate for the bottom half of the population and then see steady growth at the higher skills.&lt;/p&gt;
&lt;p&gt;And here's the distribution of players in new games when using the max aggregation:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/br-apex-max-pdf.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While it decreses slowly like in the mean aggregation model, it's interesting to note that it's relatively flat for the bottom quatile of players and has a negative 2nd derivative instead of positive like before.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;h2&gt;Possible Extensions&lt;/h2&gt;
&lt;p&gt;This simulation framework makes several simplifying assumptions that could be addressed in future iterations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Skill Distribution&lt;/strong&gt;: The uniform distribution used here doesn't reflect reality. Most competitive games exhibit a log-normal or Pareto distribution with a long tail of highly skilled players. Modeling with these distributions would likely show even more dramatic effects on average player win rates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Skill-Based Matchmaking (SBMM)&lt;/strong&gt;: Many modern battle royales use SBMM to group players of similar skill levels. This would fundamentally change the dynamics, potentially pushing win rates closer to the baseline 1/20 for all skill levels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-made Squads&lt;/strong&gt;: The simulation assumes all players solo-queue with random teammates. Pre-made squads of coordinated players would have advantages beyond just aggregated skill levels, introducing another dimension to team performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Temporal Dynamics&lt;/strong&gt;: Player skills evolve over time through practice and learning. Additionally, game meta shifts can advantage different playstyles. A more sophisticated model could incorporate these time-based factors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Game Phase Modeling&lt;/strong&gt;: The probabilistic elimination used here doesn't capture the complexity of different game phases. Early game RNG (loot distribution), mid-game positioning, and end-game ring dynamics all affect outcomes differently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server and Geographic Effects&lt;/strong&gt;: Real games have players distributed across different servers with varying skill pools and connection qualities that affect performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;p&gt;Despite its simplifications, this simulation reveals several important insights about battle royale win rates:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Queue dynamics matter significantly&lt;/strong&gt;: Because worse players are eliminated faster and return to queue more frequently, they're overrepresented in new games. This can increase win rates for all players by 20-30% compared to a naive calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Team aggregation functions have dramatic effects&lt;/strong&gt;: The choice between mean, min, or max aggregation fundamentally changes the relationship between individual skill and win rate. Games where carrying is possible (max aggregation) advantage top players, while games limited by the weakest link (min aggregation) compress skill expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Average players can win more than expected&lt;/strong&gt;: In team-based battle royales with mean skill aggregation, even below-average players maintain reasonable win rates due to the chance of being paired with stronger teammates. The baseline shifts from 5% to around 3.4% even for the weakest players.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Win rate curves are often non-linear&lt;/strong&gt;: Depending on the aggregation function, the relationship between skill and win rate can be linear, logarithmic, or even flat across large skill ranges. This has important implications for how rewarding games feel at different skill levels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Population size affects competitive dynamics&lt;/strong&gt;: Larger player populations lead to more pronounced queue effects, as the contrast between active game composition and overall population becomes more significant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These findings suggest that if you're an average Apex Legends player frustrated by your win rate, remember that the deck is somewhat stacked against you, but perhaps not as badly as simple math might suggest. The complex interplay of queue dynamics, team composition, and skill aggregation creates a more forgiving environment than a pure skill hierarchy would produce.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Distributed Black-Box Optimization Talk at QCon</title>
    <link href="http://adereth.github.io/blog/2018/01/03/distributed-black-box-optimization-talk-at-qconny/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2018/01/03/distributed-black-box-optimization-talk-at-qconny/</id>
    <updated>2018-01-03T00:00:00Z</updated>
    <published>2018-01-03T00:00:00Z</published>
    <content type="html">&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/720px-Himmelblau_function.svg.png&quot; /&gt;
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Himmelblau%27s_function&quot;&gt;Himmelblau's Function&lt;/a&gt;, a popular test function for black-box optimization&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I gave a talk on Distributed Black-Box Optimization at &lt;a href=&quot;https://qconnewyork.com/&quot;&gt;QCon NY 2017&lt;/a&gt;.  The video and slides are available &lt;a href=&quot;https://www.infoq.com/presentations/black-box-optimization&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For reference, here are all the papers that are mentioned in the talk in the order they are covered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;O. Alipourfard, H. H. Liu, J. Chen, S. Venkataraman, M. Yu1, M. Zhang&lt;/font&gt; (2017) &lt;a href=&quot;https://www.usenix.org/conference/nsdi17/technical-sessions/presentation/alipourfard&quot;&gt;CherryPick: Adaptively Unearthing the Best Cloud Configurations for Big Data Analytics&lt;/a&gt; &lt;i&gt;NSDI’17&lt;/i&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;J. A. Nelder  R. Mead&lt;/font&gt; (1965) &lt;a href=&quot;https://academic.oup.com/comjnl/article-abstract/7/4/308/354237&quot;&gt;A Simplex Method for Function Minimization.&lt;/a&gt; &lt;i&gt;The Computer Journal&lt;/i&gt;, Vol. 7, Issue 4.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;J. E. Dennis Jr., Torczon&lt;/font&gt; (1991) &lt;a href=&quot;http://citeseerx.ist.ps, V.u.edu/viewdoc/summary?doi=10.1.1.56.4600&quot;&gt;Direct Search Methods on Parallel Machines.&lt;/a&gt; &lt;i&gt;SIAM Journal on Optimization&lt;/i&gt;, 1991 Vol. 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;J. Mockus&lt;/font&gt; (1989) &lt;a href=&quot;http://www.springer.com/us/book/9789401068987&quot;&gt;Bayesian Approach to Global Optimization.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;J. Wang, S. C. Clark, E. Liu, P. I. Frazier&lt;/font&gt; (2016) &lt;a href=&quot;https://arxiv.org/abs/1602.05149&quot;&gt;Parallel Bayesian Global Optimization of Expensive Functions.&lt;/a&gt; &lt;i&gt;arXiv:1602.05149&lt;/i&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;K. Swersky, J. Snoek, R. P. Adams&lt;/font&gt; (2014) &lt;a href=&quot;https://arxiv.org/abs/1406.3896&quot;&gt;Freeze-Thaw Bayesian Optimization.&lt;/a&gt; &lt;i&gt;arXiv:1406.3896&lt;/i&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;V. Dalibard, M. Schaarschmidt, E. Yoneki&lt;/font&gt; (2017) &lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=3038912.3052662&quot;&gt;BOAT: Building Auto-Tuners with Structured Bayesian Optimization.&lt;/a&gt; &lt;i&gt;Proceedings of the 26th International Conference on World Wide Web&lt;/i&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Playing with Wolfram Playing Cards</title>
    <link href="http://adereth.github.io/blog/2017/11/02/playing-with-wolfram-playing-cards/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2017/11/02/playing-with-wolfram-playing-cards/</id>
    <updated>2017-11-02T00:00:00Z</updated>
    <published>2017-11-02T00:00:00Z</published>
    <content type="html">&lt;p&gt;A few weeks ago, I knocked my favorite mug off the counter and it shattered.  RIP:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;I Heart Mathematica Mug&quot; src=&quot;/images/mug.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Like a good consumer, I immediately went to the &lt;a href=&quot;https://store.wolfram.com/view/misc/&quot;&gt;Wolfram store&lt;/a&gt; to buy a replacement, but they no longer make it.  They did have a deck of playing cards which promised a unique illustration and generating code on each card.  How could I pass it up?&lt;/p&gt;
&lt;p&gt;The cards arrived a few days ago and they were way cooler than I imagined.  As I flipped through the deck, I realized a lot of the cards would be really interesting as starting points for animations.  I've been going to town with them and posting to Twitter in an &lt;a href=&quot;https://twitter.com/adereth/status/924409121033428992&quot;&gt;epic thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll lay them out here grouped by concept... enjoy!&lt;/p&gt;
&lt;h2&gt;Just Rotating Squares&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;4♠️ &lt;a href=&quot;https://t.co/5dM7m8Y22I&quot;&gt;pic.twitter.com/5dM7m8Y22I&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924436924592304128?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/K0XqS4dldv&quot;&gt;pic.twitter.com/K0XqS4dldv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924437154054381568?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;A♦️ &lt;a href=&quot;https://t.co/xkdKj1COEa&quot;&gt;pic.twitter.com/xkdKj1COEa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924773153921843200?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/CkfYKAaNsY&quot;&gt;pic.twitter.com/CkfYKAaNsY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924773351377137664?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Imaginary Numbers&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;2♦️ &lt;a href=&quot;https://t.co/0ts8QGsWiD&quot;&gt;pic.twitter.com/0ts8QGsWiD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924828198369505280?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Varying the exponent from 1/5 -&amp;gt; 5. 3 on the card. &lt;a href=&quot;https://t.co/REzLlOAUau&quot;&gt;pic.twitter.com/REzLlOAUau&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924828552704401408?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Jumping back to the 2♦️. Each (a,b) is a fixed color and is positioned at the complex coordinates of (a+bⅈ)ⁿ for n ∈ [½, 5] &lt;a href=&quot;https://t.co/idbrCcCro7&quot;&gt;pic.twitter.com/idbrCcCro7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924842259744407552?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;A♠️ &lt;a href=&quot;https://t.co/SxXAyZopE5&quot;&gt;pic.twitter.com/SxXAyZopE5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924440913044049922?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;ok, this one is expensive.  Just going to make a deeper version... &lt;a href=&quot;https://t.co/UE6Z97cKo3&quot;&gt;pic.twitter.com/UE6Z97cKo3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924441133949665280?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;4♣️ (Another shockingly complex but structured one from time code) &lt;a href=&quot;https://t.co/2odoWUtCAb&quot;&gt;pic.twitter.com/2odoWUtCAb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/926103944832598016?ref_src=twsrc%5Etfw&quot;&gt;November 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Here it is with more detail in DarkRainbow &lt;a href=&quot;https://t.co/anX6X6kskO&quot;&gt;pic.twitter.com/anX6X6kskO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/926104171736055814?ref_src=twsrc%5Etfw&quot;&gt;November 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;ZOOMING &lt;a href=&quot;https://t.co/JtkmbcTJDd&quot;&gt;pic.twitter.com/JtkmbcTJDd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/926104884801298432?ref_src=twsrc%5Etfw&quot;&gt;November 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;These playing cards are inspirational... starting with the 2♥️ &lt;a href=&quot;https://t.co/2qMovSbPPw&quot;&gt;pic.twitter.com/2qMovSbPPw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924409121033428992?ref_src=twsrc%5Etfw&quot;&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;...and tweaking the Pi/6 value: &lt;a href=&quot;https://t.co/7UkNEB4EN7&quot;&gt;pic.twitter.com/7UkNEB4EN7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924409333269409797?ref_src=twsrc%5Etfw&quot;&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;7♠️ &lt;a href=&quot;https://t.co/scPwDCaPPD&quot;&gt;pic.twitter.com/scPwDCaPPD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924831970646835200?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This one is just very surprising. The card doesn&amp;#39;t capture the progression of the curve... &lt;a href=&quot;https://t.co/hBPR35cxSN&quot;&gt;pic.twitter.com/hBPR35cxSN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924833015699615744?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Trigonometry&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;7♣️ &lt;a href=&quot;https://t.co/CL3s9sMeT2&quot;&gt;pic.twitter.com/CL3s9sMeT2&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925930489977847808?ref_src=twsrc%5Etfw&quot;&gt;November 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/ziMoWH7doA&quot;&gt;pic.twitter.com/ziMoWH7doA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925930734036041728?ref_src=twsrc%5Etfw&quot;&gt;November 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;10♦️ &lt;a href=&quot;https://t.co/OQzC6gbwrD&quot;&gt;pic.twitter.com/OQzC6gbwrD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924412632706162688?ref_src=twsrc%5Etfw&quot;&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/En3lOG01bW&quot;&gt;pic.twitter.com/En3lOG01bW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924412789497643009?ref_src=twsrc%5Etfw&quot;&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;3♦️ &lt;a href=&quot;https://t.co/ql5LSGuxGP&quot;&gt;pic.twitter.com/ql5LSGuxGP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924426032244965377?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/6NAzWTAUvE&quot;&gt;pic.twitter.com/6NAzWTAUvE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924426193369120769?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;8♣️ &lt;a href=&quot;https://t.co/6jeVkd9yet&quot;&gt;pic.twitter.com/6jeVkd9yet&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924692880114909184?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/SioTaVZ4Rd&quot;&gt;pic.twitter.com/SioTaVZ4Rd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924692980526546944?ref_src=twsrc%5Etfw&quot;&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;4♥️ (Hot take: this is surprisingly bad code. Side effects? Unnecessary call to Image in the loop? Should be a single expression!) &lt;a href=&quot;https://t.co/XsJUHM67El&quot;&gt;pic.twitter.com/XsJUHM67El&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925030749857652736?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Anyway... here are the intermediate tranformations: &lt;a href=&quot;https://t.co/Azq0CPU1rB&quot;&gt;pic.twitter.com/Azq0CPU1rB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925031090250584064?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Inverted is better &lt;a href=&quot;https://t.co/vzP5MmLdE2&quot;&gt;pic.twitter.com/vzP5MmLdE2&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925032658941308928?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;9❤️, gotta cc &lt;a href=&quot;https://twitter.com/KnitYak?ref_src=twsrc%5Etfw&quot;&gt;@KnitYak&lt;/a&gt; for this one &lt;a href=&quot;https://t.co/cNoGJMbgZ4&quot;&gt;pic.twitter.com/cNoGJMbgZ4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924854571670761472?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/1DZWWQsb0J&quot;&gt;pic.twitter.com/1DZWWQsb0J&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924854816722976768?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;10♣️ &lt;a href=&quot;https://t.co/3OojtNlD6Z&quot;&gt;pic.twitter.com/3OojtNlD6Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924827151362174976?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/G3qTuneuyv&quot;&gt;pic.twitter.com/G3qTuneuyv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924827305343516672?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;6♦️ &lt;a href=&quot;https://t.co/ambOdlfJhT&quot;&gt;pic.twitter.com/ambOdlfJhT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924846505684475904?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/ZzhlPFsRTS&quot;&gt;pic.twitter.com/ZzhlPFsRTS&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924846654410301441?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;3♣️ &lt;a href=&quot;https://t.co/wrMuS4g2yz&quot;&gt;pic.twitter.com/wrMuS4g2yz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924851247475187713?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/Ra8pjtENp3&quot;&gt;pic.twitter.com/Ra8pjtENp3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924851443332399105?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;10♠️ &lt;a href=&quot;https://t.co/93HolEaQNC&quot;&gt;pic.twitter.com/93HolEaQNC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924856311736442880?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;gooey &lt;a href=&quot;https://t.co/jPgMhKhozw&quot;&gt;pic.twitter.com/jPgMhKhozw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924857405619429376?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;9♦️ &lt;a href=&quot;https://t.co/0uA6FmjIUb&quot;&gt;pic.twitter.com/0uA6FmjIUb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924864434077515778?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/JmPdvoUyOZ&quot;&gt;pic.twitter.com/JmPdvoUyOZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/924864537911738368?ref_src=twsrc%5Etfw&quot;&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;3♥️ &lt;a href=&quot;https://t.co/0eX4FL7NDZ&quot;&gt;pic.twitter.com/0eX4FL7NDZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925174812997070848?ref_src=twsrc%5Etfw&quot;&gt;October 31, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/ZQ8b6o0ND2&quot;&gt;pic.twitter.com/ZQ8b6o0ND2&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/925174978344976384?ref_src=twsrc%5Etfw&quot;&gt;October 31, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Grand Finale&lt;/h2&gt;
&lt;p&gt;Thanks for making it this far!  Your reward is the K♣:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;King of Clubs&quot; src=&quot;/images/wolfram.jpg&quot; /&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Writing a Halite Bot in Clojure</title>
    <link href="http://adereth.github.io/blog/2016/12/06/writing-a-halite-bot-in-clojure/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2016/12/06/writing-a-halite-bot-in-clojure/</id>
    <updated>2016-12-06T00:00:00Z</updated>
    <published>2016-12-06T00:00:00Z</published>
    <content type="html">&lt;div&gt;
&lt;script src=&quot;/javascripts/halite/pixi.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/javascripts/halite/parsereplay.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/javascripts/halite/visualizer.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://halite.io&quot;&gt;&lt;img alt=&quot;Halite: May the Best Bot Win&quot; src=&quot;/images/halitehero.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://halite.io&quot;&gt;Halite&lt;/a&gt; is a new AI programming competition that was recently released by &lt;a href=&quot;https://www.twosigma.com/&quot;&gt;Two Sigma&lt;/a&gt; and &lt;a href=&quot;https://tech.cornell.edu/&quot;&gt;Cornell Tech&lt;/a&gt;.  It was designed and implemented by two interns at Two Sigma and was run as the annual internal summer programming competition.&lt;/p&gt;
&lt;p&gt;While the rules are relatively simple, it proved to be a surprisingly deep challenge.  It's played on a 2D grid and a typical game looks like this:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;div id=&quot;gameReplay&quot; class=&quot;text-center&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div&gt;

  &lt;script type=&quot;text/javascript&quot;&gt;

    var data = textFromURL(&quot;ar1478846062-2923329127.hlt&quot;, $(&quot;#gameReplay&quot;), function(data) {
        // console.log(data)
        if(data != null) {
            showGame(data, $(&quot;#gameReplay&quot;), null, 500, true, true);
        }
    });

  &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Each turn, all players simultaneously issue movement commands to each of their pieces:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move to an adjacent location and capture it if you are stronger than what's currently there.&lt;/li&gt;
&lt;li&gt;Stay put and build strength based on the production value of your current location.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When two players' pieces are adjacent to each other, they automatically fight.  A much more detailed description is available on the &lt;a href=&quot;https://halite.io/rules_game.php&quot;&gt;Halite Game Rules page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bots are run as subprocesses that communicate with the game environment through &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt;, so it's very simple to create bots in the language of your choice.  While Python, Java, and C++ bot kits were all provided by the game developers, the community quickly produced kits for C#, Rust, Scala, Ruby, Go, PHP, Node.js, OCaml, C, and Clojure.  All the starter packages are available on the &lt;a href=&quot;https://halite.io/downloads.php&quot;&gt;Halite Downloads page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Clojure Bot Basics&lt;/h2&gt;
&lt;p&gt;The flow of all bots are the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read the initial state (your player ID and the starting game map conditions)&lt;/li&gt;
&lt;li&gt;Write your bot's name&lt;/li&gt;
&lt;li&gt;Read the current gam emap&lt;/li&gt;
&lt;li&gt;Write your moves&lt;/li&gt;
&lt;li&gt;GOTO #3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Clojure kit represents the game map as a 2D vector of &lt;code&gt;Site&lt;/code&gt; records:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Site&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;production&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;strength&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And movement instructions are simple keywords:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;directions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:still&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:north&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:east&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:south&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:west&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A simple bot that finds all the sites you control and issues random moves would look like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MyBot&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:gen-class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;random-moves&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Takes your bot&amp;#39;s ID and a 2D vector of Sites and returns a map from site to direction&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-sites&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game-map&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;flatten&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:owner&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zipmap &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-sites&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand-nth&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game/directions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;productions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/get-init!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyFirstClojureBot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;turn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/create-game-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;productions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/read-ints!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/send-moves!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random-moves&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;game-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;There are currently almost 900 bots competing on the site, but &lt;a href=&quot;https://halite.io/leaderboard.php?field=language&amp;amp;value=Clojure&amp;amp;heading=Clojure&quot;&gt;there are only a handful written in Clojure&lt;/a&gt;!  I'm sure the Clojure community could do some interesting things here, so head over to &lt;a href=&quot;https://halite.io&quot;&gt;halite.io&lt;/a&gt;, sign-up using your Github account, and &lt;a href=&quot;https://halite.io/downloads/starterpackages/Halite-Clojure-Starter-Package.zip&quot;&gt;download the Clojure starter kit&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Bag of Little Bootstraps Presentation at PWL SF</title>
    <link href="http://adereth.github.io/blog/2016/04/19/presentation-on-the-bag-of-little-bootstraps-at-papers-we-love-too/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2016/04/19/presentation-on-the-bag-of-little-bootstraps-at-papers-we-love-too/</id>
    <updated>2016-04-19T00:00:00Z</updated>
    <published>2016-04-19T00:00:00Z</published>
    <content type="html">&lt;p&gt;I recently gave a talk on the Bag of Little Bootstraps algorithm at &lt;a href=&quot;http://www.meetup.com/papers-we-love-too/&quot;&gt;Papers We Love Too&lt;/a&gt; in San Francisco:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Wsly7pIuGsI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My part starts around 31:27, but you should watch the excellent mini talk at the beginning too!  For reference, here are all the papers that are mentioned in the talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Quenouille, M. H.&lt;/font&gt; (1956) &lt;a href=&quot;http://www.jstor.org/stable/2332914&quot;&gt;Notes on Bias in Estimation.&lt;/a&gt; &lt;i&gt;Biometrika&lt;/i&gt;, Vol. 43, No. 3 / 4.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Jaeckel, L.&lt;/font&gt; (1972) &lt;a href=&quot;http://www.stat.washington.edu/people/fritz/Reports/InfinitesimalJackknife.pdf&quot;&gt;The infinitesimal jackknife.&lt;/a&gt; &lt;i&gt;Bell Laboratories Memorandum&lt;/i&gt;, #MM 72-1215-11.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Miller, R. G.&lt;/font&gt; (1974) &lt;a href=&quot;http://www.stat.cmu.edu/~fienberg/Statistics36-756/jackknife.pdf&quot;&gt;The jackknife: a review.&lt;/a&gt; Biometrika 61 1-15.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Efron, B.&lt;/font&gt; (1979) &lt;a href=&quot;http://www.stat.cmu.edu/~fienberg/Statistics36-756/Efron1979.pdf&quot;&gt;Bootstrap methods: Another look at the jackknife.&lt;/a&gt; &lt;i&gt;Annals of Statistics&lt;/i&gt;, 7(1):1-16.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Kleiner, A., Talwalkar, A., Sarkar, P., and Jordan, M. I.&lt;/font&gt; (2012) &lt;a href=&quot;http://arxiv.org/abs/1112.5016&quot;&gt;A scalable bootstrap for massive data.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font style=&quot;font-variant: small-caps&quot;&gt;Kleiner, A., Talwalkar, A., Sarkar, P., and Jordan, M. I.&lt;/font&gt; (2012) &lt;a href=&quot;http://arxiv.org/abs/1206.6415&quot;&gt;The big data bootstrap.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, in case there's any confusion, I don't train Arabian horses.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Clojure/conj Talk on 3D Printing Keyboards</title>
    <link href="http://adereth.github.io/blog/2015/11/19/clojure-slash-conj-talk-on-3d-printing-keyboards/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2015/11/19/clojure-slash-conj-talk-on-3d-printing-keyboards/</id>
    <updated>2015-11-19T00:00:00Z</updated>
    <published>2015-11-19T00:00:00Z</published>
    <content type="html">&lt;p&gt;I gave a talk on building an ergonomic keyboard using Clojure at &lt;a href=&quot;http://clojure-conj.org/&quot;&gt;Clojure/conj 2015&lt;/a&gt;:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uk3A41U0iO4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Here's a complete list of the references from the talk, in order of appearance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/ftrain&quot;&gt;@ftrain&lt;/a&gt;'s &lt;a href=&quot;https://twitter.com/ftrain/status/577205992406065152&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Typewriter&quot;&gt;Typewriter (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_keyboard&quot;&gt;Computer keyboard (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sholes_and_Glidden_typewriter&quot;&gt;Sholes and Glidden typewriter (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hansen_Writing_Ball&quot;&gt;Hansen Writing Ball (WIkipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.malling-hansen.org/friedrich-nietzsche-and-his-typewriter-a-malling-hansen-writing-ball.html&quot;&gt;Friedrich Nietzsche and his typewriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/E._Remington_and_Sons#Remington_Typewriter_Company&quot;&gt;E. Remington and Sons (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://deskthority.net/wiki/Staggering&quot;&gt;Staggering (Deskthority Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/QWERTY&quot;&gt;QWERTY (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_Selectric_typewriter&quot;&gt;IBM Selectric typewriter (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_2741&quot;&gt;IBM 2741 (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ADM-3A&quot;&gt;ADM-3A (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Space-cadet_keyboard&quot;&gt;Space-cadet keyboard (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.flickr.com/photos/obra/sets/72157635353286814/&quot;&gt;Jesse Vincent's Space Cadet Keyboard Photo Album&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.maltron.com/&quot;&gt;Maltron (Official Site)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Maltron&quot;&gt;Maltron (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Mothers-Daughters-Invention-Revised-Technology/dp/0813521971&quot;&gt;Mother's and Daughters of Invention: Notes for a Revised History of Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kinesis-ergo.com/&quot;&gt;Kinesis (Official Site)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pjrc.com/teensy/&quot;&gt;Teensy USB Development Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://deskthority.net/&quot;&gt;Deskthority&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geekhack.org/&quot;&gt;Geekhack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.makerbot.com/&quot;&gt;Makerbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inventables.com/technologies/x-carve&quot;&gt;X-Carve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ergodox.org/&quot;&gt;ErgoDox (Official Site)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.massdrop.com/buy/ergodox&quot;&gt;ErgoDox (Massdrop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/02/12/building-an-ergodox/&quot;&gt;Sourcing and Building an ErgoDox Keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://atreus.technomancy.us/&quot;&gt;Atreus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://keyboard.io&quot;&gt;Keyboard.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openscad.org/&quot;&gt;OpenSCAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openscad/openscad/issues/522#issuecomment-27741699&quot;&gt;OpenSCAD Namespace Issue (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/farrellm/scad-clj&quot;&gt;scad-clj (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/04/09/3d-printing-with-clojure/&quot;&gt;3D Printing with Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/05/29/custom-clojure-evaluation-keybindings-in-emacs/&quot;&gt;Custom Clojure Evaluation Keybindings in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adereth/dactyl-cave&quot;&gt;Dactyl Keyboard (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.shapeways.com/&quot;&gt;Shapeways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.shapeways.com/shops/bespokeys&quot;&gt;Full Dactyl Keyboard (Shapeways)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smokingresistor.com/product/pyralux-lf9120r/&quot;&gt;Pyralux LF9120R - Flexible PCB Material (Smoking Resistor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benblazak/ergodox-firmware/blob/master/src/keyboard/ergodox/circuit-diagram.svg&quot;&gt;ErgoDox Circuit Diagram (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Is-the-best-PCB-etchant-in-every-kitchen-/&quot;&gt;Is the best PCB etchant in every kitchen? (Instructables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pimpmykeyboard.com/&quot;&gt;Signature Plastics Keycap Shop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Visualizing Girl Talk: Parsing with Clojure's Instaparse</title>
    <link href="http://adereth.github.io/blog/2015/04/18/visualizing-girl-talk-with-clojure-and-d3-dot-js/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2015/04/18/visualizing-girl-talk-with-clojure-and-d3-dot-js/</id>
    <updated>2015-04-18T00:00:00Z</updated>
    <published>2015-04-18T00:00:00Z</published>
    <content type="html">&lt;p&gt;Greg Gillis, also known as Girl Talk, is an impressive DJ who creates mega-mashups consisting of hundreds of samples.  His sample selections span 7 decades and dozens of genres.  Listening to his albums is a bit like having a concentrated dump of music history injected right into your brain.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Neo: &amp;quot;I know pop culture&amp;quot;&quot; src=&quot;/images/popculture.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I became a little obsessed with his work last year and I wanted a better way to experience his albums, so I created an annotated player using Clojure and d3 that shows relevant data and links about every track as it plays:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://adereth.github.io/oneoff/girltalk-v2/&quot;&gt;&lt;img alt=&quot;Image of player&quot; src=&quot;/images/girltalkplayer.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have versions of this player for his two most recent albums:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://adereth.github.io/oneoff/girltalk-v2/&quot;&gt;All Day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adereth.github.io/oneoff/girltalk-v2/fta.html&quot;&gt;Feed The Animals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, they only really work on the desktop right now.&lt;/p&gt;
&lt;h2&gt;Parsing Track Data&lt;/h2&gt;
&lt;p&gt;I've released &lt;a href=&quot;http://github.com/adereth/girltalk-visualization&quot;&gt;all the code&lt;/a&gt; that I used to collect the data and to generate the visualizations, but in this post I'm just going to talk about the first stage of the process: getting the details of which tracks were sampled at each time.&lt;/p&gt;
&lt;p&gt;There's an excellent (totally legal!) crowd-sourced wiki called &lt;a href=&quot;http://illegal-tracklist.net/Tracklists/&quot;&gt;Illegal Tracklist&lt;/a&gt; that has information about most of the samples displayed like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&quot;Oh No&quot; - 5:39&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;0:03 - 2:08 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Black%20Sabbath' rel='nofollow'&gt;Black Sabbath&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/War%20Pigs' rel='nofollow'&gt;War Pigs&lt;/a&gt;&quot;
&lt;/li&gt;&lt;li&gt;0:13 - 0:15 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Tupac_Shakur' rel='nofollow'&gt;2Pac&lt;/a&gt; featuring &lt;a class='urllink' href='http://en.wikipedia.org/wiki/K-Ci%20&amp;amp;%20JoJo' rel='nofollow'&gt;K-Ci &amp;amp; JoJo&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/How%20Do%20U%20Want%20It' rel='nofollow'&gt;How Do U Want It&lt;/a&gt;&quot;
&lt;/li&gt;&lt;li&gt;0:15 - 0:15 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Jay-Z' rel='nofollow'&gt;Jay-Z&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/99%20Problems' rel='nofollow'&gt;99 Problems&lt;/a&gt;&quot;
&lt;/li&gt;&lt;li&gt;0:20 - 2:02 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Ludacris' rel='nofollow'&gt;Ludacris&lt;/a&gt; featuring &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Mystikal' rel='nofollow'&gt;Mystikal&lt;/a&gt; and &lt;a class='urllink' href='http://en.wikipedia.org/wiki/I-20%20%28rapper%29' rel='nofollow'&gt;I-20&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/Move%20Bitch' rel='nofollow'&gt;Move Bitch&lt;/a&gt;&quot;
&lt;/li&gt;
⋮
&lt;li&gt;4:45 - 4:55 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Trina' rel='nofollow'&gt;Trina&lt;/a&gt; featuring &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Killer%20Mike' rel='nofollow'&gt;Killer Mike&lt;/a&gt; - &quot;Look Back at Me&quot;
&lt;/li&gt;&lt;li&gt;4:53 - 4:53 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/N.W.A' rel='nofollow'&gt;N.W.A&lt;/a&gt; - &quot;Appetite for Destruction&quot; (portion sampled samples &quot;Get Me Back on Time, Engine #9&quot; by &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Wilson_Pickett' rel='nofollow'&gt;Wilson Pickett&lt;/a&gt;)
&lt;/li&gt;&lt;li&gt;4:56 - 5:39 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Missy%20Elliott' rel='nofollow'&gt;Missy Elliott&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/Get%20Ur%20Freak%20On' rel='nofollow'&gt;Get Ur Freak On&lt;/a&gt;&quot;
&lt;/li&gt;&lt;/ul&gt;

&lt;li&gt;&quot;Let It Out&quot; - 6:29&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;0:00 - 0:01 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Ramones' rel='nofollow'&gt;Ramones&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/Blitzkrieg%20Bop' rel='nofollow'&gt;Blitzkrieg Bop&lt;/a&gt;&quot;
&lt;/li&gt;&lt;li&gt;0:00 - 0:05 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Missy%20Elliott' rel='nofollow'&gt;Missy Elliott&lt;/a&gt; - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/Get%20Ur%20Freak%20On' rel='nofollow'&gt;Get Ur Freak On&lt;/a&gt;&quot;
&lt;/li&gt;&lt;li&gt;0:00 - 0:10 &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Busta%20Rhymes' rel='nofollow'&gt;Busta Rhymes&lt;/a&gt; featuring &lt;a class='urllink' href='http://en.wikipedia.org/wiki/Sean%20Paul' rel='nofollow'&gt;Sean Paul&lt;/a&gt; and Spliff Star - &quot;&lt;a class='urllink' href='http://en.wikipedia.org/wiki/Make%20It%20Clap' rel='nofollow'&gt;Make It Clap&lt;/a&gt;&quot;
&lt;/li&gt;
⋮
&lt;/ul&gt;
&lt;/ol&gt;

&lt;p&gt;At first, I used Enlive to suck down the HTML versions of the wiki pages, but I realized it might be cleaner to operate off the raw wiki markup which looks like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Oh No&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sabbath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sabbath&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[[http://en.wikipedia.org/wiki/War%20Pigs | War Pigs]]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Tupac_Shakur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Pac&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;featuring&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JoJo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Ci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JoJo&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[[http://en.wikipedia.org/wiki/How%20Do%20U%20Want%20It | How Do U Want It]]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Jay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Jay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[[http://en.wikipedia.org/wiki/99%20Problems | 99 Problems]]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Ludacris&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Ludacris&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;featuring&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mystikal&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mystikal&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[[http://en.wikipedia.org/wiki/Move%20Bitch | Move Bitch]]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JC&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;featuring&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[[&lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;wikipedia&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wiki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Yung&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Joc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Yung&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Joc&lt;/span&gt;]]&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Vote 4 Me&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I wrote a few specialized functions to pull the details out of the strings and into a data structure, but it quickly became unwieldy and unreadable.  I then saw that this was a perfect opportunity to use &lt;a href=&quot;https://github.com/Engelberg/instaparse&quot;&gt;Instaparse&lt;/a&gt;.  Instaparse is a library that makes it easy to build parsers in Clojure by writing context-free grammars.&lt;/p&gt;
&lt;p&gt;Here's the Instaparse grammar that I used that parses the Illegal Tracklists' markup format:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;wiki-line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title-track-line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-track-line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;title-track-line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;!!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;track-number&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;track-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;track-time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;track-number&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;track-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;track-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;sample-track-line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;artist-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-name&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;artist-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;artist-plain-text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;artist-plain-text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;sample-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sample-plain-text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;sample-plain-text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;start-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;end-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;&amp;lt;time&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The high level structure is practically self-documenting: each line in the wiki source is either a title track line, a sample track line, or a blank line and each type of line is pretty clearly broken down into named components that are separated by string literals to be ignored in the output.  It does, however, become a bit nasty when you get to the terminal rules that are defined as regular expressions.  Instaparse truly delivers on its tagline:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if context-free grammars were as easy to use as regular expressions?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only problem is that regular expressions &lt;em&gt;aren't&lt;/em&gt; always easy to use, especially when you have to start worrying about not greedily matching the text that is going to be used by Instaparse.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Some people, when confronted with a problem, think “I know, I&amp;#39;ll use Instaparse.” Now they have three problems. &lt;a href=&quot;https://twitter.com/hashtag/clojure?src=hash&quot;&gt;#clojure&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Adereth (@adereth) &lt;a href=&quot;https://twitter.com/adereth/status/525670531396165632&quot;&gt;October 24, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Despite some of the pain of regular expressions and grammar debugging, Instaparse was awesome for this part of the project and I would definitely use it again.  I love the organization that it brought to the code and the structure I got out was very usable:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wiki-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title-track-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:track-number&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:track-name&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;Oh No\&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:track-time&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5:39&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wiki-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-track-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start-time&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0:03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:end-time&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2:08&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:artist-name&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://en.wikipedia.org/wiki/Black%20Sabbath&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Black Sabbath&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-name&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-plain-text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://en.wikipedia.org/wiki/War%20Pigs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;War Pigs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-plain-text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})})})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wiki-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-track-line&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start-time&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0:13&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:end-time&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0:15&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:artist-name&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://en.wikipedia.org/wiki/Tupac_Shakur&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2Pac&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:artist-plain-text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; featuring &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://en.wikipedia.org/wiki/K-Ci%20&amp;amp;%20JoJo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;K-Ci &amp;amp; JoJo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-name&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-plain-text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://en.wikipedia.org/wiki/How%20Do%20U%20Want%20It&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;How Do U Want It&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sample-plain-text&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})})})}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Presentation on The Mode Tree at Papers We Love Too</title>
    <link href="http://adereth.github.io/blog/2015/04/06/presentation-on-the-mode-tree-at-papers-we-love/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2015/04/06/presentation-on-the-mode-tree-at-papers-we-love/</id>
    <updated>2015-04-06T00:00:00Z</updated>
    <published>2015-04-06T00:00:00Z</published>
    <content type="html">&lt;script src=&quot;https://d3js.org/d3.v2.js&quot;&gt;&lt;/script&gt;
&lt;div&gt;
&lt;style type=&quot;text/css&quot;&gt;

.chart {
  font-size: 10px;
  margin-top: -40px;
}


.axis path, .axis line {
  fill: none;
  stroke: #000;
  stroke-width: 2;
  shape-rendering: crispEdges;
}

.area {
  fill: indianred;
  fill-opacity: 0.25;
  stroke: #000;
  stroke-opacity: 0.5;
}

.point {
  fill: #126ED5;
  fill-opacity: 0.75;
  stroke: none;
  stroke-width: 1
  stroke-opacity: 0.5;
}

.kernelline {
  fill: none;
  stroke: #D04400;
  stroke-width: 1;
  stroke-opacity: 0.75;
}

.kdeline {
  fill: none;
  stroke: #CB17CE;
  stroke-opacity: 0.75;
  stroke-width: 4
}

.summedarea {
  fill: steelblue;
  fill-opacity: 0.75;
  stroke: #000;
  stroke-opacity: 0.5;
}

.bar rect {
  fill: steelblue;
  fill-opacity: 0.75;
  shape-rendering: crispEdges;
  stroke: #000;
  stroke-opacity: 0.5;

}

.bar text {
  fill: #fff;
}

.equation {
  opacity: 0;
}

.kernelwidth {
  stroke: #2DB15D;
  stroke-width: 4;
}

.treeline {
  fill: none;
  stroke: #000;
  stroke-opacity: 0.75;
  stroke-width: 2
}

.treeconnector {
  fill: none;
  stroke: #999;
  stroke-opacity: 0.75;
  stroke-width: 2
}

&lt;/style&gt;
&lt;/div&gt;

&lt;p&gt;I recently gave a mini talk on &lt;a href=&quot;http://adereth.github.io/oneoff/Mode%20Trees.pdf&quot;&gt;The Mode Tree: A Tool for Visualization of Nonparametric Density Features&lt;/a&gt; at &lt;a href=&quot;http://www.meetup.com/papers-we-love-too/&quot;&gt;Papers We Love Too&lt;/a&gt; in San Francisco.  The talk is just the first 10 minutes:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/T3Bt9Tn6P5c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I did the entire presentation as one huge sequence of animations using &lt;a href=&quot;https://d3js.org/&quot;&gt;D3.js&lt;/a&gt;.  The Youtube video doesn't capture the glory that is SVG, so &lt;a href=&quot;/oneoff/pwl-draft/scratch.html&quot;&gt;I've posted the slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also finally got to apply the technique that I wrote about in my &lt;a href=&quot;/blog/2013/11/27/colorful-equations/&quot;&gt;Colorful Equations with MathJax post&lt;/a&gt; from over a year ago, only instead of coloring explanatory text, the colors in the accompanying chart match:&lt;/p&gt;
&lt;div style=&quot;font-size: 100%;&quot;&gt;
$$
\definecolor{kernel}{RGB}{217,86,16}
\definecolor{kde}{RGB}{203,23,206}
\definecolor{point}{RGB}{18,110,213}
\definecolor{width}{RGB}{45,177,93}
\color{kde}\hat{f}_{\color{width}h}\color{black}(x) \color{black} = \frac{1}{n\color{width}h}\color{black}\sum\limits_{i=1}^n \color{kernel}K\color{black}(\frac{x-\color{point}X_i}{\color{width}h})
$$
&lt;/div&gt;
&lt;div id='chart-1'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
var data = [
{value: 13.1138}, {value: 10.6519}, {value: 20.5735}, {value: 7.89327}, {value: 9.02554}, {value: 20.8411}, {value: 8.84072}, {value: 10.6273}, {value: 13.5194}, {value: 17.9757}, {value: 10.1086}, {value: 8.68131}, {value: 7.16192}, {value: 19.9496}, {value: 8.77111}, {value: 19.5314}, {value: 9.40915}, {value: 12.8664}, {value: 23.1322}, {value: 13.5008}];

function drawChart(data,chart,height) {
$(chart).empty();
var margin = {top: 50, right: 40, bottom: 40, left: 60};
var width = $('article').width() || 720;
var x = d3.scale.linear().domain([0, 30]).range([0, width - margin.left - margin.right]);

           var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

           var svg = d3.select(chart).append('svg')
                       .attr('width', width)
                       .attr('height', height)
                       .attr('class', 'chart')
                       .append('g')
                       .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

           svg.append(&quot;g&quot;)
              .attr(&quot;class&quot;, &quot;x axis&quot;)
              .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (height - margin.top - margin.bottom) + &quot;)&quot;)
              .call(xAxis);

           var y0 = height - margin.top - margin.bottom;


               var points = svg.selectAll('.chart')
                               .data(data)
                           .enter().append('circle')
                               .classed('point', true)
                               .attr(&quot;id&quot;, function(d, i) { return &quot;point&quot; + i })
                               .attr('cx', function(d, i) { return x(d.value) })
                               .attr('cy', y0)
                               .attr('r', 3.25);

               var y = d3.scale.linear()
                         .domain([0, 1])
                         .range([height - margin.top - margin.bottom, 0]);

               function subpoints(d, stddev) {
                   return d3.range(d.value - 7, d.value + 7, 0.1).map(
                       function (d2,i,a) {
                           return {value: d2, height: gaussian(d2, d.value, stddev)};
                       });
               }

               var widthLine = svg.append('path')
                   .attr('class', 'kernelwidth')
                   .attr(&quot;d&quot;, d3.svg.line()([[x(data[0].value - 1), y(0) + 2,],[x(data[0].value), y(0) + 2]]))
                   .style('opacity', 0);

               widthLine.transition().duration(1000).style('opacity', 1);

var stddev = 1;

           var scale = 0.5 / Math.sqrt(2 * Math.PI) / 2;
           function gaussian(x, mean, sigma) {
               var z = (x - mean) / sigma;
               return scale * Math.exp(-0.5 * z * z) / sigma;
           };


               var kernels = data.sort(function(x,y){return x.value - y.value}).map(function(d, i) {
                   var line = d3.svg.line()
                                .x(function(d) { return x(d.value); })
                                .y(function(d) { return y(d.height) });

                   return svg.append('path')
                             .attr('class', 'kernelline')
                             .attr(&quot;d&quot;, line(subpoints(d, stddev)))
                             .style('opacity', 1);

               });

                   var intermediateAreaPoints =
                       d3.range(0, 30, 0.01).concat(data.map(function(x) {return x.value}))
                                      .sort(function(a,b){return a-b})
                                      .map(
                                          function (x,i2,a) {
                                              var y = 0;
                                              //console.log(x)
                                              data.forEach(function(d) {
                                                  y += gaussian(x, d.value, stddev)
                                              });
                                              return {value: x, height: y};
                                          }
                                      );
                   var line = d3.svg.line()
                                .x(function(d) { return x(d.value); })
                                .y(function(d) { return y(d.height); });


        var summedArea = svg.append('path')
            .attr('class', 'kdeline')
                .attr(&quot;d&quot;, line(intermediateAreaPoints));



}

function drawChartWithResize(data, chart, height) {
    drawChart(data, chart, height);
        $(window).resize(function() {drawChart(data, chart, height); })
};


drawChartWithResize(data, '#chart-1', 300);


&lt;/script&gt;
&lt;p&gt;Any questions or feedback on the presentation are welcome... thanks!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SA Profile Keys on a Kinesis Advantage</title>
    <link href="http://adereth.github.io/blog/2015/02/14/sa-profile-keys-on-a-kinesis-advantage/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2015/02/14/sa-profile-keys-on-a-kinesis-advantage/</id>
    <updated>2015-02-14T00:00:00Z</updated>
    <published>2015-02-14T00:00:00Z</published>
    <content type="html">&lt;p&gt;Despite &lt;a href=&quot;http://adereth.github.io/blog/2014/02/12/building-an-ergodox/&quot;&gt;investing&lt;/a&gt; &lt;a href=&quot;http://adereth.github.io/blog/2014/02/27/finishing-up-the-ergodox/&quot;&gt;significant&lt;/a&gt; &lt;a href=&quot;https://github.com/adereth/ergodox-tent&quot;&gt;time&lt;/a&gt; into the Ergodox, I still prefer the &lt;a href=&quot;http://www.amazon.com/gp/product/B000LVJ9W8/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000LVJ9W8&amp;amp;linkCode=as2&amp;amp;tag=rkbd-ka-20&amp;amp;linkId=L5XSWPMHWGHCMLFU&quot;&gt;Kinesis Advantage&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B000LVJ9W8/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000LVJ9W8&amp;amp;linkCode=as2&amp;amp;tag=rkbd-ka-20&amp;amp;linkId=L5XSWPMHWGHCMLFU&quot;&gt;&lt;img alt=&quot;Kinesis Advantage&quot; src=&quot;/images/kinesis.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been (slowly) working on building my own dream keyboard, but in the meantime I make the occasional ridiculous tweak to my Kinesis.  This weekend I got 3 lbs. of reject keys from &lt;a href=&quot;http://www.keycapsdirect.com/&quot;&gt;Signature Plastics&lt;/a&gt; and I was fortunate enough to get enough keycaps to try something that I've been wanting to test for a while.&lt;/p&gt;
&lt;h2&gt;Kinesis Advantage with DSA keycaps&lt;/h2&gt;
&lt;p&gt;Almost a year ago, I saw &lt;a href=&quot;http://sitr.us/&quot;&gt;Jesse Hallett&lt;/a&gt;'s excellent post detailing his &lt;a href=&quot;http://sitr.us/2014/05/19/kinesis-advantage-with-dsa-keycaps.html&quot;&gt;Kinesis Advantage with DSA keycaps&lt;/a&gt;.  His results were impressive:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sitr.us/2014/05/19/kinesis-advantage-with-dsa-keycaps.html&quot;&gt;&lt;img alt=&quot;Kinesis Advantage with DSA Keycaps&quot; src=&quot;/images/kinesis-dsa.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;http://sitr.us/2014/05/19/kinesis-advantage-with-dsa-keycaps.html&quot;&gt;Lesse Hallett's Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;DSA keycaps are low and uniform, with spherical tops:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;DSA Keycap Profile&quot; src=&quot;/images/dsa.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;http://keycapsdirect.com/key-caps.php&quot;&gt;Signature Plastics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;They are particularly well suited for non-standard keyboard layouts, like the ErgoDox or Kinesis Advantage, because most other keycaps have variable heights and angles that were designed for traditional staggered layouts on a plane.&lt;/p&gt;
&lt;h2&gt;SA keycaps&lt;/h2&gt;
&lt;p&gt;Personally, I'm a big fan of the SA profile:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;SA Keycap Profile&quot; src=&quot;/images/sa.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;They're super tall and are usually manufactured with thick ABS plastic and given a smooth, high-gloss finish.  I'm a bit of a retro-fetishist and these hit all the right spots.  It's no surprise that projects and group buys that use SA profile often have a retro theme:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://deskthority.net/group-buys-f50/doubleshot-replacements-round-5-honey-sphericals-t6732.html&quot;&gt;HONEY&lt;/a&gt;, seeking to recreate a &lt;a href=&quot;http://deskthority.net/resources/image/8881&quot;&gt;classic Honeywell keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pimpmykeyboard.com/deals/symbiosis/&quot;&gt;Symbiosis&lt;/a&gt;, seeking to recreate the &lt;a href=&quot;http://en.wikipedia.org/wiki/Space-cadet_keyboard&quot;&gt;Symbolics Space-cadet keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pimpmykeyboard.com/deals/1976/&quot;&gt;1976&lt;/a&gt;, inspired by the colors of the 70's&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this project I decided to go with all Row 3 profile SA keys in the two main key wells.  Row 3 is the home row on traditional layouts and the keycaps are completely symmetric, just like the DSA profile keys.  I was concerned about two main things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The curvature of the key well combined with the height might mean that the keys hit each other towards the top.&lt;/li&gt;
&lt;li&gt;Jesse ran into one spot in the corner of the keywell closest to the thumb clusters where the keycap hit the plastic.  This would almost certainly be a problem with the much larger SA keys.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiest way to find out was to pop off all the keycaps:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/kinesis-bare.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;...and to see what fit:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/kinesis-before-surgery.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, the height was not an issue.  The angles are all perfect and the top of the keys form a relatively tight surface.  The smaller gaps between the tops combined with the extreme smoothness of the SA keycaps results in a nice effect where I'm able to just glide my fingers across them without having to lift, similar to the feel of the modern Apple keyboards.&lt;/p&gt;
&lt;p&gt;Unfortunately, 3 keys at the bottom of each keywell wouldn't fit.  I busted out the Dremel and carved out a little from the bottom, making room for those beautiful fat caps:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/kinesis-hacked1.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/kinesis-hacked2.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I used Row 1 keycaps for the 1x keys in the thumb clusters.  The extra height makes them not quite as difficult to reach:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/thumb-profile.jpg&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, I'm pretty happy with how it turned out:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Kinesis Advantage with Keycaps Removed&quot; src=&quot;/images/kinesis-final.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It's a pleasure to type on and I'm convinced that SA profile keys are going to be what I use when I eventually reach my final form.&lt;/p&gt;
&lt;p&gt;If you're interested in doing this yourself, you should know that it'll be difficult to source the 1.25x keys that are used on the sides of the Kinesis Advantage.  A lot of the keysets that are being sold for split layouts are targeting the Ergodox, which uses 1.5x keys on the side.  It does look like the &lt;a href=&quot;http://www.pimpmykeyboard.com/deals/symbiosis/&quot;&gt;Symbiosis group buy&lt;/a&gt; includes enough 1.25x's in the main deal, but you'd need to also buy the price Ergodox kit just to get those 4 2x's.  If you don't mind waiting an indefinite length of time, the &lt;a href=&quot;http://deskthority.net/wiki/Round_5a&quot;&gt;Round 5a group buy on Deskthority&lt;/a&gt; is probably your best bet for getting exactly what you want.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Poisonous Shapes in Algebra and Graph Theory</title>
    <link href="http://adereth.github.io/blog/2015/01/23/poisonous-shapes/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2015/01/23/poisonous-shapes/</id>
    <updated>2015-01-23T00:00:00Z</updated>
    <published>2015-01-23T00:00:00Z</published>
    <content type="html">&lt;p&gt;I recently started learning about Algebraic Lattices because I was interested in how they relate to Automata Theory.  It turns out they're fundamental to a bunch of other things that I've always wanted to learn more about, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&quot;&gt;CRDT&lt;/a&gt;s and &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_theory&quot;&gt;Type Theory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I stumbled upon an interesting property about lattices that reminded me of something from Graph Theory...&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   width=&quot;155.18422&quot;
   height=&quot;301.1748&quot;
   id=&quot;svg6140&quot;
   sodipodi:version=&quot;0.32&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   version=&quot;1.0&quot;
   sodipodi:docname=&quot;jollyrogerk33.svg&quot;
   inkscape:output_extension=&quot;org.inkscape.output.svg.inkscape&quot;&gt;
  &lt;defs
     id=&quot;defs6142&quot; /&gt;
  &lt;sodipodi:namedview
     id=&quot;base&quot;
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1.0&quot;
     inkscape:pageopacity=&quot;0.0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:zoom=&quot;0.60968775&quot;
     inkscape:cx=&quot;-25.663406&quot;
     inkscape:cy=&quot;189.29982&quot;
     inkscape:document-units=&quot;px&quot;
     inkscape:current-layer=&quot;layer1&quot;
     inkscape:window-width=&quot;1280&quot;
     inkscape:window-height=&quot;911&quot;
     inkscape:window-x=&quot;0&quot;
     inkscape:window-y=&quot;50&quot;
     showgrid=&quot;false&quot;
     fit-margin-top=&quot;0&quot;
     fit-margin-left=&quot;0&quot;
     fit-margin-right=&quot;0&quot;
     fit-margin-bottom=&quot;0&quot;
     inkscape:window-maximized=&quot;0&quot; /&gt;
  &lt;metadata
     id=&quot;metadata6145&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title&gt;&lt;/dc:title&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;g
     inkscape:label=&quot;Livello 1&quot;
     inkscape:groupmode=&quot;layer&quot;
     id=&quot;layer1&quot;
     transform=&quot;translate(-819.39491,12.483736)&quot;&gt;
    &lt;path
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.90221667px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot;
       d=&quot;m 845.14185,265.0185 0,11.31032 c 2.74148,-0.22835 5.61068,-0.11913 8.09225,-0.25623 55.04941,2.75441 39.55549,1.06818 50.11585,1.68374 1.9123,-1.14146 22.86681,-0.94646 35.01299,-0.14641 l 0,-11.32862 c -38.92008,0.36723 -11.35383,0.33584 -55.32373,0.29283 -10.8364,-0.79414 -26.76091,-1.0486 -37.89736,-1.55563 z&quot;
       id=&quot;path4647&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       inkscape:connector-curvature=&quot;0&quot;
       id=&quot;path4645&quot;
       d=&quot;m 840.41696,199.27758 0,11.23287 c 3.31989,-0.22678 6.79443,-0.11831 9.79957,-0.25447 66.66384,2.73555 47.901,1.06086 60.6894,1.67221 2.31575,-1.13364 27.69131,-0.93998 42.40014,-0.14541 l 0,-11.25105 c -47.13156,0.36471 -13.74932,0.33355 -66.99608,0.29082 -13.12269,-0.7887 -32.40698,-1.04141 -45.89303,-1.54497 z&quot;
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.98943597px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot; /&gt;
    &lt;path
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.98943597px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot;
       d=&quot;m 840.41696,131.1436 0,11.23287 c 3.31989,-0.22678 6.79443,-0.11831 9.79957,-0.25446 66.66384,2.73554 47.901,1.06085 60.6894,1.6722 2.31575,-1.13364 27.69131,-0.93997 42.40014,-0.1454 l 0,-11.25106 c -47.13156,0.36472 -13.74932,0.33355 -66.99608,0.29083 -13.12269,-0.7887 -32.40698,-1.04142 -45.89303,-1.54498 z&quot;
       id=&quot;path4635&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       inkscape:connector-curvature=&quot;0&quot;
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.86492717px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot;
       d=&quot;m 905.97614,-12.051172 c -6.94288,0.01275 -13.90683,1.241795 -20.46589,3.5608817 -9.63595,3.4450183 -20.47731,4.8420292 -28.59718,11.4535567 -7.22982,9.8835496 -9.16752,22.2971756 -12.44473,33.8283756 -3.51135,8.340186 -2.15892,17.435419 -2.55135,26.211023 -1.12794,6.212726 1.41543,12.80319 7.10341,15.82206 4.88707,3.180012 11.4454,3.05686 15.84041,6.901502 l 0.40381,0.477232 0.29368,0.734202 c 0.98803,7.540211 -0.98642,15.112489 -0.71584,22.686849 1.18839,5.17917 9.95561,4.13806 14.35365,3.74444 4.27757,-5.80289 1.07284,-15.52197 4.09318,-22.540017 0.86658,7.01242 0.35106,14.086607 0.60572,21.126677 0.60932,5.52254 10.52545,4.06042 14.39036,2.55135 1.28292,-7.34215 0.73358,-15.220515 2.12919,-22.686854 0.95052,2.410257 1.16899,12.229364 1.57854,17.290464 -1.79016,8.48854 9.49605,8.1958 14.62898,5.50652 0.82581,-6.37016 -0.18671,-13.32291 0,-19.896884 -0.46982,-6.756154 0.98316,0.479604 1.28485,3.505816 1.5075,5.084368 -1.01033,12.488198 2.95517,16.005608 6.08634,1.45946 15.13248,-0.0462 12.72006,-8.25977 0.7096,-7.084927 -2.53869,-16.590186 3.9647,-21.585552 5.29988,-2.017606 11.08193,-2.72963 16.26258,-5.176127 6.42891,-1.750426 7.58354,-8.81202 8.62688,-14.408721 2.22774,-10.435458 -0.0464,-20.961952 -2.03745,-31.221954 -1.79979,-7.531653 -2.04061,-15.579359 -5.30458,-22.668499 -6.68658,-8.4233863 -16.54686,-13.7356223 -26.17431,-18.1347983 -7.22912,-3.2981837 -15.07523,-4.8418467 -22.94384,-4.8273807 z m -14.95937,33.718243 c 2.10467,-0.05674 4.16003,0.207826 5.98375,1.45005 1.84852,1.64058 1.75218,4.424675 2.01906,6.699598 0.14417,2.518978 0.0496,5.127529 -1.17473,7.397089 -2.27483,5.14546 -5.76034,9.616653 -9.04904,14.133395 -4.41894,4.709355 -10.26387,7.689929 -15.43661,11.435201 -2.76209,1.242347 -6.03867,1.577466 -8.92055,0.605717 -4.21297,-2.244927 -6.84773,-6.585425 -7.69077,-11.196585 -1.16756,-3.665403 -0.8984,-7.712115 0.71584,-11.196586 0.75416,-2.88686 2.92153,-5.033028 4.62548,-7.378734 6.8965,-4.934991 14.23336,-9.702072 22.63179,-11.545334 2.03389,0.01815 4.19112,-0.347084 6.29578,-0.403811 z m 26.28444,0 c 2.34988,-0.0343 4.79692,0.424246 7.08506,0.403811 8.39843,1.843262 15.73529,6.610343 22.6318,11.545334 1.70393,2.345706 3.8713,4.49188 4.62547,7.378734 1.61425,3.484471 1.88338,7.531183 0.71582,11.196586 -0.84304,4.611154 -3.47777,8.951658 -7.69074,11.196585 -2.88195,0.971749 -6.15849,0.63663 -8.92056,-0.605717 -5.17278,-3.745272 -11.01769,-6.725828 -15.43662,-11.435201 -3.28869,-4.516742 -6.77421,-8.987935 -9.04904,-14.133395 -1.22434,-2.26956 -1.3189,-4.878111 -1.17472,-7.397089 0.26686,-2.274923 0.17053,-5.059018 2.01905,-6.699598 1.59576,-1.086949 3.3668,-1.423354 5.19448,-1.45005 z m -13.28906,33.259368 c 1.6662,-0.01504 3.10357,1.227657 4.05647,2.532998 4.17116,4.796556 8.58313,9.388322 12.53651,14.372011 0.90133,2.320373 -0.58637,4.902233 -2.75326,5.855263 -1.28796,0.897924 -2.76249,0.14314 -3.9647,-0.513941 -3.22768,-1.716489 -6.08835,-4.247461 -9.67311,-5.212837 -1.34893,-0.01715 -2.61801,0.856791 -3.83621,1.41334 -2.76786,1.514982 -5.13805,3.668163 -7.96609,5.084351 -2.62578,0.01797 -5.73514,-1.687144 -5.87362,-4.57041 -0.0204,-0.623443 0.11288,-1.253401 0.33039,-1.835506 4.07116,-5.100468 8.46567,-9.931191 13.16057,-14.463786 1.04334,-0.908649 1.74698,-2.339098 3.24885,-2.569708 0.246,-0.05692 0.49617,-0.08962 0.7342,-0.09177 z&quot;
       id=&quot;path2229&quot; /&gt;
    &lt;path
       inkscape:connector-curvature=&quot;0&quot;
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.86492717px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot;
       d=&quot;m 838.11171,121.30104 c -4.84315,0.005 -16.50874,3.28843 -8.26262,8.22561 6.96347,3.7749 4.73658,13.5564 -3.56148,12.76666 -7.59902,-0.89536 -8.8464,7.97316 -1.85363,9.54096 3.98301,1.91103 11.10132,2.91869 15.6835,-1.64686 5.54616,-3.20673 11.25564,1.66729 16.02585,4.2186 8.85191,5.07408 25.37414,14.79644 24.6882,16.90852 0.64922,4.24223 -11.02271,8.62148 -16.16503,12.96296 -6.23732,4.53897 -14.22724,10.67998 -20.77123,2.83767 -5.44737,-5.50106 -12.52774,1.72755 -10.66228,7.38171 0.38307,2.4935 13.59453,2.89896 10.78667,11.37734 -4.91785,5.42092 -0.37071,17.08935 7.41558,11.5773 5.27988,-3.00105 12.86771,-7.10211 9.66334,-14.4713 -2.31295,-7.36261 7.84424,-9.17186 12.19052,-12.77226 6.97023,-3.79747 17.95698,-10.11653 21.09401,-10.3072 2.97458,-0.0808 34.62738,20.68734 33.43028,21.91823 -1.47469,7.09178 1.25924,16.43999 10.03096,15.03141 4.26966,-0.0495 10.40306,-2.37073 5.91257,-7.32241 -4.47899,-6.13062 1.88695,-11.04913 7.67828,-7.71387 4.92668,1.13211 11.87435,-3.81969 5.80643,-7.98664 -4.69408,-7.52518 -12.75721,-1.09533 -18.91223,-0.54479 -10.10051,-1.28828 -17.62058,-8.89561 -25.93501,-14.06088 -3.43062,-2.3645 -6.26627,-4.65739 -2.99491,-8.44786 1.35027,-1.51617 26.53178,-18.22406 35.2272,-20.99496 4.13051,-0.66555 14.42637,7.99213 22.25003,3.9194 5.99844,-1.48859 8.92714,-10.4555 1.00792,-11.64647 -8.60403,-2.02199 -11.35359,-10.10261 -8.30906,-17.65273 0.54854,-7.39259 -14.31518,-5.07937 -13.87337,-3.5686 -4.28375,1.52385 0.72786,13.67839 -4.88051,18.82909 -13.03561,7.51312 -35.96223,21.59302 -38.33784,23.12996 -6.47453,3.9506 -12.86223,2.4353 -18.09142,-2.19028 -12.72062,-9.30521 -36.09241,-23.59049 -37.93799,-26.69735 -1.51146,-2.17925 2.26283,-11.18726 -5.16393,-12.4445 -1.04727,-0.23243 -2.11556,-0.13986 -3.1788,-0.15646 z&quot;
       id=&quot;path2237&quot;
       sodipodi:nodetypes=&quot;cccccccccccccccccccccccccccccccccc&quot; /&gt;
    &lt;path
       sodipodi:nodetypes=&quot;cccccccccccccccccccccccccccccccccc&quot;
       id=&quot;path4633&quot;
       d=&quot;m 839.55678,190.66451 c -4.84315,0.005 -16.50874,3.28843 -8.26262,8.2256 6.96347,3.77491 4.73659,13.5564 -3.56148,12.76667 -7.59902,-0.89536 -8.84639,7.97315 -1.85362,9.54096 3.98301,1.91103 11.10132,2.91869 15.6835,-1.64687 5.54616,-3.20672 11.25563,1.66729 16.02585,4.21861 8.85191,5.07408 25.37414,14.79644 24.6882,16.90851 0.64921,4.24224 -11.02272,8.62149 -16.16503,12.96297 -6.23732,4.53897 -14.22724,10.67998 -20.77124,2.83767 -5.44736,-5.50106 -12.52774,1.72755 -10.66227,7.38171 0.38307,2.4935 13.59453,2.89896 10.78666,11.37734 -4.91785,5.42092 -0.37071,17.08935 7.41559,11.5773 5.27987,-3.00106 12.8677,-7.10212 9.66334,-14.4713 -2.31296,-7.36261 7.84423,-9.17186 12.19051,-12.77227 6.97024,-3.79747 17.95698,-10.11653 21.09401,-10.30719 2.97459,-0.0808 34.6274,20.68734 33.4303,21.91823 -1.47475,7.09178 1.25924,16.43998 10.03096,15.03141 4.26965,-0.0495 10.40306,-2.37074 5.91256,-7.32242 -4.47904,-6.13061 1.88696,-11.04912 7.67829,-7.71386 4.92667,1.1321 11.87434,-3.81969 5.80642,-7.98664 -4.69407,-7.52518 -12.7572,-1.09534 -18.91223,-0.5448 -10.10051,-1.28828 -17.62059,-8.8956 -25.93502,-14.06087 -3.43061,-2.36451 -6.26627,-4.65739 -2.9949,-8.44786 1.35027,-1.51617 26.53173,-18.22407 35.22721,-20.99496 4.1305,-0.66556 14.42637,7.99212 22.25003,3.9194 5.99843,-1.48859 8.92714,-10.4555 1.00791,-11.64647 -8.60403,-2.02199 -11.35359,-10.10262 -8.30905,-17.65273 0.54853,-7.39259 -14.31519,-5.07937 -13.87337,-3.5686 -4.28375,1.52385 0.72785,13.67838 -4.88057,18.82908 -13.03562,7.51313 -35.96219,21.59302 -38.3378,23.12996 -6.47452,3.9506 -12.86223,2.43531 -18.09142,-2.19027 -12.72061,-9.30522 -36.0924,-23.59049 -37.93799,-26.69735 -1.51145,-2.17926 2.26284,-11.18726 -5.16393,-12.4445 -1.04726,-0.23243 -2.11556,-0.13986 -3.1788,-0.15646 z&quot;
       style=&quot;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.86492717px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.97664639&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Distributive Lattices&lt;/h2&gt;
&lt;p&gt;First, let's start with the mathy &lt;a href=&quot;http://en.wikipedia.org/wiki/Lattice_%28order%29&quot;&gt;definition of a lattice given by Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $(L, \leq)$ is a partially ordered set, and $S \subseteq L$ is an arbitrary subset, then an element $u \in L$ is said to be an &lt;em&gt;upper bound&lt;/em&gt; of $S$ if $s \leq u$ for each $s \in S$. A set may have many upper bounds, or none at all. An upper bound $u$ of $S$ is said to be its &lt;em&gt;least upper bound&lt;/em&gt;, or join, or supremum, if $u \leq x$ for each upper bound $x$ of $S$.  A set need not have a least upper bound, but it cannot have more than one. Dually, $l \in L$ is said to be a &lt;em&gt;lower bound&lt;/em&gt; of $S$ if $l \leq s$ for each $s \in S$. A lower bound $l$ of $S$ is said to be its &lt;em&gt;greatest lower bound&lt;/em&gt;, or meet, or infimum, if $x \leq l$ for each lower bound $x$ of $S$. A set may have many lower bounds, or none at all, but can have at most one greatest lower bound.&lt;/p&gt;
&lt;p&gt;A partially ordered set $(L, \leq)$ is called a &lt;em&gt;join-semilattice&lt;/em&gt; and a &lt;em&gt;meet-semilattice&lt;/em&gt; if each two-element subset $\{a,b\} \subseteq L$ has a join (i.e. least upper bound) and a meet (i.e. greatest lower bound), denoted by $a \vee b$ and $a \wedge b$, respectively. $(L, \leq)$ is called a &lt;em&gt;lattice&lt;/em&gt; if it is both a join- and a meet-semilattice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's a lot to take in, but it's not so bad once you start looking at lattices using &lt;a href=&quot;http://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;Hasse diagrams&lt;/a&gt;.  A Hasse diagram is a visualization of a partially ordered set, where each element is drawn below the other elements that it is less than.  Edges are drawn between two elements $x$ and $y$ if $x &amp;lt; y$ and there is no $z$ such that $x &amp;lt; z &amp;lt; y$.&lt;/p&gt;
&lt;p&gt;For example, if we define the $\leq$ operator to be &quot;is a subset of&quot;, we get a partial ordering for any powerset.  Here's the Hasse diagram for the lattice $(\mathcal{P}(\{1,2,3\}), \subseteq)$:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;hasse-pure.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1570&quot;
     inkscape:window-height=&quot;1168&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;1.098616&quot;
     inkscape:cx=&quot;-46.955572&quot;
     inkscape:cy=&quot;147.60556&quot;
     inkscape:window-x=&quot;469&quot;
     inkscape:window-y=&quot;195&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
    &lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2985&quot;
     y=&quot;50.390625&quot;
     x=&quot;177.37425&quot;&gt;&lt;tspan
       id=&quot;tspan2987&quot;
       y=&quot;50.390625&quot;
       x=&quot;177.37425&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{1,2,3}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2989&quot;
     y=&quot;167.96315&quot;
     x=&quot;15&quot;&gt;&lt;tspan
       id=&quot;tspan2991&quot;
       y=&quot;167.96315&quot;
       x=&quot;15&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{1,2}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#222;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2993&quot;
     y=&quot;167.96307&quot;
     x=&quot;193.54613&quot;&gt;&lt;tspan
       id=&quot;tspan2995&quot;
       y=&quot;167.96307&quot;
       x=&quot;193.54613&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{1,3}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2997&quot;
     y=&quot;167.96315&quot;
     x=&quot;358.05933&quot;&gt;&lt;tspan
       id=&quot;tspan2999&quot;
       y=&quot;167.96315&quot;
       x=&quot;358.05933&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{2,3}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3001&quot;
     y=&quot;285.53552&quot;
     x=&quot;34.101562&quot;&gt;&lt;tspan
       id=&quot;tspan3003&quot;
       y=&quot;285.53552&quot;
       x=&quot;34.101562&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{1}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3005&quot;
     y=&quot;285.53552&quot;
     x=&quot;209.718&quot;&gt;&lt;tspan
       id=&quot;tspan3007&quot;
       y=&quot;285.53552&quot;
       x=&quot;209.718&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{2}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3009&quot;
     y=&quot;285.53552&quot;
     x=&quot;374.2312&quot;&gt;&lt;tspan
       id=&quot;tspan3011&quot;
       y=&quot;285.53552&quot;
       x=&quot;374.2312&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{3}&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3013&quot;
     y=&quot;403.10803&quot;
     x=&quot;221.31956&quot;&gt;&lt;tspan
       id=&quot;tspan3015&quot;
       y=&quot;403.10803&quot;
       x=&quot;221.31956&quot;
       style=&quot;font-size:40px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;{}&lt;/tspan&gt;&lt;/text&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3037&quot;
     d=&quot;M 90.60389,125.78731 215.10529,67.000204&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3039&quot;
     d=&quot;M 376.22463,122.93017 C 334.72415,103.33447 293.22369,83.738764 251.72322,64.143064&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3044&quot;
     d=&quot;m 251.72322,361.78174 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3046&quot;
     d=&quot;M 215.1053,245.78731 90.6039,187.0002&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3048&quot;
     d=&quot;m 251.72322,246.07302 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3050&quot;
     d=&quot;m 90.60389,244.35874 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3052&quot;
     d=&quot;M 215.1053,361.78174 90.6039,302.99463&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3054&quot;
     d=&quot;M 376.22462,244.07302 251.72322,185.28591&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3148&quot;
     d=&quot;m 233.48713,65.213374 -0.0438,64.059836&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3154&quot;
     d=&quot;m 233.48713,300.35827 -0.0438,64.05984&quot; /&gt;
  &lt;path
     d=&quot;m 60.806485,182.28942 -0.0438,64.05984&quot;
     id=&quot;path3103&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3105&quot;
     d=&quot;m 397.94934,182.28942 -0.0438,64.05984&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;
In this case, the $\subseteq$ operator results in $\vee$ (the &quot;join&quot;) being union of the sets and $\wedge$ (the &quot;meet&quot;) as the intersection of the sets.  It's a tragic failure of notation that $\vee$ means you should find the common connected element that is &lt;em&gt;above&lt;/em&gt; the pair in the diagram and $\wedge$ means you should look &lt;em&gt;below&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another example is the set of divisors of a number, where the $\leq$ operator means &quot;divides into&quot;.  Here's the Hasse diagram for all the divisors of 30:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;hasse-divisors.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1538&quot;
     inkscape:window-height=&quot;1024&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;1.5536776&quot;
     inkscape:cx=&quot;253.57414&quot;
     inkscape:cy=&quot;183.71779&quot;
     inkscape:window-x=&quot;469&quot;
     inkscape:window-y=&quot;195&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2985&quot;
     y=&quot;50.390625&quot;
     x=&quot;207.75995&quot;&gt;&lt;tspan
       id=&quot;tspan2987&quot;
       y=&quot;50.390625&quot;
       x=&quot;207.75995&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;30&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2989&quot;
     y=&quot;167.96313&quot;
     x=&quot;47.923256&quot;&gt;&lt;tspan
       id=&quot;tspan2991&quot;
       y=&quot;167.96313&quot;
       x=&quot;47.923256&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;6&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2993&quot;
     y=&quot;167.96307&quot;
     x=&quot;207.08612&quot;&gt;&lt;tspan
       id=&quot;tspan2995&quot;
       y=&quot;167.96307&quot;
       x=&quot;207.08612&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;10&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2997&quot;
     y=&quot;167.96313&quot;
     x=&quot;372.01926&quot;&gt;&lt;tspan
       id=&quot;tspan2999&quot;
       y=&quot;167.96313&quot;
       x=&quot;372.01926&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;15&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3001&quot;
     y=&quot;285.53552&quot;
     x=&quot;48.597084&quot;&gt;&lt;tspan
       id=&quot;tspan3003&quot;
       y=&quot;285.53552&quot;
       x=&quot;48.597084&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;2&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3005&quot;
     y=&quot;285.53552&quot;
     x=&quot;220.76776&quot;&gt;&lt;tspan
       id=&quot;tspan3007&quot;
       y=&quot;285.53552&quot;
       x=&quot;220.76776&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;3&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3009&quot;
     y=&quot;285.53552&quot;
     x=&quot;385.40793&quot;&gt;&lt;tspan
       id=&quot;tspan3011&quot;
       y=&quot;285.53552&quot;
       x=&quot;385.40793&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;5&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3013&quot;
     y=&quot;403.10803&quot;
     x=&quot;220.33807&quot;&gt;&lt;tspan
       id=&quot;tspan3015&quot;
       y=&quot;403.10803&quot;
       x=&quot;220.33807&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;1&lt;/tspan&gt;&lt;/text&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3037&quot;
     d=&quot;M 90.60389,125.78731 215.10529,67.000204&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3039&quot;
     d=&quot;M 376.22463,122.93017 C 334.72415,103.33447 293.22369,83.738764 251.72322,64.143064&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3044&quot;
     d=&quot;m 251.72322,361.78174 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3046&quot;
     d=&quot;M 215.1053,245.78731 90.6039,187.0002&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3048&quot;
     d=&quot;m 251.72322,246.07302 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3050&quot;
     d=&quot;m 90.60389,244.35874 124.5014,-58.78711&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3052&quot;
     d=&quot;M 215.1053,361.78174 90.6039,302.99463&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3054&quot;
     d=&quot;M 376.22462,244.07302 251.72322,185.28591&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3148&quot;
     d=&quot;m 233.48713,65.213374 -0.0438,64.059836&quot; /&gt;
  &lt;path
     d=&quot;m 233.43615,297.99498 -0.0438,64.05983&quot;
     id=&quot;path3414&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3416&quot;
     d=&quot;m 397.94936,180.42254 -0.0438,64.05984&quot; /&gt;
  &lt;path
     d=&quot;m 60.806484,180.15887 -0.0438,64.05984&quot;
     id=&quot;path3418&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In this case, $\vee$ ends up meaning Least Common Multiple and $\wedge$ means Greatest Common Divisor.&lt;/p&gt;
&lt;p&gt;Yet another example is the set of binary strings of a fixed length $n$, with $S \leq T$ meaning $S_i \leq T_i$ for $1 \leq i \leq n$:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   version=&quot;1.1&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;hasse-binary.svg&quot;&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;sodipodi:namedview
     id=&quot;base&quot;
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1.0&quot;
     inkscape:pageopacity=&quot;0.0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:zoom=&quot;0.70710678&quot;
     inkscape:cx=&quot;322.41289&quot;
     inkscape:cy=&quot;187.04187&quot;
     inkscape:document-units=&quot;px&quot;
     inkscape:current-layer=&quot;layer1&quot;
     showgrid=&quot;false&quot;
     inkscape:window-width=&quot;1319&quot;
     inkscape:window-height=&quot;841&quot;
     inkscape:window-x=&quot;1037&quot;
     inkscape:window-y=&quot;511&quot;
     inkscape:window-maximized=&quot;0&quot;
     fit-margin-top=&quot;20&quot;
     fit-margin-left=&quot;20&quot;
     fit-margin-right=&quot;20&quot;
     fit-margin-bottom=&quot;20&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;g
     inkscape:label=&quot;Layer 1&quot;
     inkscape:groupmode=&quot;layer&quot;
     id=&quot;layer1&quot;
     transform=&quot;translate(-138.63298,-63.539856)&quot;&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       x=&quot;333.50229&quot;
       y=&quot;113.93048&quot;
       id=&quot;text2985&quot;
       sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan2987&quot;
         x=&quot;333.50229&quot;
         y=&quot;113.93048&quot;&gt;111&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       x=&quot;161.75156&quot;
       y=&quot;231.50299&quot;
       id=&quot;text2989&quot;
       sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan2991&quot;
         x=&quot;161.75156&quot;
         y=&quot;231.50299&quot;&gt;011&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       x=&quot;333.50229&quot;
       y=&quot;231.50293&quot;
       id=&quot;text2993&quot;
       sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan2995&quot;
         x=&quot;333.50229&quot;
         y=&quot;231.50293&quot;&gt;101&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       sodipodi:linespacing=&quot;125%&quot;
       id=&quot;text2997&quot;
       y=&quot;231.50299&quot;
       x=&quot;497.49792&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       xml:space=&quot;preserve&quot;&gt;&lt;tspan
         y=&quot;231.50299&quot;
         x=&quot;497.49792&quot;
         id=&quot;tspan2999&quot;
         sodipodi:role=&quot;line&quot;&gt;110&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       sodipodi:linespacing=&quot;125%&quot;
       id=&quot;text3001&quot;
       y=&quot;349.07538&quot;
       x=&quot;161.75156&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       xml:space=&quot;preserve&quot;&gt;&lt;tspan
         y=&quot;349.07538&quot;
         x=&quot;161.75156&quot;
         id=&quot;tspan3003&quot;
         sodipodi:role=&quot;line&quot;&gt;001&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       sodipodi:linespacing=&quot;125%&quot;
       id=&quot;text3005&quot;
       y=&quot;349.07538&quot;
       x=&quot;333.86362&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       xml:space=&quot;preserve&quot;&gt;&lt;tspan
         y=&quot;349.07538&quot;
         x=&quot;333.86362&quot;
         id=&quot;tspan3007&quot;
         sodipodi:role=&quot;line&quot;&gt;010&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       x=&quot;497.49792&quot;
       y=&quot;349.07538&quot;
       id=&quot;text3009&quot;
       sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan3011&quot;
         x=&quot;497.49792&quot;
         y=&quot;349.07538&quot;&gt;100&lt;/tspan&gt;&lt;/text&gt;
    &lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
       x=&quot;333.86362&quot;
       y=&quot;466.64789&quot;
       id=&quot;text3013&quot;
       sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         id=&quot;tspan3015&quot;
         x=&quot;333.86362&quot;
         y=&quot;466.64789&quot;&gt;000&lt;/tspan&gt;&lt;/text&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;m 229.23687,189.32717 124.5014,-58.78711&quot;
       id=&quot;path3037&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;M 514.85761,186.47003 C 473.35713,166.87433 431.85667,147.27862 390.3562,127.68292&quot;
       id=&quot;path3039&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       inkscape:connector-curvature=&quot;0&quot;
       id=&quot;path3044&quot;
       d=&quot;M 390.3562,422.69464 514.8576,363.90753&quot;
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;M 353.73828,309.32717 229.23688,250.54006&quot;
       id=&quot;path3046&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       inkscape:connector-curvature=&quot;0&quot;
       id=&quot;path3048&quot;
       d=&quot;M 390.3562,309.61288 514.8576,250.82577&quot;
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;m 229.23687,307.8986 124.5014,-58.78711&quot;
       id=&quot;path3050&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;M 353.73828,422.69464 229.23688,363.90753&quot;
       id=&quot;path3052&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:0.78431755000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;M 514.8576,307.61288 390.3562,248.82577&quot;
       id=&quot;path3054&quot;
       inkscape:connector-curvature=&quot;0&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;m 372.12011,128.75323 -0.0438,64.05984&quot;
       id=&quot;path3148&quot;
       inkscape:connector-curvature=&quot;0&quot;
       sodipodi:nodetypes=&quot;cc&quot; /&gt;
    &lt;path
       sodipodi:nodetypes=&quot;cc&quot;
       inkscape:connector-curvature=&quot;0&quot;
       id=&quot;path3420&quot;
       d=&quot;m 536.58232,243.69872 -0.0438,64.05984&quot;
       style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
    &lt;path
       style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
       d=&quot;m 372.06911,361.27117 -0.0438,64.05984&quot;
       id=&quot;path3422&quot;
       inkscape:connector-curvature=&quot;0&quot;
       sodipodi:nodetypes=&quot;cc&quot; /&gt;
    &lt;path
       sodipodi:nodetypes=&quot;cc&quot;
       inkscape:connector-curvature=&quot;0&quot;
       id=&quot;path3424&quot;
       d=&quot;m 199.43947,243.69872 -0.0438,64.05984&quot;
       style=&quot;fill:none;stroke:#000000;stroke-width:1.04549277000000007px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
  &lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In this case, $\vee$ is the binary OR operator and $\wedge$ is the binary AND operator.&lt;/p&gt;
&lt;p&gt;These examples are interesting because they're all the same structure!  If we can prove a fact about the structure, we get information about all three systems.  These happen to be &lt;a href=&quot;http://en.wikipedia.org/wiki/Boolean_algebra_%28structure%29&quot;&gt;Boolean lattices&lt;/a&gt;, which have the distributive property:&lt;/p&gt;
&lt;p&gt;$$a \vee (b \wedge c) = (a \vee b) \wedge (a \vee c)$$
$$\forall a, b, c \in L$$&lt;/p&gt;
&lt;p&gt;Now here's the neat part.  There are fundamentally only two lattices that aren't distributive:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;190.5546&quot;
   height=&quot;157.38162&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;hasse-diamond.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1538&quot;
     inkscape:window-height=&quot;1024&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;1.5536776&quot;
     inkscape:cx=&quot;103.40865&quot;
     inkscape:cy=&quot;65.667208&quot;
     inkscape:window-x=&quot;469&quot;
     inkscape:window-y=&quot;195&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot;
     fit-margin-left=&quot;0&quot;
     fit-margin-right=&quot;0&quot;
     fit-margin-bottom=&quot;0&quot;
     fit-margin-top=&quot;0&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2985&quot;
     y=&quot;17.14238&quot;
     x=&quot;88.56852&quot;&gt;&lt;tspan
       id=&quot;tspan2987&quot;
       y=&quot;17.14238&quot;
       x=&quot;88.56852&quot;
       style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;1&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2989&quot;
     y=&quot;87.172684&quot;
     x=&quot;-0.72667485&quot;&gt;&lt;tspan
       id=&quot;tspan2991&quot;
       y=&quot;87.172684&quot;
       x=&quot;-0.72667485&quot;
       style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;a&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2993&quot;
     y=&quot;87.172653&quot;
     x=&quot;88.364944&quot;&gt;&lt;tspan
       id=&quot;tspan2995&quot;
       y=&quot;87.172653&quot;
       x=&quot;88.364944&quot;
       style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;b&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2997&quot;
     y=&quot;87.172684&quot;
     x=&quot;179.69022&quot;&gt;&lt;tspan
       id=&quot;tspan2999&quot;
       y=&quot;87.172684&quot;
       x=&quot;179.69022&quot;
       style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;c&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3005&quot;
     y=&quot;157.20293&quot;
     x=&quot;88.783752&quot;&gt;&lt;tspan
       id=&quot;tspan3007&quot;
       y=&quot;157.20293&quot;
       x=&quot;88.783752&quot;
       style=&quot;font-size:23.82540512px;font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;font-family:Lato;-inkscape-font-specification:Lato Medium&quot;&gt;0&lt;/tspan&gt;&lt;/text&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.46716708px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3037&quot;
     d=&quot;M 11.294298,62.051285 85.451705,27.035625&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.46716708px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3039&quot;
     d=&quot;M 181.42003,60.349475 C 156.70089,48.677585 131.98176,37.005695 107.26262,25.333805&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.46716708px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3046&quot;
     d=&quot;M 85.451705,133.52749 11.294304,98.511835&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.46716708px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3048&quot;
     d=&quot;M 107.26262,133.69767 181.42003,98.682005&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.62273222px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3148&quot;
     d=&quot;m 96.370205,25.971325 -0.0261,38.15628&quot; /&gt;
  &lt;path
     d=&quot;m 96.370205,92.520035 -0.0261,38.156285&quot;
     id=&quot;path3418&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.62273222px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;The Diamond Lattice&lt;/em&gt;&lt;/center&gt;
$$a \vee (b \wedge c) \stackrel{?}{=} (a \vee b) \wedge (a \vee c)$$
$$a \vee 0 \stackrel{?}{=} 1 \wedge 1$$
$$a \neq 1$$
...and:
&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;180&quot;
   height=&quot;152&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;hasse-pentagon.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1538&quot;
     inkscape:window-height=&quot;1024&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;1.5536776&quot;
     inkscape:cx=&quot;174.27202&quot;
     inkscape:cy=&quot;109.08912&quot;
     inkscape:window-x=&quot;999&quot;
     inkscape:window-y=&quot;252&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot;
     fit-margin-left=&quot;20&quot;
     fit-margin-right=&quot;20&quot;
     fit-margin-bottom=&quot;20&quot;
     fit-margin-top=&quot;20&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;&lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2989&quot;
     y=&quot;129.70322&quot;
     x=&quot;89.958122&quot;&gt;&lt;tspan
       id=&quot;tspan2991&quot;
       y=&quot;129.70322&quot;
       x=&quot;89.958122&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;c&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2993&quot;
     y=&quot;197.91043&quot;
     x=&quot;88.180779&quot;&gt;&lt;tspan
       id=&quot;tspan2995&quot;
       y=&quot;197.91043&quot;
       x=&quot;88.180779&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;a&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2997&quot;
     y=&quot;163.78036&quot;
     x=&quot;248.6824&quot;&gt;&lt;tspan
       id=&quot;tspan2999&quot;
       y=&quot;163.78036&quot;
       x=&quot;248.6824&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;b&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text2985&quot;
     y=&quot;49.160156&quot;
     x=&quot;168.0605&quot;&gt;&lt;tspan
       id=&quot;tspan2987&quot;
       y=&quot;49.160156&quot;
       x=&quot;168.0605&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;1&lt;/tspan&gt;&lt;/text&gt;
  &lt;text
     sodipodi:linespacing=&quot;125%&quot;
     style=&quot;font-size:40px;font-style:normal;font-weight:500;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;-inkscape-font-specification:Lato Medium;font-family:Lato;font-stretch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mode:lr&quot;
     xml:space=&quot;preserve&quot;
     id=&quot;text3005&quot;
     y=&quot;284.30505&quot;
     x=&quot;168.42183&quot;&gt;&lt;tspan
       id=&quot;tspan3007&quot;
       y=&quot;284.30505&quot;
       x=&quot;168.42183&quot;
       style=&quot;-inkscape-font-specification:Lato Medium;font-family:Lato;font-weight:500;font-style:normal;font-stretch:normal;font-variant:normal;font-size:40px;text-anchor:start;text-align:start;writing-mode:lr;line-height:125%&quot;&gt;0&lt;/tspan&gt;&lt;/text&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.52665037000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     id=&quot;path3039&quot;
     d=&quot;M 254.66015,121.82853 C 236.03007,102.14694 217.4,82.46535 198.76993,62.783761&quot; /&gt;
  &lt;path
     d=&quot;M 254.66015,121.82853 C 236.03007,102.14694 217.4,82.465353 198.76993,62.783764&quot;
     id=&quot;path3069&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:0.52665037000000003px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 251.01733,176.14463 -56.63981,64.36341&quot;
     id=&quot;path3089&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 158.97764,61.577742 115.85415,98.908524&quot;
     id=&quot;path3101&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 99.763297,143.23435 0,19.30902&quot;
     id=&quot;path3103&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 115.21052,209.6136 52.13437,28.96354&quot;
     id=&quot;path3105&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;
&lt;center&gt;&lt;em&gt;The Pentagon Lattice&lt;/em&gt;&lt;/center&gt;
$$a \vee (b \wedge c) \stackrel{?}{=} (a \vee b) \wedge (a \vee c)$$
$$a \vee 0 \stackrel{?}{=} 1 \wedge c$$
$$a \neq c$$&lt;/p&gt;
&lt;p&gt;Any lattice that has a sub-lattice that is isomorphic to either the Diamond or Pentagon, referred to as $M_3$ and $N_5$ respectively, is not distributive.  It's not too hard to see, just verify that the corresponding elements that violate distribution above will fail no matter what else is going on in the lattice.&lt;/p&gt;
&lt;p&gt;The surprising part is that &lt;em&gt;every&lt;/em&gt; non-distributive lattice must contain either $M_3$ or $N_5$!  In a sense these are the two poisonous minimal shapes: their presence kills distributivity.&lt;/p&gt;
&lt;p&gt;This alone seems like a cool little fact, but what struck me was that this isn't the first time that I've seen something like this...&lt;/p&gt;
&lt;h2&gt;Planar Graphs&lt;/h2&gt;
&lt;p&gt;In Graph Theory, there's a property of graphs called planarity.  If you can draw the graph without any of the edges crossing, the graph is planar.  The Wikipedia page on &lt;a href=&quot;http://en.wikipedia.org/wiki/Planar_graph&quot;&gt;planar graphs&lt;/a&gt; is filled with awesome facts.  For example, a planar graph can't have an average degree greater than 6 and any graph that can be drawn planarly with curvy edges can be drawn planarly with straight edges, but the most famous result concerning planar graphs is &lt;a href=&quot;http://en.wikipedia.org/wiki/Kuratowski%27s_theorem&quot;&gt;Kuratowski's Theorem&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A finite graph is planar if and only if it does not contain a subgraph that is a subdivision of $K_5$ (the complete graph on five vertices) or of $K_{3,3}$ (the complete bipartite graph on six vertices)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;k5.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1570&quot;
     inkscape:window-height=&quot;1168&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;1.098616&quot;
     inkscape:cx=&quot;141.60391&quot;
     inkscape:cy=&quot;311.75589&quot;
     inkscape:window-x=&quot;469&quot;
     inkscape:window-y=&quot;195&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;&lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 239.84724,59.518113 401.86927,179.66929&quot;
     id=&quot;path3985&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 239.84724,59.518113 340.88345,370.81888 129.70867,368.08817&quot;
     id=&quot;path3989&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 132.43937,368.99841 65.99213,178.75905 239.84724,63.159058&quot;
     id=&quot;path3991&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 70.543311,177.84881 400.0488,181.48976&quot;
     id=&quot;path3993&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 64.171658,182.4 338.15274,369.90864&quot;
     id=&quot;path3995&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 131.52914,366.2677 401.86927,186.04094&quot;
     id=&quot;path3997&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 131.52914,369.90864 237.11653,60.428349&quot;
     id=&quot;path4001&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,439.26588,-296.82693)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path3898&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3900&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.46644,-108.13999)&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,711.57348,-108.13999)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path3902&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 401.86927,181.48976 -55.5244,188.41888&quot;
     id=&quot;path3999&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3128&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,613.0896,-416.3485)&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3904&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,770.24351,-296.82693)&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;
&lt;center&gt;$K_5$&lt;em&gt;, the complete graph on five vertices&lt;/em&gt;&lt;/center&gt;
&lt;br/&gt;
&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;k33.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1570&quot;
     inkscape:window-height=&quot;1168&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;2.197232&quot;
     inkscape:cx=&quot;136.21704&quot;
     inkscape:cy=&quot;131.89405&quot;
     inkscape:window-x=&quot;469&quot;
     inkscape:window-y=&quot;195&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title&gt;&lt;/dc:title&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 130.16377,78.280315 203.8929,0&quot;
     id=&quot;path4028&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     id=&quot;path4030&quot;
     d=&quot;m 130.16377,78.280315 203.8929,0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 130.16377,351.17038 203.8929,0&quot;
     id=&quot;path4032&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     id=&quot;path4034&quot;
     d=&quot;m 130.16377,214.81572 203.8929,0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.79842,75.549607 337.24249,214.81574&quot;
     id=&quot;path4036&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 129.25353,78.735433 336.78738,350.44092&quot;
     id=&quot;path4038&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 337.69761,76.004725 129.70865,214.81574 337.24249,351.35116&quot;
     id=&quot;path4040&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.79842,350.89604 334.05667,214.81574&quot;
     id=&quot;path4042&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.3433,353.17163 336.78738,77.370079&quot;
     id=&quot;path4044&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-262.24426)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path3898&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3900&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-125.8896)&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3128&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-398.5989)&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path4022&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.0665,-262.24426)&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.0665,-125.8896)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path4024&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.0665,-398.5989)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path4026&quot;
     sodipodi:type=&quot;arc&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;
&lt;center&gt;$K_{3,3}$&lt;em&gt;, the complete bipartite graph on six vertices&lt;/em&gt;&lt;/center&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;It turns out there are fundamentally only two graphs that aren't planar!  Any graph that &quot;contains&quot; either of these two graphs is not planar &lt;em&gt;and&lt;/em&gt; any graph that isn't planar must &quot;contain&quot; one of them.  The meaning of &quot;contains&quot; is a little different here.  It's not enough to just find vertices that form $K_5$ or $K_{3,3}$ with the edges that connect them.  What we need to check is if any subgraph can be &quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Homeomorphism_%28graph_theory%29#Subdivision_and_smoothing&quot;&gt;smoothed&lt;/a&gt;&quot; into one of these two graphs.&lt;/p&gt;
&lt;p&gt;For example, this graph isn't planar because the red vertex can be smoothed away, leaving $K_{3,3}$:
&lt;center&gt;&lt;svg
   xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
   xmlns:cc=&quot;http://creativecommons.org/ns#&quot;
   xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
   xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;
   xmlns=&quot;http://www.w3.org/2000/svg&quot;
   xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
   version=&quot;1.1&quot;
   width=&quot;233&quot;
   height=&quot;215&quot;
   id=&quot;svg2&quot;
   inkscape:version=&quot;0.48.4 r9939&quot;
   sodipodi:docname=&quot;k33-smooth.svg&quot;&gt;
  &lt;sodipodi:namedview
     pagecolor=&quot;#ffffff&quot;
     bordercolor=&quot;#666666&quot;
     borderopacity=&quot;1&quot;
     objecttolerance=&quot;10&quot;
     gridtolerance=&quot;10&quot;
     guidetolerance=&quot;10&quot;
     inkscape:pageopacity=&quot;0&quot;
     inkscape:pageshadow=&quot;2&quot;
     inkscape:window-width=&quot;1570&quot;
     inkscape:window-height=&quot;1168&quot;
     id=&quot;namedview3364&quot;
     showgrid=&quot;false&quot;
     inkscape:zoom=&quot;2.197232&quot;
     inkscape:cx=&quot;111.86822&quot;
     inkscape:cy=&quot;222.91767&quot;
     inkscape:window-x=&quot;744&quot;
     inkscape:window-y=&quot;486&quot;
     inkscape:window-maximized=&quot;0&quot;
     inkscape:current-layer=&quot;svg2&quot; /&gt;
  &lt;defs
     id=&quot;defs4&quot; /&gt;
  &lt;metadata
     id=&quot;metadata7&quot;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&quot;&quot;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;
        &lt;dc:title&gt;&lt;/dc:title&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;&lt;g transform=&quot;scale(0.5)&quot;&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 130.16377,78.280315 203.8929,0&quot;
     id=&quot;path4028&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     id=&quot;path4030&quot;
     d=&quot;m 130.16377,78.280315 203.8929,0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;m 130.16377,351.17038 203.8929,0&quot;
     id=&quot;path4032&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     inkscape:connector-curvature=&quot;0&quot;
     id=&quot;path4034&quot;
     d=&quot;m 130.16377,214.81572 203.8929,0&quot;
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.79842,75.549607 337.24249,214.81574&quot;
     id=&quot;path4036&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 129.25353,78.735433 336.78738,350.44092&quot;
     id=&quot;path4038&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 337.69761,76.004725 129.70865,214.81574 337.24249,351.35116&quot;
     id=&quot;path4040&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.79842,350.89604 334.05667,214.81574&quot;
     id=&quot;path4042&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;
     d=&quot;M 128.3433,353.17163 336.78738,77.370079&quot;
     id=&quot;path4044&quot;
     inkscape:connector-curvature=&quot;0&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-262.24426)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path3898&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3900&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-125.8896)&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path3128&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,501.44289,-398.5989)&quot; /&gt;
  &lt;path
     sodipodi:type=&quot;arc&quot;
     id=&quot;path4022&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.0665,-262.24426)&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.0665,-125.8896)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path4024&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,708.06647,-398.5989)&quot;
     style=&quot;fill:#4682b4;fill-opacity:1;stroke:#000000;stroke-width:0.35012102;stroke-miterlimit:4;stroke-opacity:0.49803922;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path4026&quot;
     sodipodi:type=&quot;arc&quot; /&gt;
  &lt;path
     transform=&quot;matrix(2.8561552,0,0,2.8561552,604.75469,-398.5989)&quot;
     style=&quot;fill:#cd5c5c;fill-opacity:1;stroke:#000000;stroke-width:0.35012102000000001;stroke-miterlimit:4;stroke-opacity:0.49803922000000000;stroke-dasharray:none&quot;
     d=&quot;m -124.86503,167.02873 a 5.1490736,5.1490736 0 1 1 -10.29814,0 5.1490736,5.1490736 0 1 1 10.29814,0 z&quot;
     sodipodi:ry=&quot;5.1490736&quot;
     sodipodi:rx=&quot;5.1490736&quot;
     sodipodi:cy=&quot;167.02873&quot;
     sodipodi:cx=&quot;-130.0141&quot;
     id=&quot;path4065&quot;
     sodipodi:type=&quot;arc&quot; /&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;And?&lt;/h2&gt;
&lt;p&gt;Unfortunately, I'm just learning about lattice theory and I have no idea if there's any formal connection between these similar concepts.  I have found that there is a branch of lattice theory that is concerned with the planarity of the Hasse diagrams, so it's not like any algebraist hasn't thought of this before.  If anyone has a formal connection or an example of other cases where a pair of structures have this kind of &quot;poisonous&quot; property, I'd love to hear.&lt;/p&gt;
&lt;h2&gt;Addendum&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/puremathematics/comments/2ul8ek/poisonous_shapes_in_algebra_and_graph_theory/co9ifo8&quot;&gt;Nerkbot over at /r/puremathematics&lt;/a&gt; was kind enough to share:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You might be interested in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Robertson%E2%80%93Seymour_theorem&quot;&gt;Robertson-Seymour theorem&lt;/a&gt; which says that for any graph property that is closed under taking minors there is a finite list of &quot;forbidden minors&quot; or as you call them &quot;poisonous&quot; graphs. Kuratowski's theorem is one particular example of this.&lt;br/&gt;&lt;br/&gt;
This relates also to the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Well-quasi-ordering&quot;&gt;well-quasi-orders&lt;/a&gt;. A quasi-ordered set $(X, \leq)$ is a well-quasi-order if every infinite sequence ($x_1, x_2, ...$) with elements in $X$ has some $i &amp;lt; j$ with $x_i \leq x_j$. An equivalent statement of the Robertson-Seymour theorem is that the set of all finite graphs ordered by the minor relation is well-quasi-ordered.&lt;br/&gt;&lt;br/&gt;
Another example where &quot;forbidden minors&quot; appear is matroids. Matroids also have minors but unlike graphs they are not well-quasi-ordered under the minor relation. However certain minor closed properties do have a finite list of forbidden minors. For example &lt;a href=&quot;http://en.wikipedia.org/wiki/Rota%27s_conjecture&quot;&gt;Rota's conjecture&lt;/a&gt;, which was announced to be proven very recently, says that for any finite field the set of matroids that are representable over that field are characterized by a finite list of forbidden minors.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  <entry>
    <title>Silverman's Mode Estimation Method Explained</title>
    <link href="http://adereth.github.io/blog/2014/10/12/silvermans-mode-detection-method-explained/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/10/12/silvermans-mode-detection-method-explained/</id>
    <updated>2014-10-12T00:00:00Z</updated>
    <published>2014-10-12T00:00:00Z</published>
    <content type="html">&lt;script src=&quot;https://d3js.org/d3.v2.js&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;style type=&quot;text/css&quot;&gt;

     .chart {
       font-size: 10px;
       margin-top: -40px;
     }

     .point {
       fill: steelblue;
       fill-opacity: 0.5;
       stroke: black;
       stroke-width: 1
       stroke-opacity: 0.5;
     }

     .axis path, .axis line {
       fill: none;
       stroke: #000;
       shape-rendering: crispEdges;
     }

     .area {
       fill: steelblue;
       fill-opacity: 0.25;
       stroke: #000;
       stroke-opacity: 0.5;
     }

     .summedarea {
       fill: steelblue;
       fill-opacity: 0.75;
       stroke: #000;
       stroke-opacity: 0.5;
     }

    .bar rect {
        fill: steelblue;
        fill-opacity: 0.75;
        shape-rendering: crispEdges;
        stroke: #000;
        stroke-opacity: 0.5;

    }

    .bar text {
        fill: #fff;
    }


  &lt;/style&gt;
&lt;/div&gt;

&lt;!-- Global Variables and Handlers: --&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

  var margin = {top: 50, right: 40, bottom: 40, left: 60},
      width = $('article').width() || 720;

  $(window).resize(function() {
    width = $('article').width() || 720;
  });

  function drawPoints(data, chart, height) {

    $(chart).empty();

    var x = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.value}) + 5])
        .range([0, width - margin.left - margin.right]);

    var y = d3.scale.ordinal()
        .domain(d3.range(data.length))
        .rangeRoundBands([height - margin.top - margin.bottom, 0], 0.2);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .tickPadding(8)
    .ticks(8);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickPadding(8)
        .tickSize(0);

    var svg = d3.select(chart).append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('class', 'chart')
          .append('g')
        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    svg.selectAll('.chart')
        .data(data)
        .enter().append('circle')
        .attr('class', 'point')
        .attr('cx', function(d, i) { return x(d.value) })
        .attr('cy', 0)
        .attr('r', 3);

    svg.append('g')
        .attr('class', 'x axis')
        .call(xAxis);

  }

  function drawPointsWithResize(data, chart, height) {
    drawPoints(data, chart, height);
    $(window).resize(function() {drawPoints(data, chart, height); })
  };


     function drawOverlappingDistributions(data, chart, height) {

       $(chart).empty();

       var x = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.value}) + 5])
                       .range([0, width - margin.left - margin.right]);

       var y = d3.scale.linear()
                       .domain([0, 0.5])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var line = d3.svg.line()
                        .x(function(d) {return x(d.q)})
                        .y(function(d) {return y(d.p)})

       var scale = 1 / Math.sqrt(2 * Math.PI);
       function gaussian(x, mean, sigma) {
         var z = (x - mean) / sigma;
         return scale * Math.exp(-0.5 * z * z) / sigma;
       };

       function subpoints(d) {
         return d3.range(d.value - 4, d.value + 4, 0.1).map(
           function (d2,i,a) {
             return {value: d2, height: gaussian(d2, d.value, 1)};
           });
       }

       data.forEach(function(d) {

         var area = d3.svg.area()
                          .interpolate(&quot;monotone&quot;)
                          .x(function(d) { return x(d.value); })
                          .y0(y(0))
                          .y1(function(d) { return y(d.height); });

         svg.append('path')
            .attr('class', 'area')
            .attr(&quot;d&quot;, area(subpoints(d)))
       });

       svg.selectAll('.chart')
          .data(data)
          .enter().append('circle')
          .attr('class', 'point')
          .attr('cx', function(d, i) { return x(d.value) })
          .attr('cy', y(0))
          .attr('r', 3);

       svg.append('g')
          .attr('class', 'x axis')
          .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (height - margin.top - margin.bottom) + &quot;)&quot;)
          .call(xAxis);

     }

     function drawOverlappingDistributionsWithResize(data, chart, height) {
       drawOverlappingDistributions(data, chart, height);
       $(window).resize(function() {drawOverlappingDistributions(data, chart, height); })
     };


     function drawSummedDistributions(data, chart, height, stddev) {

       $(chart).empty();

       var scale = 1 / Math.sqrt(2 * Math.PI);
       function gaussian(x, mean, sigma) {
         var z = (x - mean) / sigma;
         return scale * Math.exp(-0.5 * z * z) / sigma;
       };

       var points = d3.range(0, 30, 0.01).concat(data.map(function(x) {return x.value}))
       .sort(function(a,b){return a-b})
                      .map(
         function (x,i,a) {
           var y = 0;
           data.forEach(function(d) {
             y += gaussian(x, d.value, stddev)
           });
           return {value: x, height: y};
         }

       );



       var x = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.value}) + 5])
                       .range([0, width - margin.left - margin.right]);

       var y = d3.scale.linear()
                       .domain([0, d3.max(points, function(d) { return d.height})])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var line = d3.svg.line()
                        .x(function(d) {return x(d.q)})
                        .y(function(d) {return y(d.p)})

       var area = d3.svg.area()
                        .interpolate(&quot;monotone&quot;)
                        .x(function(d) { return x(d.value); })
                        .y0(y(0))
                        .y1(function(d) { return y(d.height); });

       svg.append('path')
          .attr('class', 'summedarea')
          .attr(&quot;d&quot;, area(points))

       svg.selectAll('.chart')
          .data(data)
          .enter().append('circle')
          .attr('class', 'point')
          .attr('cx', function(d, i) { return x(d.value) })
          .attr('cy', y(0))
          .attr('r', 3);


       svg.append('g')
          .attr('class', 'x axis')
          .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (height - margin.top - margin.bottom) + &quot;)&quot;)
          .call(xAxis);

     }



     function drawSummedDistributionsWithResize(data, chart, height, stddev) {
       drawSummedDistributions(data, chart, height, stddev);
       $(window).resize(function() {drawSummedDistributions(data, chart, height, stddev); })
     };

     function drawHistogram(data, chart, height) {

       $(chart).empty();

       var x = d3.scale.linear()
                       .domain([0, 11])
                       .range([0, width - margin.left - margin.right]);

       var data = d3.layout.histogram()
                           .bins(x.ticks(10))(data);

       var y = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.y; })])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var bar = svg.selectAll(&quot;.bar&quot;)
                    .data(data)
                    .enter().append(&quot;g&quot;)
                    .attr(&quot;class&quot;, &quot;bar&quot;)
                    .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + x(d.x - 0.5) + &quot;,&quot; + y(d.y) + &quot;)&quot;; });

       bar.append(&quot;rect&quot;)
          .attr(&quot;width&quot;, x(data[0].dx) - 3)
          .attr(&quot;height&quot;, function(d) {
            console.log(d + &quot; &quot; + y(d.y));
            return height - y(d.y) - margin.bottom - margin.top; });

       svg.append(&quot;g&quot;)
          .attr(&quot;class&quot;, &quot;x axis&quot;)
          .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (height - margin.top - margin.bottom) + &quot;)&quot;)
          .call(xAxis);

       svg.append(&quot;g&quot;)
          .attr(&quot;class&quot;, &quot;y axis&quot;)
          .call(yAxis);


     }

     function drawHistogramWithResize(data, chart, height) {
       drawHistogram(data, chart, height);
       $(window).resize(function() {drawHistogram(data, chart, height); })
     };


&lt;/script&gt;

&lt;p&gt;I started digging into the history of mode detection after watching &lt;a href=&quot;http://aysy.lu/&quot;&gt;Aysylu Greenberg&lt;/a&gt;'s &lt;a href=&quot;http://youtu.be/XmImGiVuJno&quot;&gt;Strange Loop talk on benchmarking&lt;/a&gt;.  She pointed out that the usual benchmarking statistics fail to capture that our timings may actually be samples from multiple distributions, commonly caused by the fact that our systems are comprised of hierarchical caches.&lt;/p&gt;
&lt;p&gt;I thought it would be useful to add the detection of this to my favorite benchmarking tool, &lt;a href=&quot;http://hugoduncan.org/&quot;&gt;Hugo Duncan&lt;/a&gt;'s &lt;a href=&quot;https://github.com/hugoduncan/criterium&quot;&gt;Criterium&lt;/a&gt;.  Not surprisingly, Hugo had already considered this and there's a note under the TODO section:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Multimodal distribution detection.
Use kernel density estimators?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hadn't heard of using kernel density estimation for multimodal distribution detection so I found the original paper, &lt;a href=&quot;http://www.stat.washington.edu/wxs/Stat593-s03/Literature/silverman-81a.pdf&quot;&gt;Using Kernel Density Estimates to Investigate Multimodality (Silverman, 1981)&lt;/a&gt;.  The original paper is a dense 3 pages and my goal with this post is to restate Silverman's method in a more accessible way.  Please excuse anything that seems overly obvious or pedantic and feel encouraged to suggest any modifications that would make it clearer.&lt;/p&gt;
&lt;h2&gt;What is a mode?&lt;/h2&gt;
&lt;p&gt;The mode of a distribution is the value that has the highest probability of being observed.  Many of us were first exposed to the concept of a mode in a discrete setting.  We have a bunch of observations and the mode is just the observation value that occurs most frequently.  It's an elementary exercise in counting.  Unfortunately, this method of counting doesn't transfer well to observations sampled from a continuous distribution because we don't expect to ever observe the exact some value twice.&lt;/p&gt;
&lt;p&gt;What we're really doing when we count the observations in the discrete case is estimating the &lt;a href=&quot;http://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function&lt;/a&gt; (PDF) of the underlying distribution.  The value that has the highest probability of being observed is the one that is the global maximum of the PDF.  Looking at it this way, we can see that a necessary step for determining the mode in the continuous case is to first estimate the PDF of the underlying distribution.  We'll come back to how Silverman does this with a technique called kernel density estimation later.&lt;/p&gt;
&lt;h2&gt;What does it mean to be multimodal?&lt;/h2&gt;
&lt;p&gt;In the discrete case, we can see that there might be undeniable multiple modes because the counts for two elements might be the same.  For instance, if we observe:&lt;/p&gt;
&lt;p&gt;$$1,2,2,2,3,4,4,4,5$$&lt;/p&gt;
&lt;p&gt;Both 2 and 4 occur thrice, so we have no choice but to say they are both modes.  But perhaps we observe something like this:&lt;/p&gt;
&lt;p&gt;$$1,1,1,2,2,2,2,3,3,3,4,9,10,10$$&lt;/p&gt;
&lt;p&gt;The value 2 occurs more than anything else, so it's &lt;em&gt;the&lt;/em&gt; mode.  But let's look at the histogram:&lt;/p&gt;
&lt;div id='hist'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
drawHistogramWithResize([1,1,1,2,2,2,2,3,3,3,4,9,10,10], '#hist', 300);
&lt;/script&gt;
&lt;p&gt;That pair of 10's are out there looking awfully interesting.  If these were benchmark timings, we might suspect there's a significant fraction of calls that go down some different execution path or fall back to a slower level of the cache hierarchy.  Counting alone isn't going to reveal the 10's because there are even more 1's and 3's.  Since they're nestled up right next to the 2's, we probably will assume that they are just part of the expected variance in performance of the same path that caused all those 2's.  &lt;em&gt;What we're really interested in is the local maxima of the PDF because they are the ones that indicate that our underlying distribution may actually be a mixture of several distributions.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Kernel density estimation&lt;/h2&gt;
&lt;p&gt;Imagine that we make 20 observations and see that they are distributed like this:&lt;/p&gt;
&lt;div id='chart-1'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;

  var data = [
{value: 13.1138}, {value: 10.6519}, {value: 20.5735}, {value: 7.89327}, {value: 9.02554}, {value: 20.8411}, {value: 8.84072}, {value: 10.6273}, {value: 13.5194}, {value: 17.9757}, {value: 10.1086}, {value: 8.68131}, {value: 7.16192}, {value: 19.9496}, {value: 8.77111}, {value: 19.5314}, {value: 9.40915}, {value: 12.8664}, {value: 23.1322}, {value: 13.5008}];
  drawPointsWithResize(data, '#chart-1', 90);
&lt;/script&gt;

&lt;p&gt;We can estimate the underlying PDF by using what is called a &lt;a href=&quot;http://en.wikipedia.org/wiki/Kernel_density_estimation&quot;&gt;kernel density estimate&lt;/a&gt;.  We replace each observation with some distribution, called the &quot;kernel,&quot; centered at the point.  Here's what it would look like using a normal distribution with standard deviation 1:&lt;/p&gt;
&lt;div id='chart-2'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
    drawOverlappingDistributionsWithResize(data, '#chart-2', 200);
&lt;/script&gt;

&lt;p&gt;If we sum up all these overlapping distributions, we get a reasonable estimate for the underlying continuous PDF:&lt;/p&gt;
&lt;div id='chart-3'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
     drawSummedDistributionsWithResize(data, '#chart-3', 300, 1);
&lt;/script&gt;

&lt;p&gt;Note that we made two interesting assumptions here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We replaced each point with a normal distribution.  Silverman's approach actually relies on some of the nice mathematical properties of the normal distribution, so that's what we use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used a standard deviation of 1.  Each normal distribution is wholly specified by a mean and a standard deviation.  The mean is the observation we are replacing, but we had to pick some arbitrary standard deviation which defined the width of the kernel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the case of the normal distribution, we could just vary the standard deviation to adjust the width, but there is a more general way of stretching the kernel for arbitrary distributions.  The kernel density estimate for observations $X_1,X_2,...,X_n$ using a kernel function $K$ is:&lt;/p&gt;
&lt;p&gt;$$\hat{f}(x)=\frac{1}{n}\sum\limits_{i=1}^n K(x-X_i)$$&lt;/p&gt;
&lt;p&gt;In our case above, $K$ is the PDF for the normal distribution with standard deviation 1.  We can stretch the kernel by a factor of $h$ like this:&lt;/p&gt;
&lt;p&gt;$$\hat{f}(x, h)=\frac{1}{nh}\sum\limits_{i=1}^n K(\frac{x-X_i}{h})$$&lt;/p&gt;
&lt;p&gt;Note that changing $h$ has the exact same effect as changing the standard deviation: it makes the kernel wider and shorter while maintaining an area of 1 under the curve.&lt;/p&gt;
&lt;h2&gt;Different kernel widths result in different mode counts&lt;/h2&gt;
&lt;p&gt;The width of the kernel is effectively a smoothing factor.  If we choose too large of a width, we just end up with one giant mound that is almost a perfect normal distribution.  Here's what it looks like if we use $h=5$:&lt;/p&gt;
&lt;div id='chart-4'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
     drawSummedDistributionsWithResize(data, '#chart-4', 300, 5);
&lt;/script&gt;

&lt;p&gt;Clearly, this has a single maxima.&lt;/p&gt;
&lt;p&gt;If we choose too small of a width, we get a very spiky and over-fit estimate of the PDF.  Here's what it looks like with $h = 0.1$:&lt;/p&gt;
&lt;div id='chart-5'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
drawSummedDistributionsWithResize(data, '#chart-5', 300, 0.1);
&lt;/script&gt;

&lt;p&gt;This PDF has a bunch of local maxima.  If we shrink the width small enough, we'll get $n$ maxima, where $n$ is the number of observations:&lt;/p&gt;
&lt;div id='chart-6'&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;
drawSummedDistributionsWithResize(data, '#chart-6', 300, 0.005);
&lt;/script&gt;

&lt;p&gt;The neat thing about using the normal distribution as our kernel is that it has the property that shrinking the width will only introduce new local maxima.  Silverman gives a proof of this at the end of Section 2 in the original paper.  This means that for every integer $k$, where $1&amp;lt;k&amp;lt;n$, we can find the minimum width $h_k$ such that the kernel density estimate has at most $k$ maxima.  Silverman calls these $h_k$ values &quot;critical widths.&quot;&lt;/p&gt;
&lt;h2&gt;Finding the critical widths&lt;/h2&gt;
&lt;p&gt;To actually find the critical widths, we need to look at the formula for the kernel density estimate.  The PDF for a plain old normal distribution with mean $\mu$ and standard deviation $\sigma$ is:&lt;/p&gt;
&lt;p&gt;$$f(x)=\frac{1}{\sigma\sqrt{2\pi}}\mathrm{e}^{-\frac{(x-\mu)^2}{2\sigma^2}}$$&lt;/p&gt;
&lt;p&gt;The kernel density estimate with standard deviation $\sigma=1$ for observations $X_1,X_2,...,X_n$ and width $h$ is:&lt;/p&gt;
&lt;p&gt;$$\hat{f}(x,h)=\frac{1}{nh}\sum\limits_{i=1}^n \frac{1}{\sqrt{2\pi}}\mathrm{e}^{-\frac{(x-X_i)^2}{2h^2}}$$&lt;/p&gt;
&lt;p&gt;For a given $h$, you can find all the local maxima of $\hat{f}$ using your favorite numerical methods.  Now we need to find the $h_k$ where new local maxima are introduced.  Because of a result that Silverman proved at the end of section 2 in the paper, we know we can use a binary search over a range of $h$ values to find the critical widths at which new maxima show up.&lt;/p&gt;
&lt;h2&gt;Picking which kernel width to use&lt;/h2&gt;
&lt;p&gt;This is the part of the original paper that I found to be the least clear.  It's pretty dense and makes a number of vague references to the application of techniques from other papers.&lt;/p&gt;
&lt;p&gt;We now have a kernel density estimate of the PDF for each number of modes between $1$ and $n$.  For each estimate, we're going to use a statistical test to determine the significance.  We want to be parsimonious in our claims that there are additional modes, so we pick the smallest $k$ such that the significance measure of $h_k$ meets some threshold.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29&quot;&gt;Bootstrapping&lt;/a&gt; is used to evaluate the accuracy of a statistical measure by computing that statistic on observations that are &lt;a href=&quot;http://en.wikipedia.org/wiki/Resampling_%28statistics%29&quot;&gt;resampled&lt;/a&gt; from the original set of observations.&lt;/p&gt;
&lt;p&gt;Silverman used a &lt;a href=&quot;http://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29#Smooth_bootstrap&quot;&gt;smoothed bootstrap procedure&lt;/a&gt; to evaluate the significance.  Smoothed bootstrapping is bootstrapping with some noise added to the resampled observations.  First, we sample from the original set of observations, with replacement, to get $X_I(i)$.  Then we add noise to get our smoothed $y_i$ values:&lt;/p&gt;
&lt;p&gt;$$y_i=\frac{1}{\sqrt{1+h_k^2/\sigma^2}}(X_{I(i)}+h_k \epsilon_i)$$&lt;/p&gt;
&lt;p&gt;Where $\sigma$ is the standard deviation of $X_1,X_2,...,X_n$, $h_k$ is the critical width we are testing, and $\epsilon_i$ is a random value sampled from a normal distribution with mean 0 and standard deviation 1.&lt;/p&gt;
&lt;p&gt;Once we have these smoothed values, we compute the kernel density estimate of them using $h_k$ and count the modes.  If this kernel density estimate doesn't have more than $k$ modes, we take that as a sign that we have a good critical width.  We repeat this many times and use the fraction of simulations where we didn't find more than $k$ modes as the p-value.  In the paper, Silverman does 100 rounds of simulation.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Silverman's technique was a really important early step in multimodality detection and it has been thoroughly investigated and improved upon since 1981.  Google Scholar lists &lt;a href=&quot;http://scholar.google.com/scholar?espv=2&amp;amp;bav=on.2,or.r_cp.r_qf.&amp;amp;bvm=bv.77161500,d.cGE&amp;amp;ion=1&amp;amp;biw=1680&amp;amp;bih=938&amp;amp;dpr=2&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;lr=&amp;amp;cites=18163244822709704741&quot;&gt;about 670 citations of this paper&lt;/a&gt;.  If you're interested in learning more, one paper I found particularly helpful was &lt;a href=&quot;http://www3.stat.sinica.edu.tw/statistica/oldpdf/A11n28.pdf&quot;&gt;On the Calibration of Silverman's Test for Multimodality (Hall &amp;amp; York, 2001)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the biggest weaknesses in Silverman's technique is that the critical width is a global parameter, so it may run into trouble if our underlying distribution is a mixture of low and high variance component distributions.  For an actual implementation of mode detection in a benchmarking package, I'd consider using something that doesn't have this issue, like the technique described in &lt;a href=&quot;http://private.igf.edu.pl/~jnn/Literatura_tematu/Minnotte_1997.pdf&quot;&gt;Nonparametric Testing of the Existence of Modes (Minnotte, 1997)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this is correct and helpful.  If I misinterpreted anything in the original paper, please let me know.  Thanks!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Computing the Remedian in Clojure</title>
    <link href="http://adereth.github.io/blog/2014/09/21/computing-the-remedian-in-clojure/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/09/21/computing-the-remedian-in-clojure/</id>
    <updated>2014-09-21T00:00:00Z</updated>
    <published>2014-09-21T00:00:00Z</published>
    <content type="html">&lt;p&gt;The remedian is an approximation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Median&quot;&gt;median&lt;/a&gt; that can be computed using only $O(\log{n})$ storage.  The algorithm was originally presented in &lt;a href=&quot;http://web.ipac.caltech.edu/staff/fmasci/home/statistics_refs/Remedian.pdf&quot;&gt;The Remedian: A Robust Averaging Method for Large Data Sets by Rousseeuw and Bassett&lt;/a&gt; (1990).  The core of it is on the first page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let us assume that $n = b^k$, where $b$ and $k$ are integers (the case where $n$ is not of this form will be treated in Sec. 7.  The &lt;em&gt;remedian&lt;/em&gt; with base $b$ proceeds by computing medians of groups of $b$ observations, yielding $b^{k-1}$ estimates on which this procedure is iterated, and so on, until only a single estimate remains.  When implemented properly, this method merely needs $k$ arrays of size $b$ that are continuously reused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The implementation of this part in Clojure is so nice that I just had to share.&lt;/p&gt;
&lt;p&gt;First, we need a vanilla implementation of the median function.  We're always going to be computing the median of sets of size $b$, where $b$ is relatively small, so there's no need to get fancy with a linear time algorithm.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can implement the actual algorithm.  We group, compute the median of each group, and recur, with the base case being when we're left with a single element in the collection:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remedian&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition-all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;code&gt;partition-all&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; both operate on and return lazy sequences, we maintain the property of only using $O(b \log_{b}{n})$ memory at any point in time.&lt;/p&gt;
&lt;p&gt;While this implementation is simple and elegant, it only works if the size of the collection is a power of $b$.  If we don't have $n = b\^k$ where $b$ and $k$ are integers, we'll over-weight the observations that get grouped into the last groups of size $&amp;lt; b$.&lt;/p&gt;
&lt;p&gt;Section 7 of the original paper describes the weighting scheme you should use to compute the median if you're left with incomplete groupings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How should we proceed when the sample size $n$ is less than $b^k$? The remedian algorithm then ends up with $n_1$ numbers in the first array, $n_2$ numbers in the second array, and $n_k$ numbers in the last array, such that $n = n_1 + n_{2}b + ... + n_k b^{k-1}$.  For our final estimate we then compute a weighted median in which the $n_1$, numbers in the first array have weight 1, the $n_2$ numbers in the second array have weight $b$, and the $n_k$ numbers in the last array have weight $b^{k-1}$. This final computation does not need much storage because there are fewer than $bk$ numbers and they only have to be ranked in increasing order, after which their weights must be added until the sum is at least $n/2$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a bit difficult to directly translate this to the recursive solution I gave above because in the final step we're going to do a computation on a mixture of values from the different recursive sequences.  Let's give it a shot.&lt;/p&gt;
&lt;p&gt;We need some way of bubbling up the incomplete groups for the final weighted median computation.  Instead of having each recursive sequence &lt;em&gt;always&lt;/em&gt; compute the median of each group, we can add a check to see if the group is smaller than $b$ and, if so, just return the incomplete group:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remedian-with-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;incomplete-group?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq? &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;loop &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition-all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incomplete-group?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, if we were using the mutable array implementation proposed in the original paper to compute the remedian of &lt;code&gt;(range 26)&lt;/code&gt; with $b = 3$, the final state of the arrays would be:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Array&lt;/th&gt;
&lt;th&gt;$i_0$&lt;/th&gt;
&lt;th&gt;$i_1$&lt;/th&gt;
&lt;th&gt;$i_2$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;em&gt;empty&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;em&gt;empty&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;em&gt;empty&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In our sequence based solution, the final sequence will be &lt;code&gt;((4 13 (19 22 (24 25))))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we need to convert these nested sequences into &lt;code&gt;[value weight]&lt;/code&gt; pairs that could be fed into a weighted median function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;loop &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nested-elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                             &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of weighting the values in array $j$ with weight $b^{j-1}$, we're weighting it at $\frac{b^{j-1}}{b^{k}}$.  Dividing all the weights by a constant will give us the same result and this is slightly easier to compute recursively, as we can just start at 1 and divide by $b$ as we descend into each nested sequence.&lt;/p&gt;
&lt;p&gt;If we run this on the &lt;code&gt;(range 26)&lt;/code&gt; with $b = 3$, we get:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remedian-with-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weight-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we're going to need a weighted median function.  This operates on a collection of &lt;code&gt;[value weight]&lt;/code&gt; pairs:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weighted-median&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;total-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;middle-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;total-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted-pairs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort-by first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vw-pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted-pairs-cum-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reductions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cum-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cum-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                            &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted-pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sorted-pairs-cum-weight&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;middle-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ffirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can put it all together and redefine the remedian function to deal with the case where $n$ isn't a power of $b$:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remedian&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coll&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remedian-with-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weight-leftovers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weighted-median&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The remedian is fun, but in practice I prefer to use the approximate quantile methods that were invented a few years later and presented in &lt;a href=&quot;http://www.cs.umd.edu/~samir/498/manku.pdf&quot;&gt;Approximate Medians and other Quantiles in One Pass and with Limited Memory by Manku, Rajagopalan, and Lindsay&lt;/a&gt; (1998).  There's a high-quality implementation you can use in Clojure via Java interop in Parallel Colt's &lt;a href=&quot;http://incanter.org/docs/parallelcolt/api/cern/jet/stat/tdouble/quantile/DoubleQuantileFinderFactory.html&quot;&gt;DoubleQuantileFinderFactory&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Typing Qwerty on a Dvorak Keyboard</title>
    <link href="http://adereth.github.io/blog/2014/08/10/typing-qwerty-on-a-dvorak-keyboard/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/08/10/typing-qwerty-on-a-dvorak-keyboard/</id>
    <updated>2014-08-10T00:00:00Z</updated>
    <published>2014-08-10T00:00:00Z</published>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/thattommyhall&quot;&gt;@thattommyhall&lt;/a&gt; posted a fun question on Twitter:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you type your name on a keyboard marked as qwerty but set to Dvorak and keep reinputting what comes out, will it ever say your name?&lt;/p&gt;&amp;mdash; !!!!!11111oneoneone (@thattommyhall) &lt;a href=&quot;https://twitter.com/thattommyhall/statuses/494916131598393344&quot;&gt;July 31, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The best answer was &quot;yes because group theory&quot; and &lt;a href=&quot;https://twitter.com/AnnaPawlicka&quot;&gt;@AnnaPawlicka&lt;/a&gt; demonstrated it was true for her name:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/thattommyhall&quot;&gt;@thattommyhall&lt;/a&gt; Yes. I can confirm that. :) &lt;a href=&quot;http://t.co/Vubkf1ltoK&quot;&gt;pic.twitter.com/Vubkf1ltoK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Anna Pawlicka (@AnnaPawlicka) &lt;a href=&quot;https://twitter.com/AnnaPawlicka/statuses/494918999747350529&quot;&gt;July 31, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;But is it really true?  And if so, how many iterations will it take to get the target string?  I turned to Mathematica...&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;dvorak&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from_&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MapThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VertexLabels&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DirectedEdges&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to visualize the mapping of keys from one layout to another:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dvorak&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Dvorak to Qwerty Graph&quot; src=&quot;/images/dvorak-qwerty.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There is a single directed edge going from each character to the one that will be displayed when you type it.  There are 3 keys that remain unchanged, 2 pairs of swapped keys, and 2 large cycles of keys.&lt;/p&gt;
&lt;p&gt;We can get these groups programmatically using the &lt;a href=&quot;http://reference.wolfram.com/mathematica/ref/ConnectedComponents.html&quot;&gt;ConnectedComponents function&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;TableForm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnectedComponents&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dvorak&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Output lang:text %}
\
a
m
] =
, w
. e y t f g u c i d h j k v
[ - ' q p r o l / s n ; z x b&lt;/code&gt; %}&lt;/p&gt;
&lt;p&gt;It will take the length of the cycle the letter is in to get the letter we want.  For a given word, we won't get all the letters we want unless we've iterated some multiple of the length of the cycles each letter is in.  Let's apply the Least Common Multiple function to see the worst case where there is a letter from each cycle:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LCM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnectedComponents&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dvorak&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Output lang:text %}
210&lt;/code&gt; %}&lt;/p&gt;
&lt;p&gt;Looks like Anna got lucky that her name only consists of letters in a cycle of length 1 and 15.&lt;/p&gt;
&lt;p&gt;For fun, here's the graph we get if we use Colemak instead of Dvorak:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;colemak&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colemak&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Colemak to Qwerty Graph&quot; src=&quot;/images/colemak-qwerty.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One cycle of length 14, one cycle of length 3, and the rest are just letters that map back to themselves.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LCM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnectedComponents&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colemak&lt;/span&gt;,&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;qwerty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Output lang:text %}
42&lt;/code&gt; %}&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Custom Clojure Evaluation Keybindings in Emacs</title>
    <link href="http://adereth.github.io/blog/2014/05/03/custom-clojure-evaluation-keybindings-in-emacs/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/05/03/custom-clojure-evaluation-keybindings-in-emacs/</id>
    <updated>2014-05-03T00:00:00Z</updated>
    <published>2014-05-03T00:00:00Z</published>
    <content type="html">&lt;p&gt;I love &lt;a href=&quot;http://blog.jayfields.com/2014/01/repl-driven-development.html&quot;&gt;REPL Driven Development&lt;/a&gt;.  My style is to write expressions directly in the file that I'm working on and to use &lt;code&gt;C-x C-e&lt;/code&gt; to view the value of the last command in the minibuffer.&lt;/p&gt;
&lt;p&gt;Being able to move my cursor to a sub-expression and see the value of that expression immediately feels like a superpower.  I love this ability and it's one of the things that keeps me locked into Clojure+Emacs as my preferred enviroment.&lt;/p&gt;
&lt;p&gt;This power can be taken to the next level by making custom evaluation commands that run whatever you want on the expression at your cursor.&lt;/p&gt;
&lt;h2&gt;The Basic Pattern&lt;/h2&gt;
&lt;p&gt;Let's start by looking at the Elisp that defines &lt;code&gt;cider-eval-last-sexp&lt;/code&gt;, which is what gets invoked when we press &lt;code&gt;C-x C-e&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-eval-last-sexp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Evaluate the expression preceding point.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;If invoked with a PREFIX argument, print the result in the current buffer.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval-print&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important part is that we can use &lt;code&gt;cider-last-sexp&lt;/code&gt; to get the expression before the cursor as a string and we can evaluate a string by passing it to &lt;code&gt;cider-interactive-eval&lt;/code&gt;.  We'll write some basic Elisp to make a new function that modifies the string before evaluation and then we'll bind this function to a new key sequence.&lt;/p&gt;
&lt;p&gt;The essential pattern we'll use is:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;custom-eval-last-sexp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(require &amp;#39;some-namespace)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;             (some-namespace/some-fn %s)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-eval-last-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you happen to still be using Swank or nrepl.el, you should use &lt;code&gt;swank-interactive-eval&lt;/code&gt; and &lt;code&gt;swank-last-sexp&lt;/code&gt; or &lt;code&gt;swank-interactive-eval&lt;/code&gt; and &lt;code&gt;nrepl-last-sexp&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Let's look at some of the useful things we can do with this...&lt;/p&gt;
&lt;h2&gt;Collections&lt;/h2&gt;
&lt;p&gt;I frequently deal with collections that are too big to display nicely in the minibuffer.  It's nice to be able to explore them with a couple keystrokes.  Here's a simple application of the pattern that gives us the size of the collection by just hitting &lt;code&gt;C-c c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count-last-expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(count %s)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;count-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another useful one is to just show the nth value.  This one is a little more interesting because it requires a parameter:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nth-from-last-expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(nth %s %s)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nth-from-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you just use &lt;code&gt;C-c n&lt;/code&gt;, Emacs defaults the parameter value to 1.  You can pass an argument using &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html&quot;&gt;Emacs' universal argument functionality&lt;/a&gt;.  For example, to get the 0^th element, you could either use &lt;code&gt;C-u 0 C-c n&lt;/code&gt; or &lt;code&gt;M-0 C-c n&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Write to File&lt;/h2&gt;
&lt;p&gt;Sometimes the best way to view a value is to look at it in an external program.  I've used this pattern when working on Clojure code that generates SVG, HTML, and &lt;a href=&quot;/blog/2014/04/09/3d-printing-with-clojure/&quot;&gt;3D models&lt;/a&gt;.  Here's what I use for 3D modeling:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;spit-scad-last-expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(require &amp;#39;scad-clj.scad)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;       (spit \&amp;quot;eval.scad\&amp;quot; (scad-clj.scad/write-scad %s))&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c 3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;spit-scad-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This writes the &lt;code&gt;eval.scad&lt;/code&gt; file to the root directory of the project.  It's great because OpenSCAD watches open files and automatically refreshes when they change.  You can run this on an expression that defines a shape and immediately see the shape in another window.  I used this technique in &lt;a href=&quot;http://www.meetup.com/Clojure-NYC/events/180303582/&quot;&gt;my recent presentation on 3D printing at the Clojure NYC meetup&lt;/a&gt; and I got feedback that this made the live demos easier to follow.&lt;/p&gt;
&lt;p&gt;Here's what it looks like when you &lt;code&gt;C-c 3&lt;/code&gt; on a nested expression that defines a cube:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;OpenScad Screenshot&quot; src=&quot;/images/show-scad.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;View Swing Components&lt;/h2&gt;
&lt;p&gt;If you have to use Swing, your pain can be slightly mitigated by having a quick way to view components.  This will give you a shortcut to pop up a new frame that contains what your expression evaluates to:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame-last-expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(doto (javax.swing.JFrame. \&amp;quot;eval\&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        (.. (getContentPane) (add %s))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        (.pack)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        (.show))&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;frame-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This plays nicely with &lt;a href=&quot;https://github.com/daveray/seesaw&quot;&gt;Seesaw&lt;/a&gt;, but doesn't presume that you have it on your classpath.  Here's what it looks like when you &lt;code&gt;C-c f&lt;/code&gt; at the end of an expression that defines a Swing component:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;JFrame Screenshot&quot; src=&quot;/images/show-frame.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Benchmarking with Criterium&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/&quot;&gt;A Few Interesing Clojure Microbenchmarks&lt;/a&gt;, I mentioned Hugo Duncan's &lt;a href=&quot;https://github.com/hugoduncan/criterium&quot;&gt;Criterium library&lt;/a&gt;.  It's a reliable way of measuring the performance of an expression.  We can bring it closer to our fingertips by making a function for benchmarking an expression instead of just evaluating it:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;benchmark-last-expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-interactive-eval&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(require &amp;#39;criterium.core)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;             (criterium.core/quick-benchmark %s)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cider-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cider-mode-map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-c b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;benchmark-last-expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I find this simple pattern to be quite handy.  Also, when I'm showing off the power of nrepl to the uninitiated, being able to invoke arbitrary functions on whatever is at my cursor looks like pure magic.&lt;/p&gt;
&lt;p&gt;I hope you find this useful and if you invent any useful bindings or alternative ways of implementing this pattern, please share!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>java.awt.Shape's Insidious Insideness</title>
    <link href="http://adereth.github.io/blog/2014/04/21/java-dot-awt-dot-shapes-insidious-insideness/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/04/21/java-dot-awt-dot-shapes-insidious-insideness/</id>
    <updated>2014-04-21T00:00:00Z</updated>
    <published>2014-04-21T00:00:00Z</published>
    <content type="html">&lt;p&gt;I recently added text support to the &lt;a href=&quot;https://github.com/farrellm/scad-clj&quot;&gt;scad-clj&lt;/a&gt; 3D modeling library and encountered an interesting bug:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Poorly rendered 4&quot; src=&quot;/images/bad4.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;See that 4?  No hole!  Why?!?  All the other holes are there...&lt;/p&gt;
&lt;h2&gt;Shape Outlines&lt;/h2&gt;
&lt;p&gt;First, let's look at how you get the outline of some text in a font in Java:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FontRenderContext&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FontRenderContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RenderingHints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE_TEXT_ANTIALIAS_DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RenderingHints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE_FRACTIONALMETRICS_DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Andale Mono&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myText&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1234567890&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PathIterator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createGlyphVector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPathIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We end up with a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; that traces along the outline of the character.  This code uses the version of &lt;code&gt;getPathIterator&lt;/code&gt; that specifies &quot;flatness&quot;, which means that we get back a path strictly made up of straight line segments that approximate the curves.&lt;/p&gt;
&lt;p&gt;Characters that are made from a single filled polygon are relatively easy; there is a single path and the bounded area is what gets filled:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;12357&quot; src=&quot;/images/one-path.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The complexity comes when the path crosses over itself or if it is discontinuous and contains multiple outlines:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;46890&quot; src=&quot;/images/multiple-parts.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html&quot;&gt;JavaDocs for PathIterator&lt;/a&gt; explain a bit about how to actually determine what is inside the path.  All of the fill areas are determined using the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html#WIND_EVEN_ODD&quot;&gt;&lt;code&gt;WIND_EVEN_ODD&lt;/code&gt; rule&lt;/a&gt;: &lt;em&gt;a point is in the fill area if it is contained by an odd number of paths.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, the dotted zero is made up of three paths:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The outline of the outside of the oval&lt;/li&gt;
&lt;li&gt;The outline of the inside of the oval&lt;/li&gt;
&lt;li&gt;The outline of the dot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The points inside #1 but outside #2 are in 1 area and the points inside #3 are inside 3 areas.&lt;/p&gt;
&lt;h2&gt;Counting Areas&lt;/h2&gt;
&lt;p&gt;For each path, we need to count how many other paths contain it.  One way is to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/geom/Path2D.Double.html&quot;&gt;&lt;code&gt;java.awt.geom.Path2D.Double&lt;/code&gt;&lt;/a&gt; to make a Shape and then use the &lt;code&gt;contains(double x, double y)&lt;/code&gt; method to see if any of the points from the other paths are in it.&lt;/p&gt;
&lt;p&gt;I incorrectly assumed that each Shape contained at least one of the points that define it's outline.  It usually does, which is why all the other holes were properly rendered, but it doesn't for some shapes, including triangles in certain orientations!&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/Shape.html&quot;&gt;JavaDoc for Shape&lt;/a&gt; says that a point is considered to lie inside a Shape if and only if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It lies completely inside the Shape boundary or&lt;/li&gt;
&lt;li&gt;It lies exactly on the Shape boundary and the space immediately adjacent to the point in the increasing X direction is entirely inside the boundary or&lt;/li&gt;
&lt;li&gt;It lies exactly on a horizontal boundary segment and the space immediately adjacent to the point in the increasing Y direction is inside the boundary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The three points defining the triangle that form the hole in 4 don't meet any of these criteria, so instead of counting as being in 2 paths (itself and the outer outline), it was counted as being in 1.  The fix was to explicitly define a path as containing itself.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>3D Printing with Clojure</title>
    <link href="http://adereth.github.io/blog/2014/03/14/3d-printing-with-clojure/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/03/14/3d-printing-with-clojure/</id>
    <updated>2014-03-14T00:00:00Z</updated>
    <published>2014-03-14T00:00:00Z</published>
    <content type="html">&lt;p&gt;I've been doing some 3D printing for &lt;a href=&quot;https://twitter.com/adereth/status/444145229109555200/photo/1&quot;&gt;my next keyboard project&lt;/a&gt; and I've got a workflow that I'm pretty happy with that I'd like to share.&lt;/p&gt;
&lt;p&gt;When I first started trying to make models a month ago, I tried &lt;a href=&quot;http://www.blender.org/&quot;&gt;Blender&lt;/a&gt;.  It's an amazing beast, but after a few hours of tutorials it was clear that it would take a while to get proficient with it.  Also, it is really designed for interactive modeling and I need something that I can programmatically tweak.&lt;/p&gt;
&lt;h2&gt;OpenSCAD&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;OpenSCAD Screenshot&quot; src=&quot;/images/openscad.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A couple of friends suggested &lt;a href=&quot;http://www.openscad.org/&quot;&gt;OpenSCAD&lt;/a&gt;, which is touted as &quot;the programmers' solid 3D CAD modeler.&quot;  It provides a power set of primitive shapes and operations, but the language itself leaves a bit to be desired.  This isn't a beat-up-on-SCAD post, but a few of the things that irked me were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strange function application syntax (parameters in parens after the function name with an expression or block following the closing paren)&lt;/li&gt;
&lt;li&gt;Unclear variable binding rules (multiple passes are made over the code and the results of changing a variable may affect things earlier in the code unexpectedly)&lt;/li&gt;
&lt;li&gt;No package/namespace management&lt;/li&gt;
&lt;li&gt;Multiple looping constructs that depend on what you are going to do with the results, not on how you want to loop&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;scad-clj&lt;/h2&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/farrellm&quot;&gt;Matt Farrell&lt;/a&gt; has written &lt;a href=&quot;https://github.com/farrellm/scad-clj&quot;&gt;scad-clj&lt;/a&gt;, an OpenSCAD DSL in Clojure.  It addresses every issue I had with OpenSCAD and lends itself to a really nice workflow with the Clojure REPL.&lt;/p&gt;
&lt;p&gt;To get started using it, add the dependency on &lt;a href=&quot;https://clojars.org/scad-clj&quot;&gt;&lt;code&gt;[scad-clj &quot;0.1.0&quot;]&lt;/code&gt;&lt;/a&gt; to your &lt;code&gt;project.clj&lt;/code&gt; and fire up your REPL.&lt;/p&gt;
&lt;p&gt;All of the functions for creating 3D models live in the &lt;code&gt;scad-clj.model&lt;/code&gt; namespace.  There's no documentation yet, so in the beginning you'll have to look at the &lt;a href=&quot;https://github.com/farrellm/scad-clj/blob/master/src/scad_clj/model.clj&quot;&gt;source for &lt;code&gt;model.clj&lt;/code&gt;&lt;/a&gt; and occassionally the &lt;a href=&quot;http://www.openscad.org/documentation.html&quot;&gt;OpenSCAD documentation&lt;/a&gt;.  Fortunately, there really isn't much to learn and it's quite a revelation to discover that almost everything you'll want to do can be done with a handful of functions.&lt;/p&gt;
&lt;p&gt;Here's a simple model that showcases each of the primitive shapes:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;primitives&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Evaluating this gives us a data structure that can be converted into an .scad file using &lt;code&gt;scad-clj.scad/write-scad&lt;/code&gt; to generate a string and &lt;code&gt;spit&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post-demo.scad&amp;quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write-scad&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;primitives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We're going to use OpenSCAD to view the results.  One feature of OpenSCAD that is super useful for this workflow is that it watches opened files and automatically refreshes the rendering when the file is updated.  This means that we can just re-evaluate our Clojure code and see the results immediately in another window:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Primitives Screenshot&quot; src=&quot;/images/scad-primitives.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;scad-clj makes all new primitive shapes centered at the origin.  We can use the shape operator functions to move them around and deform them:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;primitives&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Math/PI&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1/2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-150&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cylinder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=&quot;Operator Screenshot&quot; src=&quot;/images/scad-operators.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I snuck &lt;code&gt;union&lt;/code&gt; into those examples.  Shapes can also be combined using &lt;code&gt;intersection&lt;/code&gt;, &lt;code&gt;difference&lt;/code&gt;, and &lt;code&gt;hull&lt;/code&gt;.  It's pretty incredible how much can be done with just these.  For example, here's the latest iteration of my keyboard design built using clj-scad:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Keyboard&quot; src=&quot;/images/scad-keyboard.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;3D Printing&lt;/h2&gt;
&lt;p&gt;Once your design is complete, you can use OpenSCAD to export it as an STL file which can then be imported to software like &lt;a href=&quot;http://replicat.org/&quot;&gt;ReplicatorG&lt;/a&gt; or &lt;a href=&quot;https://www.makerbot.com/makerware/&quot;&gt;Makerware&lt;/a&gt; for processing into an .x3g file that can be printed:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Keyboard&quot; src=&quot;/images/printed.JPG&quot; /&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Finishing up the ErgoDox</title>
    <link href="http://adereth.github.io/blog/2014/02/27/finishing-up-the-ergodox/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/02/27/finishing-up-the-ergodox/</id>
    <updated>2014-02-27T00:00:00Z</updated>
    <published>2014-02-27T00:00:00Z</published>
    <content type="html">&lt;p&gt;I've been busy with a few other keyboard projects since &lt;a href=&quot;/blog/2014/02/12/building-an-ergodox/&quot;&gt;my last post on my ErgoDox build&lt;/a&gt;.  While working on those projects, I've gotten some parts and done a few more tweaks to the ErgoDox that I'd like to share.&lt;/p&gt;
&lt;h2&gt;PBT DSA Keycaps&lt;/h2&gt;
&lt;p&gt;The biggest improvement was switching the keycaps.  Originally I had used keycaps from &lt;a href=&quot;http://www.wasdkeyboards.com/index.php/&quot;&gt;WASD Keyboards&lt;/a&gt; that were designed to be used with a normal keyboard.  Typical keyboards use keycaps that are very similar to DCS profile caps, which have different profiles for different rows:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;DCS Keycap Profile&quot; src=&quot;/images/dcs.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;http://keycapsdirect.com/key-caps.php&quot;&gt;Signature Plastics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In contrast, DSA keycaps have concave spherical tops and are uniform in profile:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;DSA Keycap Profile&quot; src=&quot;/images/dsa.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I had ordered a set of DSA keycaps from Signature Plastics for another project and decided to try them out on the ErgoDox:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Full keyboard&quot; src=&quot;/images/full-ergo-green.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I was surprised with how much better these felt, particularly on the thumb cluster.  I now realize that a lot of my discomfort reaching the upper keys on the the thumb cluster came from their relatively high profile.&lt;/p&gt;
&lt;p&gt;The DSA keycaps are also made out of PBT plastic instead of ABS.  They have a nice textured feel and the plastic is supposed to be much more robust.  As I said in my last post, &lt;a href=&quot;http://keyshop.pimpmykeyboard.com/product/dsa-pbt-blank-sets&quot;&gt;Pimp My Keyboard shop has PBT DCA blank sets for the ErgoDox&lt;/a&gt; for $43, which is a great deal and is definitely the way to go if you're sourcing your own parts.&lt;/p&gt;
&lt;h2&gt;TRRS Connector&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.digikey.com/&quot;&gt;DigiKey&lt;/a&gt; finally got the &lt;a href=&quot;http://www.digikey.com/product-detail/en/SJ-43514/CP-43514-ND/368146&quot;&gt;TRRS connectors&lt;/a&gt; in stock and sent them to me.  I was concerned that they wouldn't fit in my lower profile case, but a little Dremel action made it work:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;TRRS Connector&quot; src=&quot;/images/TRRS.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The keyboard didn't work after I added the connector.  It worked fine if I just had the right side plugged in, but as soon as I connected the left side, neither worked.  I took the whole thing apart and used an ohmmeter to test the 4 connections between the two halves.  It turned out that all of the connections were there, but there was a little resistance on one of them.  I resoldered it more thoroughly and everything worked fine.&lt;/p&gt;
&lt;h2&gt;Sanding&lt;/h2&gt;
&lt;p&gt;Finally, I did a little experimentation with wet sanding the sides to remove some of the burn marks from the paper during the laser cutting and to give a more even finish.  I used 400 grit sandpaper and made a little progress:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;corner&quot; src=&quot;/images/corner-zoom.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Acrylic dust is nasty stuff!  It didn't make as much of a difference as I hoped.  I'm going to do a little more experimentation sanding with acetone to see if I can melt it smoothly and make the 5 layers of acrylic look like one piece.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;My next project is going to involve a lot of acrylic bending, so I'm probably going to also take a stab at cutting and bending a stand for the ErgoDox that tents it at a better angle.  Any suggestions are appreciated!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Sourcing and Building an ErgoDox Keyboard</title>
    <link href="http://adereth.github.io/blog/2014/02/09/building-an-ergodox/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/02/09/building-an-ergodox/</id>
    <updated>2014-02-09T00:00:00Z</updated>
    <published>2014-02-09T00:00:00Z</published>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;http://ergodox.org/&quot;&gt;ErgoDox&lt;/a&gt; is a split ergonomic keyboard project.  One of the most notable things about it is that you can't buy this keyboard -- you have to build it yourself!  The &lt;a href=&quot;http://ergodox.org/Hardware.aspx&quot;&gt;parts list&lt;/a&gt; is available on the site, along with the &lt;a href=&quot;http://ergodox.org/Downloads.aspx&quot;&gt;designs for the PCB and case&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently built one, sourcing the parts myself, and I'd like to share what I've learned.&lt;/p&gt;
&lt;h2&gt;Reference Build&lt;/h2&gt;
&lt;p&gt;The easiest way to build one is to get in on one of the &lt;a href=&quot;https://www.massdrop.com/buy/ergodox&quot;&gt;group-buys of full kits organized by Massdrop&lt;/a&gt;.  Their kits have become the most common build, with options for different style &lt;a href=&quot;http://www.keyboardco.com/blog/index.php/2012/12/an-introduction-to-cherry-mx-mechanical-switches/&quot;&gt;Cherry keyswitches&lt;/a&gt; and either a classic case or one with wrist rests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.massdrop.com/buy/ergodox&quot;&gt;&lt;img alt=&quot;Massdrop's ErgoDox&quot; src=&quot;/images/massdrop-ergo.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After some investigation, I decided I could build something very similar without the kit.&lt;/p&gt;
&lt;h2&gt;Ordering the Parts&lt;/h2&gt;
&lt;p&gt;There are a few major things that you need to build an ErgoDox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Printed circuit boards (PCB)&lt;/li&gt;
&lt;li&gt;Teensy controller&lt;/li&gt;
&lt;li&gt;Keyswitches&lt;/li&gt;
&lt;li&gt;Key caps&lt;/li&gt;
&lt;li&gt;A bunch of little electronic components&lt;/li&gt;
&lt;li&gt;A case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I obtained the PCB, Teensy, and keyswitches from &lt;a href=&quot;http://mechanicalkeyboards.com/&quot;&gt;Mechanical Keyboards&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I managed to pick up &lt;a href=&quot;http://ergodox.org/Hardware.aspx&quot;&gt;all the little electronic components&lt;/a&gt; from &lt;a href=&quot;http://www.digikey.com/&quot;&gt;DigiKey&lt;/a&gt;, except for the &lt;a href=&quot;http://www.digikey.com/product-detail/en/SJ-43514/CP-43514-ND/368146&quot;&gt;TRRS connectors&lt;/a&gt; which are currently unavailable.  The TRRS connectors are the headphone-style jacks that are used to connect the two halves.  I decided to not use TRRS and to just solder basic wires directly onto the board.&lt;/p&gt;
&lt;p&gt;The PCBs were \$38, the keyswitches were \$49, the Teensy was \$22 (but can be bought for less), and the rest of the components came out to about \$20.  This \$129 covers everything needed except for the case and the keycaps.  For reference, the Massdrop group buy is \$199 for everything excluding the keycaps, so I had roughly $70 to spend on the case before it would have made financial sense to wait for another group buy opportunity.&lt;/p&gt;
&lt;h2&gt;Making the Case&lt;/h2&gt;
&lt;p&gt;There are really two options for making a case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;3-D printing&lt;/li&gt;
&lt;li&gt;Laser cut acrylic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://www.shapeways.com/shops/Dox&quot;&gt;The designs for the case are available on Shapeways&lt;/a&gt;, but it comes out to almost \$200, even when choosing the least expensive options for everything!  I considered printing it myself on the Makerbots at my office, but I was skeptical that the older models we have would result in acceptable quality.&lt;/p&gt;
&lt;p&gt;Laser cutting the acrylic seemed like the way to go, so I picked up 5 12&quot;x12&quot; sheets of 3mm opaque white acrylic from &lt;a href=&quot;http://canalplastic.com/&quot;&gt;Canal Plastics&lt;/a&gt; for \$7 a sheet.  They can be ordered from Amazon for basically the same price.  The design used in Massdrop's kit uses 3mm sheets for the top and bottom and 5mm sheets for the middle 3 layers, but I believed (hoped!) that I could make it all fit in a slimmer case.&lt;/p&gt;
&lt;p&gt;I had never laser cut anything before, but my coworker &lt;a href=&quot;http://trmm.net/Main_Page&quot;&gt;Trammell&lt;/a&gt; has a ton of experience with it and helped me out.  He's a member at &lt;a href=&quot;http://www.nycresistor.com/&quot;&gt;NYC Resistor&lt;/a&gt; and they have a &lt;a href=&quot;http://www.nycresistor.com/laser/&quot;&gt;laser&lt;/a&gt;!  We used Inkscape to generate PDFs and then used his &lt;a href=&quot;http://trmm.net/Category:Laser_cutter#Command_line_laser_cutting&quot;&gt;command line laser cutting tool&lt;/a&gt; to send them over to the Epilog laser cutter.  We were able to get 2 layers out of each sheet, as you can see in these action shots:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Laser action shot 1&quot; src=&quot;/images/laser1.jpg&quot; /&gt;
&lt;img alt=&quot;Laser action shot 3&quot; src=&quot;/images/laser3.jpg&quot; /&gt;
&lt;img alt=&quot;Laser action shot 2&quot; src=&quot;/images/laser2.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And the final result:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Final cut&quot; src=&quot;/images/case.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It took just under 27 minutes of actual laser time, which at \$0.75/min came out to \$20.  \$55 for the case was a lot more than I expected, but it still kept the cost below \$199.  It seems like this is the part that would offer the most savings if done as part of a group buy.&lt;/p&gt;
&lt;h2&gt;Keycaps&lt;/h2&gt;
&lt;p&gt;Massdrop usually offers &lt;a href=&quot;https://www.massdrop.com/buy/ergodox-keycap/talk&quot;&gt;a separate group buy of PBT DCS keycaps&lt;/a&gt; when they offer the full kit.  I decided to try using standard keycaps and to buy the missing ones separately.  This was a big mistake.  A proper set of keycaps for the ErgoDox requires 12 1.5x keycaps, which are way too expensive when bought separately.  Only later did I discover that the &lt;a href=&quot;http://keyshop.pimpmykeyboard.com/product/dsa-pbt-blank-sets&quot;&gt;Pimp My Keyboard shop has PBT DCA blank sets for the ErgoDox&lt;/a&gt; for $43.&lt;/p&gt;
&lt;p&gt;I got my keycaps from &lt;a href=&quot;http://www.wasdkeyboards.com/index.php/&quot;&gt;WASD Keyboards&lt;/a&gt;.  They have a &lt;a href=&quot;http://www.wasdkeyboards.com/index.php/products/keycap-set/87-key-cherry-mx-keycap-set.html&quot;&gt;pretty slick keycap designer&lt;/a&gt;.  I used it with my kids and we came up with a design they were happy with (my 3 year-old is currently obsessed with rainbows):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Rainbow keys&quot; src=&quot;/images/keys.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I decided to take advantage of their ability to print whichever letters I want on each key to make this be the &lt;a href=&quot;http://colemak.com/&quot;&gt;Colemak layout&lt;/a&gt;.  I've got the layout commited to muscle memory, but sometimes my kids want to type on my keyboard and it's annoying to switch to QWERTY so the keys match the letters printed on them.&lt;/p&gt;
&lt;h2&gt;Putting It Together&lt;/h2&gt;
&lt;p&gt;I did the actual soldering and assembly in the Hackerlab at &lt;a href=&quot;http://www.twosigma.com&quot;&gt;my office&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;TS Hackerspace&quot; src=&quot;/images/hackerspace.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To put it together, I mostly followed &lt;a href=&quot;https://www.massdrop.com/ext/ergodox/assembly&quot;&gt;Massdrop's assembly instructions&lt;/a&gt;.  I did a decent job soldering (it's almost 400 solder points), but I wish that I had watched the &lt;a href=&quot;http://t.co/jIltwbHDhQ&quot;&gt;EEVblog videos on soldering&lt;/a&gt; beforehand.  That guy knows what he's talking about.&lt;/p&gt;
&lt;p&gt;Because I used 3mm sheets instead of the recommended 5mm, there wasn't a lot of clearance and I had to get creative.  The keyswitches stuck out a little too far on the bottom of the PCBs, so I used flush cutters to trim the leads and the plastic nubs:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;flush pcb&quot; src=&quot;/images/flush-pcb.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Originally, I used the recommended header pins to connect the Teensy to the PCB, but that brought the USB connector too high and prevented the top layer from fitting.  Instead, Trammell suggested I mount it directly on the PCB.  Desoldering the Teensy was really, really hard.  The throughholes are tiny and there are so many of them!  I ended up using the Dremel to clear some space around it and then used the cutting wheel to slice the header pins.  Unfortunately, I got the angle wrong one time and took out a nice chunk of the Teensy's bottom:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Busted teensy&quot; src=&quot;/images/busted-teensy.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I got a replacement Teensy.  With some electrical tape on the bottom, I put it directly on the PCB which got me the clearance I needed:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Surface mounted teensy&quot; src=&quot;/images/sm-teensy.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The mini-USB port on the back is about 5mm tall, so it also prevented the layers from fitting together nicely.  I remedied that by dremeling a little into the 4th layer.  It's not beautiful, but it's in the back and it's good enough.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Mini USB&quot; src=&quot;/images/mini-usb.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The Massdrop kit includes metal screws and nuts that are seriously sharp and will gouge the surface you put the ErgoDox on:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Massdrop screws&quot; src=&quot;/images/massdrop-screws.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I decided to go with &lt;a href=&quot;http://www.amazon.com/gp/product/B000NHTPKQ/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000NHTPKQ&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;white nylon flat-head screws&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/gp/product/B00FLM2WBC/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00FLM2WBC&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;nuts&lt;/a&gt; for both aesthetics and the safety of my desk:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B000NHTPKQ/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000NHTPKQ&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;&lt;img alt=&quot;Flat-head screw&quot; src=&quot;/images/screw.jpg&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.amazon.com/gp/product/B00FLM2WBC/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00FLM2WBC&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;&lt;img alt=&quot;White nylon nut&quot; src=&quot;/images/nut.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Dremel came in handy again for making countersinks and for shortening the screws:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Countersink&quot; src=&quot;/images/countersink.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;with screw&quot; src=&quot;/images/countersink-with-screw.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;trimmed nut&quot; src=&quot;/images/trimmed-nut.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The only other deviation from the original design was that I didn't use the audio jack style connector.  This was motivated by the fact that Digikey didn't have it in stock and that the jack would be too tall for the 3mm sheets.  I just soldered the wires directly onto the PCB:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;wires on pcb&quot; src=&quot;/images/wires-on-pcb.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;wires out the back&quot; src=&quot;/images/wires-out-back.jpg&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Programming the Teensy&lt;/h2&gt;
&lt;p&gt;I used the most excellent &lt;a href=&quot;https://www.massdrop.com/ext/ergodox&quot;&gt;ErgoDox Layout Configurator provided by Massdrop&lt;/a&gt; to make my own modified layout that matches what I use on my Kinesis Advantage.  It was pretty straightforward.  I made one of the inner 1.5x keys switch to a QWERTY layer as a courtesy to anyone else who wants to try it out.&lt;/p&gt;
&lt;h2&gt;Final Product&lt;/h2&gt;
&lt;p&gt;Here's how it came out:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Final build&quot; src=&quot;/images/final-build.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Next to Massdrop's&quot; src=&quot;/images/right-zoom.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Side-by-side comparison with one of my coworkers' build of Massdrop's kit with the palm rest:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Next to Massdrop's&quot; src=&quot;/images/side-by-side.jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And here you can see just how much thinner the case is with all 3mm sheets:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Next to Massdrop's&quot; src=&quot;/images/height-comparison.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The keycaps I used were taller than the &lt;a href=&quot;https://www.massdrop.com/buy/ergodox-keycap/talk&quot;&gt;PBT DCS ones sold by Massdrop&lt;/a&gt;, so it ended up being close to the same height.&lt;/p&gt;
&lt;h2&gt;Review and Next Steps&lt;/h2&gt;
&lt;p&gt;The design and build were fun, but the real test is actually typing on it.  Like the Kinesis Advantage and Truly Ergonomic, the ErgoDox features a columnar layout with staggered keys, which is much more comfortable for me than the traditional layout.  Unfortunately, the PCB is flat and I find it to be less comfortable than the Kinesis's bowl shape.  It's hard to manufacture curved or flexible PCBs, so it's understandable that this DIY project wouldn't require it.&lt;/p&gt;
&lt;p&gt;A common complaint about the ErgoDox is that the thumb clusters are too close to the other keys.  This turned out to be a real problem for me as it requires a serious contortion for me to his the top keys of the thumb cluster.  On the Kinesis, I have these mapped to the oft used &lt;code&gt;Ctrl&lt;/code&gt; and &lt;code&gt;Alt&lt;/code&gt; keys.  It was so bad that I ended up having to remap the bottom corner keys to &lt;code&gt;Ctrl&lt;/code&gt; and &lt;code&gt;Alt&lt;/code&gt; and relegate the top 2 keys to less used ones.  I'm not the only one who has struggled with this and the best solution I've seen so far is &lt;a href=&quot;http://geekhack.org/index.php?topic=44940.0&quot;&gt;AcidFire's Grand Piano design&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekhack.org/index.php?topic=44940.0&quot;&gt;&lt;img alt=&quot;Grand Ergo&quot; src=&quot;/images/grand-ergo.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another issue is that I chose the wrong keyswitches.  My primary keyboard is the &lt;a href=&quot;http://www.amazon.com/gp/product/B00IA6RDVK/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00IA6RDVK&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;Kinesis Advantage LF&lt;/a&gt;, which uses Cherry MX reds.  I love them, but they are really hard to find at a reasonable price.  I wasn't about to spend $160 on the keyswitches, so I opted for Cherry MX blacks.  They are linear feel like the reds, but much stiffer, with an activation force of 60cN instead of 45cN.  This didn't seem like a big deal when I tried it out with individual switches from a sampler set, but it was a whole other experience when trying to type on a full set.  It's much harder to type on and I could feel my fingers straining very quickly.&lt;/p&gt;
&lt;p&gt;The last issue is that the ErgoDox really need to be tented at an angle for maximum comfort.  My plan was to use this as an ergonomic solution while traveling and I have some designs that would make it easy to attach to my laptop in a tented position.  Something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;tented on laptop&quot; src=&quot;/images/tented-laptop.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I decided to hold off on this until I have a solution for the other issues I listed.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, this was an incredibly fun project and I learned a ton about how keyboards are made.  For anyone who's waiting for the next Massdrop group buy of a kit, you should know that it can be done by yourself for about the same price if you can get access to a laser cutter or CNC mill to make the case.  I'm sure someone can be more creative and come up with an even more accessible solution.&lt;/p&gt;
&lt;p&gt;Unfortunately, I'm not thrilled with the actual typing experience, so I can't recommend it over the Kinesis Advantage.  Some people love it, so try it out for yourself if you can or at least print out a stencil of it before committing.&lt;/p&gt;
&lt;p&gt;My plan is to take what I've learned and to try and build something that's an even better fit for my travel usage.  Hopefully I can procure some Cherry reds for a reasonable price in the future...&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Where LISP Fits</title>
    <link href="http://adereth.github.io/blog/2014/02/03/where-lisp-fits/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/02/03/where-lisp-fits/</id>
    <updated>2014-02-03T00:00:00Z</updated>
    <published>2014-02-03T00:00:00Z</published>
    <content type="html">&lt;p&gt;There are a lot of great essays about the power and joy of LISP.  I had read a bunch of them, but none convinced me to actually put the energy in to make it over those parentheses-shaped speed bumps.  A part of me always wanted to, mostly because I'm convinced that our inevitable robot overlords will have to be programs that write programs and everything I had heard made me think that this would likely be done in a LISP.  It just makes sense to be prepared.&lt;/p&gt;
&lt;p&gt;Almost two years ago, a coworker showed me some gorgeous code that used Clojure's &lt;a href=&quot;http://clojuredocs.org/clojure_core/clojure.core/-%3E&quot;&gt;thrush macro&lt;/a&gt; and I fell in love.  I found myself jonesing for &lt;code&gt;C-x C-e&lt;/code&gt; whenever I tried going back to Java.  I devoured &lt;a href=&quot;http://www.amazon.com/gp/product/1934356867/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1934356867&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;Programming Clojure&lt;/a&gt;, then &lt;a href=&quot;http://www.amazon.com/gp/product/1935182641/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1935182641&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;The Joy of Clojure&lt;/a&gt;.  In search of a purer hit, I turned to the source: &lt;a href=&quot;http://www-formal.stanford.edu/jmc/recursive.pdf&quot;&gt;McCarthy's original paper on LISP&lt;/a&gt;.  After reading it, I realized what someone could have told me that would have convinced me to invest the time 12 years earlier.&lt;/p&gt;
&lt;p&gt;There's a lot of interesting stuff in that paper, but what really struck me was that it felt like it fit into a theoretical framework that I thought I already knew reasonably well.  This post isn't about the power of LISP, which has been covered by others better than I could.  Rather, it's about where LISP fits in the world of computation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;None of what I'm about to say is novel or rigorous.  I'm pretty sure that all the novel and rigorous stuff around this topic is 50 - 75 years old, but I just wasn't exposed to it as directly as I'm going to try and lay out.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;The Automaton Model of Computation&lt;/h2&gt;
&lt;p&gt;One of my favorite classes in school was &lt;a href=&quot;http://www.cs.cmu.edu/~lblum/flac/index.htm&quot;&gt;15-453: Formal Languages, Automata, and Computation&lt;/a&gt;, which used &lt;a href=&quot;http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=113318779X&amp;amp;linkCode=as2&amp;amp;tag=adereth-20&quot;&gt;Sipser's Introduction to the Theory of Computation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=113318779X&amp;linkCode=as2&amp;tag=adereth-20&quot;&gt;&lt;img src=&quot;/images/sipser.jpg&quot; width=&quot;250&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One aspect that I really enjoyed was that there was a narrative; we started with Finite State Automata (FSA), analyzed the additional power of Pushdown Automata (PDA), and saw it culminate in Turing Machines (TM).  Each of these models look very similar and have a natural connection: &lt;em&gt;they are each just state machines with different types of external memory.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The tape in the Turing Machine can be viewed as two stacks, with one stack representing everything to the left of the current position and the other stack as the current position and everything to the right.  With this model, we can view the computational hierarchy (FSA -&amp;gt; PDA -&amp;gt; TM) as just state machines with 0, 1, or 2 stacks.  I think it's quite an elegant representation and it makes the progression seem quite natural.&lt;/p&gt;
&lt;p&gt;A key insight along the journey is that these machines are equivalent in power to other useful systems.  A sizable section in the chapter on Finite State Automata is dedicated to their equivalence with Regular Expressions (RegEx).  Context Free Grammars (CFG) are actually introduced &lt;em&gt;before&lt;/em&gt; Pushdown Automata.  But when we get to Turing Machines, there's nothing but a couple paragraphs in a section called &quot;Equivalence with Other Models&quot;, which says: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many [languages], such as Pascal and LISP, look quite different from one another in style and structure.  Can some algorithm be programmed in one of them and not the others?  Of course not -- we can compile LISP into Pascal and Pascal into LISP, which means that the two languages describe &lt;em&gt;exactly&lt;/em&gt; the same class of algorithms.  So do all other reasonable programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The book and class leave it at that and proceed onto the limits of computability, which is the real point of the material.  But there's a natural question that isn't presented in the book and which I never thought to ask:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
Finite State Automata &lt;i class=&quot;fa fa-arrows-h&quot;&gt;&lt;/i&gt; Regular Expressions&lt;br&gt;
Pushdown Automata &lt;i class=&quot;fa fa-arrows-h&quot;&gt;&lt;/i&gt; Context Free Grammars&lt;br&gt;
Turing Machines &lt;i class=&quot;fa fa-arrows-h&quot;&gt;&lt;/i&gt; ?
&lt;/center&gt;
&lt;br&gt;
While we know that there are many models that equal Turing Machines, we could also construct other models that equal FSAs or PDAs.  Why are RegExs and CFGs used as the parallel models of computation?  With the machine model, we were able to just add a stack to move up at each level - is there a natural connection between RegExs and CFGs that we extrapolate to find their next level that is Turing equivalent?&lt;/p&gt;
&lt;h2&gt;The Chomsky-Schützenberger Hierarchy&lt;/h2&gt;
&lt;p&gt;It turns out that the answers to these questions were well covered in the 1950's by the &lt;a href=&quot;http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy&quot;&gt;Chomsky-Schützenberger Hierarchy of Formal Grammars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The left-hand side of the relations above are the automaton-based models and the right-hand side are the language-based models.  The language models are all implemented as production rules, where some symbols are converted to other symbols.  The different levels of computation just have different restrictions on what kind of replacements rules are allowed.&lt;/p&gt;
&lt;p&gt;For instance RegExs are all rules of the form $A \to a$ and $A \to aB$, where the uppercase letters are &lt;a href=&quot;http://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols&quot;&gt;non-terminal symbols&lt;/a&gt; and the lowercase are terminal.  In CFGs, some of the restrictions on the right-hand side are lifted.  Allowing terminals to appear on the left-hand side lets us make rules that are conditional on what has already been replaced, which appropriately gets called &quot;Context Sensitive Grammars.&quot;  Finally, when all the rules are lifted, we get Recursively Enumerable languages, which are Turing equivalent.  The &lt;a href=&quot;http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy&quot;&gt;Wikipedia page&lt;/a&gt; for the hierarchy and the respective levels is a good source for learning more.&lt;/p&gt;
&lt;p&gt;When you look at the definition of LISP in McCarthy's paper, it's much closer to being an applied version of Chomsky's style than Turing's.  This isn't surprising, given that they were contemporaries at MIT.  In McCarthy's &lt;a href=&quot;http://www-formal.stanford.edu/jmc/history/lisp/node3.html#SECTION00030000000000000000&quot;&gt;History of Lisp&lt;/a&gt;, he expicitly states that making a usable version of this other side was his goal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These simplifications made LISP into a way of describing computable functions much neater than the Turing machines or the general recursive definitions used in recursive function theory.  The fact that Turing machines constitute an awkward programming language doesn't much bother recursive function theorists, because they almost never have any reason to write particular recursive definitions, since the theory concerns recursive functions in general.  They often have reason to prove that recursive functions with specific properties exist, but this can be done by an informal argument without having to write them down explicitly.  In the early days of computing, some people developed programming languages based on Turing machines; perhaps it seemed more scientific.  Anyway, I decided to write a paper describing LISP both as a programming language and as a formalism for doing recursive function theory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here we have it straight from the source.  McCarthy was trying to capture the power of recursive definitions in a usable form.  Just like the automata theorists, once the linguists theorist hit Turing completeness, they focused on the limits instead of the usage.&lt;/p&gt;
&lt;p&gt;Theoreticians are more interested in the equality of the systems than the usability, but as practitioners we know that it matters that some problems are more readily solvable in different representations.  Sometimes it's more appropriate to use a RegEx and sometimes an FSA is better suited, even though you could apply either.  While nobody is busting out the Turing Machine to tackle real-world problems, some of our languages are more influenced by one side or the other.&lt;/p&gt;
&lt;h2&gt;Turing Machines Considered Harmful&lt;/h2&gt;
&lt;p&gt;If you track back the imperative/functional divide to Turing Machines and Chomsky's forms, some of the roots are showing.  Turing Machines are conducive to a couple things that are considered harmful in larger systems: GOTO-based&lt;sup&gt;&lt;a href=&quot;http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and mutation-centric&lt;sup&gt;&lt;a href=&quot;https://www.google.com/search?q=mutable+state+considered+harmful&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; thinking.  In a lot of cases, we're finding that the languages influenced by the language-side are better suited for our problems.  Paul Graham &lt;a href=&quot;http://www.paulgraham.com/diff.html&quot;&gt;argues&lt;/a&gt; that the popular languages have been steadily evolving towards the LISPy side.&lt;/p&gt;
&lt;p&gt;Anyway, this is a connection that I wish I had been shown at the peak of my interest in automata theory because it would have gotten me a lot more excited about LISP sooner.  I think it's interesting to look at LISP as something that has the same theoretical underpinnings as these other tools (RegEx and CFG) that we already acknowledged as vital.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;http://jliszka.github.io/&quot;&gt;Jason Liszka&lt;/a&gt; and my colleagues at &lt;a href=&quot;http://www.twosigma.com&quot;&gt;Two Sigma&lt;/a&gt; for help with this post!&lt;/em&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Every project.clj</title>
    <link href="http://adereth.github.io/blog/2014/01/20/every-project-dot-clj/" rel="alternate"/>
    <id>http://adereth.github.io/blog/2014/01/20/every-project-dot-clj/</id>
    <updated>2014-01-20T00:00:00Z</updated>
    <published>2014-01-20T00:00:00Z</published>
    <content type="html">&lt;p&gt;I was recently looking for an interesting relational dataset for another project and the idea of using the dependencies for every Clojure project on GitHub came up.  It turns out that it's possible to download almost every project.clj using &lt;a href=&quot;https://github.com/Raynes/tentacles&quot;&gt;Tentacles&lt;/a&gt;, so I decided to...&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Image&quot; src=&quot;/images/download-all.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The most annoying part was dealing with GitHub's rate limits, but after waiting a few hours I had them all on local disk and was able to play around.  I haven't gotten to dig into the data for the actual project I'm doing, but there were a couple simple queries that I thought were worth sharing.&lt;/p&gt;
&lt;h2&gt;Most frequently included packages&lt;/h2&gt;
&lt;p&gt;I was able to download 10770 project.clj files.  Here are the 50 most frequently included packages listed in their &lt;code&gt;:dependencies&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dependency&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/clojure-contrib&lt;/td&gt;
&lt;td&gt;1524&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compojure&lt;/td&gt;
&lt;td&gt;1348&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hiccup&lt;/td&gt;
&lt;td&gt;743&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clj-http&lt;/td&gt;
&lt;td&gt;738&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring/ring-jetty-adapter&lt;/td&gt;
&lt;td&gt;607&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cheshire&lt;/td&gt;
&lt;td&gt;558&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/data.json&lt;/td&gt;
&lt;td&gt;552&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clj-time&lt;/td&gt;
&lt;td&gt;526&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/tools.logging&lt;/td&gt;
&lt;td&gt;490&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enlive&lt;/td&gt;
&lt;td&gt;444&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;noir&lt;/td&gt;
&lt;td&gt;388&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring/ring-core&lt;/td&gt;
&lt;td&gt;375&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring&lt;/td&gt;
&lt;td&gt;361&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/tools.cli&lt;/td&gt;
&lt;td&gt;348&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/java.jdbc&lt;/td&gt;
&lt;td&gt;344&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/clojurescript&lt;/td&gt;
&lt;td&gt;339&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/core.async&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;midje&lt;/td&gt;
&lt;td&gt;227&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/math.numeric-tower&lt;/td&gt;
&lt;td&gt;219&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;korma&lt;/td&gt;
&lt;td&gt;206&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;incanter&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seesaw&lt;/td&gt;
&lt;td&gt;195&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overtone&lt;/td&gt;
&lt;td&gt;172&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slingshot&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quil&lt;/td&gt;
&lt;td&gt;158&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.taoensso/timbre&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http-kit&lt;/td&gt;
&lt;td&gt;149&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring/ring-devel&lt;/td&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/math.combinatorics&lt;/td&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/core.logic&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;environ&lt;/td&gt;
&lt;td&gt;132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aleph&lt;/td&gt;
&lt;td&gt;132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log4j&lt;/td&gt;
&lt;td&gt;131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ch.qos.logback/logback-classic&lt;/td&gt;
&lt;td&gt;125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/tools.nrepl&lt;/td&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;congomongo&lt;/td&gt;
&lt;td&gt;124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.datomic/datomic-free&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.novemberain/monger&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib-noir&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/core.match&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring/ring-json&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clojure&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/data.xml&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log4j/log4j&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mysql/mysql-connector-java&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postgresql/postgresql&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/data.csv&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/tools.trace&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.clojure/tools.namespace&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ring-server&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I think it makes a nice hit-list of projects to check out!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A couple interesting things jumped out at me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;12.5% of Clojure projects on GitHub are using Compojure.  Impressive.&lt;/li&gt;
&lt;li&gt;congomongo, com.novemberain/monger, com.datomic/datomic-free, mysql/mysql-connector-java, and postgresql/postgresql are all clustered together in the low 100's.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Most frequently applied licenses&lt;/h2&gt;
&lt;p&gt;Just over half of the project.clj's don't contain a &lt;code&gt;:license&lt;/code&gt;.  Here are the most popular:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EPL&lt;/td&gt;
&lt;td&gt;4430&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIT&lt;/td&gt;
&lt;td&gt;336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BSD&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPL&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LGPL&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WTFPL&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AGPL&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mozilla&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The EPL's dominance doesn't come as a surprise, given Clojure's use of it for the core libraries.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;23 projects have &quot;WTF&quot; or &quot;fuck&quot; in their license string:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;License&lt;/th&gt;
&lt;th&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WTFPL&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Do What The Fuck You Want To Public License&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All Rights Reserved Muthafucka&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I'd like to share a mirror of just the project.clj files wrapped up in a single download, but I want to be conscientious of the variety of licenses.  I'll clean up the code for pulling and summarizing all this data soon so others can play with it.  In the meantime, feel free to suggest other analyses that could be done on these...&lt;/p&gt;</content>
  </entry>
</feed>
