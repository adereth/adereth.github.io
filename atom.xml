<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[adereth]]></title>
  <link href="http://adereth.github.io/atom.xml" rel="self"/>
  <link href="http://adereth.github.io/"/>
  <updated>2014-11-09T19:56:10-08:00</updated>
  <id>http://adereth.github.io/</id>
  <author>
    <name><![CDATA[Matt Adereth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Silverman's Mode Estimation Method Explained]]></title>
    <link href="http://adereth.github.io/blog/2014/10/12/silvermans-mode-detection-method-explained/"/>
    <updated>2014-10-12T12:51:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/10/12/silvermans-mode-detection-method-explained</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>


<div>
  <style type="text/css">

     .chart {
       font-size: 10px;
       margin-top: -40px;
     }

     .point {
       fill: steelblue;
       fill-opacity: 0.5;
       stroke: black;
       stroke-width: 1
       stroke-opacity: 0.5;
     }

     .axis path, .axis line {
       fill: none;
       stroke: #000;
       shape-rendering: crispEdges;
     }

     .area {
       fill: steelblue;
       fill-opacity: 0.25;
       stroke: #000;
       stroke-opacity: 0.5;
     }

     .summedarea {
       fill: steelblue;
       fill-opacity: 0.75;
       stroke: #000;
       stroke-opacity: 0.5;
     }

    .bar rect {
        fill: steelblue;
        fill-opacity: 0.75;
        shape-rendering: crispEdges;
        stroke: #000;
        stroke-opacity: 0.5;

    }

    .bar text {
        fill: #fff;
    }


  </style>
</div>




<!-- Global Variables and Handlers: -->


<script type="text/javascript">

  var margin = {top: 50, right: 40, bottom: 40, left: 60},
      width = $('.entry-content').width();

  $(window).resize(function() {
    width = $('.entry-content').width();
  });

  function drawPoints(data, chart, height) {

    $(chart).empty();

    var x = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.value}) + 5])
        .range([0, width - margin.left - margin.right]);

    var y = d3.scale.ordinal()
        .domain(d3.range(data.length))
        .rangeRoundBands([height - margin.top - margin.bottom, 0], 0.2);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .tickPadding(8)
    .ticks(8);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickPadding(8)
        .tickSize(0);

    var svg = d3.select(chart).append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('class', 'chart')
          .append('g')
        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    svg.selectAll('.chart')
        .data(data)
        .enter().append('circle')
        .attr('class', 'point')
        .attr('cx', function(d, i) { return x(d.value) })
        .attr('cy', 0)
        .attr('r', 3);

    svg.append('g')
        .attr('class', 'x axis')
        .call(xAxis);

  }

  function drawPointsWithResize(data, chart, height) {
    drawPoints(data, chart, height);
    $(window).resize(function() {drawPoints(data, chart, height); })
  };


     function drawOverlappingDistributions(data, chart, height) {

       $(chart).empty();

       var x = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.value}) + 5])
                       .range([0, width - margin.left - margin.right]);

       var y = d3.scale.linear()
                       .domain([0, 0.5])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var line = d3.svg.line()
                        .x(function(d) {return x(d.q)})
                        .y(function(d) {return y(d.p)})

       var scale = 1 / Math.sqrt(2 * Math.PI);
       function gaussian(x, mean, sigma) {
         var z = (x - mean) / sigma;
         return scale * Math.exp(-0.5 * z * z) / sigma;
       };

       function subpoints(d) {
         return d3.range(d.value - 4, d.value + 4, 0.1).map(
           function (d2,i,a) {
             return {value: d2, height: gaussian(d2, d.value, 1)};
           });
       }

       data.forEach(function(d) {

         var area = d3.svg.area()
                          .interpolate("monotone")
                          .x(function(d) { return x(d.value); })
                          .y0(y(0))
                          .y1(function(d) { return y(d.height); });

         svg.append('path')
            .attr('class', 'area')
            .attr("d", area(subpoints(d)))
       });

       svg.selectAll('.chart')
          .data(data)
          .enter().append('circle')
          .attr('class', 'point')
          .attr('cx', function(d, i) { return x(d.value) })
          .attr('cy', y(0))
          .attr('r', 3);

       svg.append('g')
          .attr('class', 'x axis')
          .attr("transform", "translate(0," + (height - margin.top - margin.bottom) + ")")
          .call(xAxis);

     }

     function drawOverlappingDistributionsWithResize(data, chart, height) {
       drawOverlappingDistributions(data, chart, height);
       $(window).resize(function() {drawOverlappingDistributions(data, chart, height); })
     };


     function drawSummedDistributions(data, chart, height, stddev) {

       $(chart).empty();

       var scale = 1 / Math.sqrt(2 * Math.PI);
       function gaussian(x, mean, sigma) {
         var z = (x - mean) / sigma;
         return scale * Math.exp(-0.5 * z * z) / sigma;
       };

       var points = d3.range(0, 30, 0.01).concat(data.map(function(x) {return x.value}))
       .sort(function(a,b){return a-b})
                      .map(
         function (x,i,a) {
           var y = 0;
           data.forEach(function(d) {
             y += gaussian(x, d.value, stddev)
           });
           return {value: x, height: y};
         }

       );



       var x = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.value}) + 5])
                       .range([0, width - margin.left - margin.right]);

       var y = d3.scale.linear()
                       .domain([0, d3.max(points, function(d) { return d.height})])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var line = d3.svg.line()
                        .x(function(d) {return x(d.q)})
                        .y(function(d) {return y(d.p)})

       var area = d3.svg.area()
                        .interpolate("monotone")
                        .x(function(d) { return x(d.value); })
                        .y0(y(0))
                        .y1(function(d) { return y(d.height); });

       svg.append('path')
          .attr('class', 'summedarea')
          .attr("d", area(points))

       svg.selectAll('.chart')
          .data(data)
          .enter().append('circle')
          .attr('class', 'point')
          .attr('cx', function(d, i) { return x(d.value) })
          .attr('cy', y(0))
          .attr('r', 3);


       svg.append('g')
          .attr('class', 'x axis')
          .attr("transform", "translate(0," + (height - margin.top - margin.bottom) + ")")
          .call(xAxis);

     }



     function drawSummedDistributionsWithResize(data, chart, height, stddev) {
       drawSummedDistributions(data, chart, height, stddev);
       $(window).resize(function() {drawSummedDistributions(data, chart, height, stddev); })
     };

     function drawHistogram(data, chart, height) {

       $(chart).empty();

       var x = d3.scale.linear()
                       .domain([0, 11])
                       .range([0, width - margin.left - margin.right]);

       var data = d3.layout.histogram()
                           .bins(x.ticks(10))(data);

       var y = d3.scale.linear()
                       .domain([0, d3.max(data, function(d) { return d.y; })])
                       .range([height - margin.top - margin.bottom, 0]);

       var xAxis = d3.svg.axis()
                         .scale(x)
                         .orient('bottom')
                         .tickPadding(8)
                         .ticks(8);

       var yAxis = d3.svg.axis()
                         .scale(y)
                         .orient('left')
                         .tickPadding(8)
                         .tickSize(0);

       var svg = d3.select(chart).append('svg')
                   .attr('width', width)
                   .attr('height', height)
                   .attr('class', 'chart')
                   .append('g')
                   .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

       var bar = svg.selectAll(".bar")
                    .data(data)
                    .enter().append("g")
                    .attr("class", "bar")
                    .attr("transform", function(d) { return "translate(" + x(d.x - 0.5) + "," + y(d.y) + ")"; });

       bar.append("rect")
          .attr("width", x(data[0].dx) - 3)
          .attr("height", function(d) {
            console.log(d + " " + y(d.y));
            return height - y(d.y) - margin.bottom - margin.top; });

       svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + (height - margin.top - margin.bottom) + ")")
          .call(xAxis);

       svg.append("g")
          .attr("class", "y axis")
          .call(yAxis);


     }

     function drawHistogramWithResize(data, chart, height) {
       drawHistogram(data, chart, height);
       $(window).resize(function() {drawHistogram(data, chart, height); })
     };


</script>


<p>I started digging into the history of mode detection after watching <a href="http://aysy.lu/">Aysylu Greenberg</a>&rsquo;s <a href="http://youtu.be/XmImGiVuJno">Strange Loop talk on benchmarking</a>.  She pointed out that the usual benchmarking statistics fail to capture that our timings may actually be samples from multiple distributions, commonly caused by the fact that our systems are comprised of hierarchical caches.</p>

<p>I thought it would be useful to add the detection of this to my favorite benchmarking tool, <a href="http://hugoduncan.org/">Hugo Duncan</a>&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium</a>.  Not surprisingly, Hugo had already considered this and there&rsquo;s a note under the TODO section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Multimodal distribution detection.
</span><span class='line'>Use kernel density estimators?</span></code></pre></td></tr></table></div></figure>


<p>I hadn&rsquo;t heard of using kernel density estimation for multimodal distribution detection so I found the original paper, <a href="http://www.stat.washington.edu/wxs/Stat593-s03/Literature/silverman-81a.pdf">Using Kernel Density Estimates to Investigate Multimodality (Silverman, 1981)</a>.  The original paper is a dense 3 pages and my goal with this post is to restate Silverman&rsquo;s method in a more accessible way.  Please excuse anything that seems overly obvious or pedantic and feel encouraged to suggest any modifications that would make it clearer.</p>

<h2>What is a mode?</h2>

<p>The mode of a distribution is the value that has the highest probability of being observed.  Many of us were first exposed to the concept of a mode in a discrete setting.  We have a bunch of observations and the mode is just the observation value that occurs most frequently.  It&rsquo;s an elementary exercise in counting.  Unfortunately, this method of counting doesn&rsquo;t transfer well to observations sampled from a continuous distribution because we don&rsquo;t expect to ever observe the exact some value twice.</p>

<p>What we&rsquo;re really doing when we count the observations in the discrete case is estimating the <a href="http://en.wikipedia.org/wiki/Probability_density_function">probability density function</a> (PDF) of the underlying distribution.  The value that has the highest probability of being observed is the one that is the global maximum of the PDF.  Looking at it this way, we can see that a necessary step for determining the mode in the continuous case is to first estimate the PDF of the underlying distribution.  We&rsquo;ll come back to how Silverman does this with a technique called kernel density estimation later.</p>

<h2>What does it mean to be multimodal?</h2>

<p>In the discrete case, we can see that there might be undeniable multiple modes because the counts for two elements might be the same.  For instance, if we observe:</p>

<p>$$1,2,2,2,3,4,4,4,5$$</p>

<p>Both 2 and 4 occur thrice, so we have no choice but to say they are both modes.  But perhaps we observe something like this:</p>

<p>$$1,1,1,2,2,2,2,3,3,3,4,9,10,10$$</p>

<p>The value 2 occurs more than anything else, so it&rsquo;s <em>the</em> mode.  But let&rsquo;s look at the histogram:</p>

<div id='hist'></div>


<script type='text/javascript'>
drawHistogramWithResize([1,1,1,2,2,2,2,3,3,3,4,9,10,10], '#hist', 300);
</script>


<p>That pair of 10&rsquo;s are out there looking awfully interesting.  If these were benchmark timings, we might suspect there&rsquo;s a significant fraction of calls that go down some different execution path or fall back to a slower level of the cache hierarchy.  Counting alone isn&rsquo;t going to reveal the 10&rsquo;s because there are even more 1&rsquo;s and 3&rsquo;s.  Since they&rsquo;re nestled up right next to the 2&rsquo;s, we probably will assume that they are just part of the expected variance in performance of the same path that caused all those 2&rsquo;s.  <em>What we&rsquo;re really interested in is the local maxima of the PDF because they are the ones that indicate that our underlying distribution may actually be a mixture of several distributions.</em></p>

<h2>Kernel density estimation</h2>

<p>Imagine that we make 20 observations and see that they are distributed like this:</p>

<div id='chart-1'></div>


<script type='text/javascript'>

  var data = [
{value: 13.1138}, {value: 10.6519}, {value: 20.5735}, {value: 7.89327}, {value: 9.02554}, {value: 20.8411}, {value: 8.84072}, {value: 10.6273}, {value: 13.5194}, {value: 17.9757}, {value: 10.1086}, {value: 8.68131}, {value: 7.16192}, {value: 19.9496}, {value: 8.77111}, {value: 19.5314}, {value: 9.40915}, {value: 12.8664}, {value: 23.1322}, {value: 13.5008}];
  drawPointsWithResize(data, '#chart-1', 90);
</script>


<p>We can estimate the underlying PDF by using what is called a <a href="http://en.wikipedia.org/wiki/Kernel_density_estimation">kernel density estimate</a>.  We replace each observation with some distribution, called the &ldquo;kernel,&rdquo; centered at the point.  Here&rsquo;s what it would look like using a normal distribution with standard deviation 1:</p>

<div id='chart-2'></div>


<script type='text/javascript'>
    drawOverlappingDistributionsWithResize(data, '#chart-2', 200);
</script>


<p>If we sum up all these overlapping distributions, we get a reasonable estimate for the underlying continuous PDF:</p>

<div id='chart-3'></div>


<script type='text/javascript'>
     drawSummedDistributionsWithResize(data, '#chart-3', 300, 1);
</script>


<p>Note that we made two interesting assumptions here:</p>

<ol>
<li><p>We replaced each point with a normal distribution.  Silverman&rsquo;s approach actually relies on some of the nice mathematical properties of the normal distribution, so that&rsquo;s what we use.</p></li>
<li><p>We used a standard deviation of 1.  Each normal distribution is wholly specified by a mean and a standard deviation.  The mean is the observation we are replacing, but we had to pick some arbitrary standard deviation which defined the width of the kernel.</p></li>
</ol>


<p>In the case of the normal distribution, we could just vary the standard deviation to adjust the width, but there is a more general way of stretching the kernel for arbitrary distributions.  The kernel density estimate for observations $X_1,X_2,&hellip;,X_n$ using a kernel function $K$ is:</p>

<p>$$\hat{f}(x)=\frac{1}{n}\sum\limits_{i=1}^n K(x-X_i)$$</p>

<p>In our case above, $K$ is the PDF for the normal distribution with standard deviation 1.  We can stretch the kernel by a factor of $h$ like this:</p>

<p>$$\hat{f}(x, h)=\frac{1}{nh}\sum\limits_{i=1}^n K(\frac{x-X_i}{h})$$</p>

<p>Note that changing $h$ has the exact same effect as changing the standard deviation: it makes the kernel wider and shorter while maintaining an area of 1 under the curve.</p>

<h2>Different kernel widths result in different mode counts</h2>

<p>The width of the kernel is effectively a smoothing factor.  If we choose too large of a width, we just end up with one giant mound that is almost a perfect normal distribution.  Here&rsquo;s what it looks like if we use $h=5$:</p>

<div id='chart-4'></div>


<script type='text/javascript'>
     drawSummedDistributionsWithResize(data, '#chart-4', 300, 5);
</script>


<p>Clearly, this has a single maxima.</p>

<p>If we choose too small of a width, we get a very spiky and over-fit estimate of the PDF.  Here&rsquo;s what it looks like with $h = 0.1$:</p>

<div id='chart-5'></div>


<script type='text/javascript'>
drawSummedDistributionsWithResize(data, '#chart-5', 300, 0.1);
</script>


<p>This PDF has a bunch of local maxima.  If we shrink the width small enough, we&rsquo;ll get $n$ maxima, where $n$ is the number of observations:</p>

<div id='chart-6'></div>


<script type='text/javascript'>
drawSummedDistributionsWithResize(data, '#chart-6', 300, 0.005);
</script>


<p>The neat thing about using the normal distribution as our kernel is that it has the property that shrinking the width will only introduce new local maxima.  Silverman gives a proof of this at the end of Section 2 in the original paper.  This means that for every integer $k$, where $1&lt;k&lt;n$, we can find the minimum width $h_k$ such that the kernel density estimate has at most $k$ maxima.  Silverman calls these $h_k$ values &ldquo;critical widths.&rdquo;</p>

<h2>Finding the critical widths</h2>

<p>To actually find the critical widths, we need to look at the formula for the kernel density estimate.  The PDF for a plain old normal distribution with mean $\mu$ and standard deviation $\sigma$ is:</p>

<p>$$f(x)=\frac{1}{\sigma\sqrt{2\pi}}\mathrm{e}^{&ndash;\frac{(x-\mu)^2}{2\sigma^2}}$$</p>

<p>The kernel density estimate with standard deviation $\sigma=1$ for observations $X_1,X_2,&hellip;,X_n$ and width $h$ is:</p>

<p>$$\hat{f}(x,h)=\frac{1}{nh}\sum\limits_{i=1}^n \frac{1}{\sqrt{2\pi}}\mathrm{e}^{&ndash;\frac{(x-X_i)^2}{2h^2}}$$</p>

<p>For a given $h$, you can find all the local maxima of $\hat{f}$ using your favorite numerical methods.  Now we need to find the $h_k$ where new local maxima are introduced.  Because of a result that Silverman proved at the end of section 2 in the paper, we know we can use a binary search over a range of $h$ values to find the critical widths at which new maxima show up.</p>

<h2>Picking which kernel width to use</h2>

<p>This is the part of the original paper that I found to be the least clear.  It&rsquo;s pretty dense and makes a number of vague references to the application of techniques from other papers.</p>

<p>We now have a kernel density estimate of the PDF for each number of modes between $1$ and $n$.  For each estimate, we&rsquo;re going to use a statistical test to determine the significance.  We want to be parsimonious in our claims that there are additional modes, so we pick the smallest $k$ such that the significance measure of $h_k$ meets some threshold.</p>

<p><a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)">Bootstrapping</a> is used to evaluate the accuracy of a statistical measure by computing that statistic on observations that are <a href="http://en.wikipedia.org/wiki/Resampling_(statistics)">resampled</a> from the original set of observations.</p>

<p>Silverman used a <a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)#Smooth_bootstrap">smoothed bootstrap procedure</a> to evaluate the significance.  Smoothed bootstrapping is bootstrapping with some noise added to the resampled observations.  First, we sample from the original set of observations, with replacement, to get $X_I(i)$.  Then we add noise to get our smoothed $y_i$ values:</p>

<p>$$y_i=\frac{1}{\sqrt{1+h_k^2/\sigma^2}}(X_{I(i)}+h_k \epsilon_i)$$</p>

<p>Where $\sigma$ is the standard deviation of $X_1,X_2,&hellip;,X_n$, $h_k$ is the critical width we are testing, and $\epsilon_i$ is a random value sampled from a normal distribution with mean 0 and standard deviation 1.</p>

<p>Once we have these smoothed values, we compute the kernel density estimate of them using $h_k$ and count the modes.  If this kernel density estimate doesn&rsquo;t have more than $k$ modes, we take that as a sign that we have a good critical width.  We repeat this many times and use the fraction of simulations where we didn&rsquo;t find more than $k$ modes as the p-value.  In the paper, Silverman does 100 rounds of simulation.</p>

<h2>Conclusion</h2>

<p>Silverman&rsquo;s technique was a really important early step in multimodality detection and it has been thoroughly investigated and improved upon since 1981.  Google Scholar lists <a href="http://scholar.google.com/scholar?espv=2&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.77161500,d.cGE&amp;ion=1&amp;biw=1680&amp;bih=938&amp;dpr=2&amp;um=1&amp;ie=UTF-8&amp;lr=&amp;cites=18163244822709704741">about 670 citations of this paper</a>.  If you&rsquo;re interested in learning more, one paper I found particularly helpful was <a href="http://www3.stat.sinica.edu.tw/statistica/oldpdf/A11n28.pdf">On the Calibration of Silverman&rsquo;s Test for Multimodality (Hall &amp; York, 2001)</a>.</p>

<p>One of the biggest weaknesses in Silverman&rsquo;s technique is that the critical width is a global parameter, so it may run into trouble if our underlying distribution is a mixture of low and high variance component distributions.  For an actual implementation of mode detection in a benchmarking package, I&rsquo;d consider using something that doesn&rsquo;t have this issue, like the technique described in <a href="http://private.igf.edu.pl/~jnn/Literatura_tematu/Minnotte_1997.pdf">Nonparametric Testing of the Existence of Modes (Minnotte, 1997)</a>.</p>

<p>I hope this is correct and helpful.  If I misinterpreted anything in the original paper, please let me know.  Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computing the Remedian in Clojure]]></title>
    <link href="http://adereth.github.io/blog/2014/09/29/computing-the-remedian-in-clojure/"/>
    <updated>2014-09-29T09:03:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/09/29/computing-the-remedian-in-clojure</id>
    <content type="html"><![CDATA[<p>The remedian is an approximation of the <a href="http://en.wikipedia.org/wiki/Median">median</a> that can be computed using only $O(\log{n})$ storage.  The algorithm was originally presented in <a href="http://web.ipac.caltech.edu/staff/fmasci/home/statistics_refs/Remedian.pdf">The Remedian: A Robust Averaging Method for Large Data Sets by Rousseeuw and Bassett</a> (1990).  The core of it is on the first page:</p>

<blockquote><p>Let us assume that $n = b^k$, where $b$ and $k$ are integers (the case where $n$ is not of this form will be treated in Sec. 7.  The <em>remedian</em> with base $b$ proceeds by computing medians of groups of $b$ observations, yielding $b^{k-1}$ estimates on which this procedure is iterated, and so on, until only a single estimate remains.  When implemented properly, this method merely needs $k$ arrays of size $b$ that are continuously reused.</p></blockquote>

<p>The implementation of this part in Clojure is so nice that I just had to share.</p>

<p>First, we need a vanilla implementation of the median function.  We&rsquo;re always going to be computing the median of sets of size $b$, where $b$ is relatively small, so there&rsquo;s no need to get fancy with a linear time algorithm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">median</span> <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">size</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">sorted</span> <span class="p">(</span><span class="nb">sort </span><span class="nv">coll</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">odd?</span> <span class="nv">size</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">nth </span><span class="nv">sorted</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">size</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">nth </span><span class="nv">sorted</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">size</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">nth </span><span class="nv">sorted</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">size</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>         <span class="mi">2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can implement the actual algorithm.  We group, compute the median of each group, and recur, with the base case being when we&rsquo;re left with a single element in the collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">remedian</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">next </span><span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">coll</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">partition-all</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">map </span><span class="nv">median</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">recur</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">first </span><span class="nv">coll</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because <code>partition-all</code> and <code>map</code> both operate on and return lazy sequences, we maintain the property of only using $O(b \log_{b}{n})$ memory at any point in time.</p>

<p>While this implementation is simple and elegant, it only works if the size of the collection is a power of $b$.  If we don&rsquo;t have $n = b^k$ where $b$ and $k$ are integers, we&rsquo;ll over-weight the observations that get grouped into the last groups of size $&lt; b$.</p>

<p>Section 7 of the original paper describes the weighting scheme you should use to compute the median if you&rsquo;re left with incomplete groupings:</p>

<blockquote><p>How should we proceed when the sample size $n$ is less than $b^k$? The remedian algorithm then ends up with $n_1$ numbers in the first array, $n_2$ numbers in the second array, and $n_k$ numbers in the last array, such that $n = n_1 + n_{2}b + &hellip; + n_k b^{k-1}$.  For our final estimate we then compute a weighted median in which the $n_1$, numbers in the first array have weight 1, the $n_2$ numbers in the second array have weight $b$, and the $n_k$ numbers in the last array have weight $b^{k-1}$. This final computation does not need much storage because there are fewer than $bk$ numbers and they only have to be ranked in increasing order, after which their weights must be added until the sum is at least $n/2$.</p></blockquote>

<p>It&rsquo;s a bit difficult to directly translate this to the recursive solution I gave above because in the final step we&rsquo;re going to do a computation on a mixture of values from the different recursive sequences.  Let&rsquo;s give it a shot.</p>

<p>We need some way of bubbling up the incomplete groups for the final weighted median computation.  Instead of having each recursive sequence <em>always</em> compute the median of each group, we can add a check to see if the group is smaller than $b$ and, if so, just return the incomplete group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">remedian-with-leftovers</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">incomplete-group?</span> <span class="o">#</span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">count </span><span class="nv">%</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>                               <span class="p">(</span><span class="nb">seq? </span><span class="p">(</span><span class="nb">last </span><span class="nv">%</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">coll</span> <span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">next </span><span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">coll</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">partition-all</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">incomplete-group?</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">%</span> <span class="p">(</span><span class="nf">median</span> <span class="nv">%</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">recur</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">coll</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, if we were using the mutable array implementation proposed in the original paper to compute the remedian of <code>(range 26)</code> with $b = 3$, the final state of the arrays would be:</p>

<table>
<thead>
<tr>
<th>Array  </th>
<th> $i_0$ </th>
<th> $i_1$   </th>
<th> $i_2$</th>
</tr>
</thead>
<tbody>
<tr>
<td>0      </td>
<td> 24 </td>
<td> 25 </td>
<td> <em>empty</em></td>
</tr>
<tr>
<td>1      </td>
<td> 19 </td>
<td> 22 </td>
<td> <em>empty</em></td>
</tr>
<tr>
<td>2      </td>
<td> 4  </td>
<td> 13 </td>
<td> <em>empty</em></td>
</tr>
</tbody>
</table>


<br/>


<p>In our sequence based solution, the final sequence will be <code>((4 13 (19 22 (24 25))))</code>.</p>

<p>Now, we need to convert these nested sequences into <code>[value weight]</code> pairs that could be fed into a weighted median function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">weight-leftovers</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">nested-elements</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">vw-pairs</span> <span class="p">[]</span>
</span><span class='line'>         <span class="nv">nested-elements</span> <span class="nv">nested-elements</span>
</span><span class='line'>         <span class="nv">weight</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">element</span> <span class="p">(</span><span class="nb">first </span><span class="nv">nested-elements</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">next </span><span class="nv">nested-elements</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">vw-pairs</span> <span class="p">[</span><span class="nv">element</span> <span class="nv">weight</span><span class="p">])</span>
</span><span class='line'>                                     <span class="p">(</span><span class="nb">next </span><span class="nv">nested-elements</span><span class="p">)</span>
</span><span class='line'>                                     <span class="nv">weight</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">seq? </span><span class="nv">element</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">vw-pairs</span>
</span><span class='line'>                             <span class="nv">element</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">/ </span><span class="nv">weight</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'>       <span class="ss">:else</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">vw-pairs</span> <span class="p">[</span><span class="nv">element</span> <span class="nv">weight</span><span class="p">])))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of weighting the values in array $j$ with weight $b^{j-1}$, we&rsquo;re weighting it at $\frac{b^{j-1}}{b^{k}}$.  Dividing all the weights by a constant will give us the same result and this is slightly easier to compute recursively, as we can just start at 1 and divide by $b$ as we descend into each nested sequence.</p>

<p>If we run this on the <code>(range 26)</code> with $b = 3$, we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">remedian-with-leftovers</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">weight-leftovers</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">[[</span><span class="mi">4</span> <span class="mi">1</span><span class="nv">/3</span><span class="p">]</span> <span class="p">[</span><span class="mi">13</span> <span class="mi">1</span><span class="nv">/3</span><span class="p">]</span> <span class="p">[</span><span class="mi">19</span> <span class="mi">1</span><span class="nv">/9</span><span class="p">]</span> <span class="p">[</span><span class="mi">22</span> <span class="mi">1</span><span class="nv">/9</span><span class="p">]</span> <span class="p">[</span><span class="mi">24</span> <span class="mi">1</span><span class="nv">/27</span><span class="p">]</span> <span class="p">[</span><span class="mi">25</span> <span class="mi">1</span><span class="nv">/27</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we&rsquo;re going to need a weighted median function.  This operates on a collection of <code>[value weight]</code> pairs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">weighted-median</span> <span class="p">[</span><span class="nv">vw-pairs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">total-weight</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">vw-pairs</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">map </span><span class="nv">second</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">middle-weight</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">total-weight</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">sorted-pairs</span> <span class="p">(</span><span class="nb">sort-by first </span><span class="nv">vw-pairs</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">sorted-pairs-cum-weight</span> <span class="p">(</span><span class="nf">reductions</span> <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">_</span> <span class="nv">cum-weight</span><span class="p">]</span> <span class="p">[</span><span class="nv">v</span> <span class="nv">w</span><span class="p">]]</span>
</span><span class='line'>                                              <span class="p">[</span><span class="nv">v</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">cum-weight</span> <span class="nv">w</span><span class="p">)])</span>
</span><span class='line'>                                            <span class="nv">sorted-pairs</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">sorted-pairs-cum-weight</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">middle-weight</span> <span class="p">(</span><span class="nb">second </span><span class="nv">%</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">ffirst</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can put it all together and redefine the remedian function to deal with the case where $n$ isn&rsquo;t a power of $b$:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">remedian</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">coll</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">remedian-with-leftovers</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">weight-leftovers</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">weighted-median</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The remedian is fun, but in practice I prefer to use the approximate quantile methods that were invented a few years later and presented in <a href="http://www.cs.umd.edu/~samir/498/manku.pdf">Approximate Medians and other Quantiles in One Pass and with Limited Memory by Manku, Rajagopalan, and Lindsay</a> (1998).  There&rsquo;s a high-quality implementation you can use in Clojure via Java interop in Parallel Colt&rsquo;s <a href="http://incanter.org/docs/parallelcolt/api/cern/jet/stat/tdouble/quantile/DoubleQuantileFinderFactory.html">DoubleQuantileFinderFactory</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typing Qwerty on a Dvorak Keyboard]]></title>
    <link href="http://adereth.github.io/blog/2014/08/14/typing-qwerty-on-a-dvorak-keyboard/"/>
    <updated>2014-08-14T18:40:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/08/14/typing-qwerty-on-a-dvorak-keyboard</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/thattommyhall">@thattommyhall</a> posted a fun question on Twitter:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>If you type your name on a keyboard marked as qwerty but set to Dvorak and keep reinputting what comes out, will it ever say your name?</p>&mdash; !!!!!11111oneoneone (@thattommyhall) <a href="https://twitter.com/thattommyhall/statuses/494916131598393344">July 31, 2014</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The best answer was &ldquo;yes because group theory&rdquo; and <a href="https://twitter.com/AnnaPawlicka">@AnnaPawlicka</a> demonstrated it was true for her name:</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/thattommyhall">@thattommyhall</a> Yes. I can confirm that. :) <a href="http://t.co/Vubkf1ltoK">pic.twitter.com/Vubkf1ltoK</a></p>&mdash; Anna Pawlicka (@AnnaPawlicka) <a href="https://twitter.com/AnnaPawlicka/statuses/494918999747350529">July 31, 2014</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>But is it really true?  And if so, how many iterations will it take to get the target string?  I turned to Mathematica&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">qwerty</span> <span class="nv">=</span>
</span><span class='line'>  <span class="p">{</span><span class="s">&quot;-&quot;</span>, <span class="s">&quot;=&quot;</span>,
</span><span class='line'>   <span class="s">&quot;q&quot;</span>, <span class="s">&quot;w&quot;</span>, <span class="s">&quot;e&quot;</span>, <span class="s">&quot;r&quot;</span>, <span class="s">&quot;t&quot;</span>, <span class="s">&quot;y&quot;</span>, <span class="s">&quot;u&quot;</span>, <span class="s">&quot;i&quot;</span>, <span class="s">&quot;o&quot;</span>, <span class="s">&quot;p&quot;</span>, <span class="s">&quot;[&quot;</span>, <span class="s">&quot;]&quot;</span>, <span class="s">&quot;\\&quot;</span>,
</span><span class='line'>   <span class="s">&quot;a&quot;</span>, <span class="s">&quot;s&quot;</span>, <span class="s">&quot;d&quot;</span>, <span class="s">&quot;f&quot;</span>, <span class="s">&quot;g&quot;</span>, <span class="s">&quot;h&quot;</span>, <span class="s">&quot;j&quot;</span>, <span class="s">&quot;k&quot;</span>, <span class="s">&quot;l&quot;</span>, <span class="s">&quot;;&quot;</span>, <span class="s">&quot;&#39;&quot;</span>,
</span><span class='line'>   <span class="s">&quot;z&quot;</span>, <span class="s">&quot;x&quot;</span>, <span class="s">&quot;c&quot;</span>, <span class="s">&quot;v&quot;</span>, <span class="s">&quot;b&quot;</span>, <span class="s">&quot;n&quot;</span>, <span class="s">&quot;m&quot;</span>, <span class="s">&quot;,&quot;</span>, <span class="s">&quot;.&quot;</span>, <span class="s">&quot;/&quot;</span><span class="p">}</span><span class="c1">;</span>
</span><span class='line'><span class="nv">dvorak</span> <span class="nv">=</span>
</span><span class='line'>  <span class="p">{</span><span class="s">&quot;[&quot;</span>, <span class="s">&quot;]&quot;</span>,
</span><span class='line'>   <span class="s">&quot;&#39;&quot;</span>, <span class="s">&quot;,&quot;</span>, <span class="s">&quot;.&quot;</span>, <span class="s">&quot;p&quot;</span>, <span class="s">&quot;y&quot;</span>, <span class="s">&quot;f&quot;</span>, <span class="s">&quot;g&quot;</span>, <span class="s">&quot;c&quot;</span>, <span class="s">&quot;r&quot;</span>, <span class="s">&quot;l&quot;</span>, <span class="s">&quot;/&quot;</span>, <span class="s">&quot;=&quot;</span>, <span class="s">&quot;\\&quot;</span>,
</span><span class='line'>   <span class="s">&quot;a&quot;</span>, <span class="s">&quot;o&quot;</span>, <span class="s">&quot;e&quot;</span>, <span class="s">&quot;u&quot;</span>, <span class="s">&quot;i&quot;</span>, <span class="s">&quot;d&quot;</span>, <span class="s">&quot;h&quot;</span>, <span class="s">&quot;t&quot;</span>, <span class="s">&quot;n&quot;</span>, <span class="s">&quot;s&quot;</span>, <span class="s">&quot;-&quot;</span>,
</span><span class='line'>   <span class="s">&quot;;&quot;</span>, <span class="s">&quot;q&quot;</span>, <span class="s">&quot;j&quot;</span>, <span class="s">&quot;k&quot;</span>, <span class="s">&quot;x&quot;</span>, <span class="s">&quot;b&quot;</span>, <span class="s">&quot;m&quot;</span>, <span class="s">&quot;w&quot;</span>, <span class="s">&quot;v&quot;</span>, <span class="s">&quot;z&quot;</span><span class="p">}</span><span class="c1">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">from_</span>, <span class="nv">to_</span><span class="p">]</span> <span class="ss">:=</span>
</span><span class='line'> <span class="nv">Graph</span><span class="p">[</span>
</span><span class='line'>  <span class="nv">MapThread</span><span class="p">[</span><span class="o">#</span><span class="mi">1</span> <span class="nb">-&gt; </span><span class="o">#</span><span class="mi">2</span> <span class="o">&amp;</span>, <span class="p">{</span><span class="nv">from</span>, <span class="nv">to</span><span class="p">}]</span>,
</span><span class='line'>  <span class="nv">VertexLabels</span> <span class="nb">-&gt; </span><span class="s">&quot;Name&quot;</span>, <span class="nv">DirectedEdges</span> <span class="nb">-&gt; </span><span class="nv">True</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to visualize the mapping of keys from one layout to another:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">dvorak</span>, <span class="nv">qwerty</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://adereth.github.io/images/dvorak-qwerty.png" alt="Dvorak to Qwerty Graph" /></p>

<p>There is a single directed edge going from each character to the one that will be displayed when you type it.  There are 3 keys that remain unchanged, 2 pairs of swapped keys, and 2 large cycles of keys.</p>

<p>We can get these groups programmatically using the <a href="http://reference.wolfram.com/mathematica/ref/ConnectedComponents.html">ConnectedComponents function</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">TableForm</span> <span class="err">@</span>
</span><span class='line'> <span class="nv">Sort</span> <span class="err">@</span>
</span><span class='line'>  <span class="nv">ConnectedComponents</span> <span class="err">@</span>
</span><span class='line'>   <span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">dvorak</span>, <span class="nv">qwerty</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\
</span><span class='line'>a
</span><span class='line'>m
</span><span class='line'>] =
</span><span class='line'>, w
</span><span class='line'>. e y t f g u c i d h j k v
</span><span class='line'>[ - &#39; q p r o l / s n ; z x b
</span></code></pre></td></tr></table></div></figure>


<p>It will take the length of the cycle the letter is in to get the letter we want.  For a given word, we won&rsquo;t get all the letters we want unless we&rsquo;ve iterated some multiple of the length of the cycles each letter is in.  Let&rsquo;s apply the Least Common Multiple function to see the worst case where there is a letter from each cycle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">LCM</span> <span class="err">@@</span>
</span><span class='line'> <span class="nv">Length</span> <span class="nv">/</span><span class="err">@</span>
</span><span class='line'>  <span class="nv">ConnectedComponents</span> <span class="err">@</span>
</span><span class='line'>   <span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">dvorak</span>, <span class="nv">qwerty</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>210
</span></code></pre></td></tr></table></div></figure>


<p>Looks like Anna got lucky that her name only consists of letters in a cycle of length 1 and 15.</p>

<p>For fun, here&rsquo;s the graph we get if we use Colemak instead of Dvorak:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">colemak</span> <span class="nv">=</span>
</span><span class='line'>  <span class="p">{</span><span class="s">&quot;-&quot;</span>, <span class="s">&quot;=&quot;</span>,
</span><span class='line'>   <span class="s">&quot;q&quot;</span>, <span class="s">&quot;w&quot;</span>, <span class="s">&quot;f&quot;</span>, <span class="s">&quot;p&quot;</span>, <span class="s">&quot;g&quot;</span>, <span class="s">&quot;j&quot;</span>, <span class="s">&quot;l&quot;</span>, <span class="s">&quot;u&quot;</span>, <span class="s">&quot;y&quot;</span>, <span class="s">&quot;;&quot;</span>, <span class="s">&quot;[&quot;</span>, <span class="s">&quot;]&quot;</span>, <span class="s">&quot;\\&quot;</span>,
</span><span class='line'>   <span class="s">&quot;a&quot;</span>, <span class="s">&quot;r&quot;</span>, <span class="s">&quot;s&quot;</span>, <span class="s">&quot;t&quot;</span>, <span class="s">&quot;d&quot;</span>, <span class="s">&quot;h&quot;</span>, <span class="s">&quot;n&quot;</span>, <span class="s">&quot;e&quot;</span>, <span class="s">&quot;i&quot;</span>, <span class="s">&quot;o&quot;</span>, <span class="s">&quot;&#39;&quot;</span>,
</span><span class='line'>   <span class="s">&quot;z&quot;</span>, <span class="s">&quot;x&quot;</span>, <span class="s">&quot;c&quot;</span>, <span class="s">&quot;v&quot;</span>, <span class="s">&quot;b&quot;</span>, <span class="s">&quot;k&quot;</span>, <span class="s">&quot;m&quot;</span>, <span class="s">&quot;,&quot;</span>, <span class="s">&quot;.&quot;</span>, <span class="s">&quot;/&quot;</span><span class="p">}</span><span class="c1">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">colemak</span>, <span class="nv">qwerty</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://adereth.github.io/images/colemak-qwerty.png" alt="Colemak to Qwerty Graph" /></p>

<p>One cycle of length 14, one cycle of length 3, and the rest are just letters that map back to themselves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">LCM</span> <span class="err">@@</span>
</span><span class='line'> <span class="nv">Length</span> <span class="nv">/</span><span class="err">@</span>
</span><span class='line'>  <span class="nv">ConnectedComponents</span> <span class="err">@</span>
</span><span class='line'>   <span class="nv">KeyGraph</span><span class="p">[</span><span class="nv">colemak</span>, <span class="nv">qwerty</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>42
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Clojure Evaluation Keybindings in Emacs]]></title>
    <link href="http://adereth.github.io/blog/2014/05/29/custom-clojure-evaluation-keybindings-in-emacs/"/>
    <updated>2014-05-29T06:28:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/05/29/custom-clojure-evaluation-keybindings-in-emacs</id>
    <content type="html"><![CDATA[<p>I love <a href="http://blog.jayfields.com/2014/01/repl-driven-development.html">REPL Driven Development</a>.  My style is to write expressions directly in the file that I&rsquo;m working on and to use <code>C-x C-e</code> to view the value of the last command in the minibuffer.</p>

<p>Being able to move my cursor to a sub-expression and see the value of that expression immediately feels like a superpower.  I love this ability and it&rsquo;s one of the things that keeps me locked into Clojure+Emacs as my preferred enviroment.</p>

<p>This power can be taken to the next level by making custom evaluation commands that run whatever you want on the expression at your cursor.</p>

<h2>The Basic Pattern</h2>

<p>Let&rsquo;s start by looking at the Elisp that defines <code>cider-eval-last-sexp</code>, which is what gets invoked when we press <code>C-x C-e</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">cider-eval-last-sexp</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">optional</span> <span class="nv">prefix</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Evaluate the expression preceding point.</span>
</span><span class='line'><span class="s">If invoked with a PREFIX argument, print the result in the current buffer.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span> <span class="s">&quot;P&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="nv">prefix</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">cider-interactive-eval-print</span> <span class="p">(</span><span class="nf">cider-last-sexp</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cider-interactive-eval</span> <span class="p">(</span><span class="nf">cider-last-sexp</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part is that we can use <code>cider-last-sexp</code> to get the expression before the cursor as a string and we can evaluate a string by passing it to <code>cider-interactive-eval</code>.  We&rsquo;ll write some basic Elisp to make a new function that modifies the string before evaluation and then we&rsquo;ll bind this function to a new key sequence.</p>

<p>The essential pattern we&rsquo;ll use is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">custom-eval-last-sexp</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;(require &#39;some-namespace)</span>
</span><span class='line'><span class="s">             (some-namespace/some-fn %s)&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cider-last-sexp</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="ss">&#39;custom-eval-last-sexp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you happen to still be using Swank or nrepl.el, you should use <code>swank-interactive-eval</code> and <code>swank-last-sexp</code> or <code>swank-interactive-eval</code> and <code>nrepl-last-sexp</code>.</p>

<p>Let&rsquo;s look at some of the useful things we can do with this&hellip;</p>

<h2>Collections</h2>

<p>I frequently deal with collections that are too big to display nicely in the minibuffer.  It&rsquo;s nice to be able to explore them with a couple keystrokes.  Here&rsquo;s a simple application of the pattern that gives us the size of the collection by just hitting <code>C-c c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">count-last-expression</span> <span class="p">()</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;(count %s)&quot;</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">cider-last-expression</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c c&quot;</span><span class="p">)</span> <span class="ss">&#39;count-last-expression</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another useful one is to just show the nth value.  This one is a little more interesting because it requires a parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">nth-from-last-expression</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">interactive</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;(nth %s %s)&quot;</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">cider-last-expression</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c n&quot;</span><span class="p">)</span> <span class="o">`</span><span class="nv">nth-from-last-expression</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you just use <code>C-c n</code>, Emacs defaults the parameter value to 1.  You can pass an argument using <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html">Emacs&#8217; universal argument functionality</a>.  For example, to get the 0<sup>th</sup> element, you could either use <code>C-u 0 C-c n</code> or <code>M-0 C-c n</code>.</p>

<h2>Write to File</h2>

<p>Sometimes the best way to view a value is to look at it in an external program.  I&rsquo;ve used this pattern when working on Clojure code that generates SVG, HTML, and <a href="http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure/">3D models</a>.  Here&rsquo;s what I use for 3D modeling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">spit-scad-last-expression</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span>    
</span><span class='line'>      <span class="s">&quot;(require &#39;scad-clj.scad)</span>
</span><span class='line'><span class="s">       (spit \&quot;eval.scad\&quot; (scad-clj.scad/write-scad %s))&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">cider-last-expression</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c 3&quot;</span><span class="p">)</span> <span class="ss">&#39;spit-scad-last-expression</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This writes the <code>eval.scad</code> file to the root directory of the project.  It&rsquo;s great because OpenSCAD watches open files and automatically refreshes when they change.  You can run this on an expression that defines a shape and immediately see the shape in another window.  I used this technique in <a href="http://www.meetup.com/Clojure-NYC/events/180303582/">my recent presentation on 3D printing at the Clojure NYC meetup</a> and I got feedback that this made the live demos easier to follow.</p>

<p>Here&rsquo;s what it looks like when you <code>C-c 3</code> on a nested expression that defines a cube:</p>

<p><img src="http://adereth.github.io/images/show-scad.png" alt="OpenScad Screenshot" /></p>

<h2>View Swing Components</h2>

<p>If you have to use Swing, your pain can be slightly mitigated by having a quick way to view components.  This will give you a shortcut to pop up a new frame that contains what your expression evaluates to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">frame-last-expression</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span>    
</span><span class='line'>     <span class="s">&quot;(doto (javax.swing.JFrame. \&quot;eval\&quot;)</span>
</span><span class='line'><span class="s">        (.. (getContentPane) (add %s))</span>
</span><span class='line'><span class="s">        (.pack)</span>
</span><span class='line'><span class="s">        (.show))&quot;</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">cider-last-expression</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c f&quot;</span><span class="p">)</span> <span class="ss">&#39;frame-last-expression</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This plays nicely with <a href="https://github.com/daveray/seesaw">Seesaw</a>, but doesn&rsquo;t presume that you have it on your classpath.  Here&rsquo;s what it looks like when you <code>C-c f</code> at the end of an expression that defines a Swing component:</p>

<p><img src="http://adereth.github.io/images/show-frame.png" alt="JFrame Screenshot" /></p>

<h2>Benchmarking with Criterium</h2>

<p>In <a href="http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/">A Few Interesing Clojure Microbenchmarks</a>, I mentioned Hugo Duncan&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium library</a>.  It&rsquo;s a reliable way of measuring the performance of an expression.  We can bring it closer to our fingertips by making a function for benchmarking an expression instead of just evaluating it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">benchmark-last-expression</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cider-interactive-eval</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;(require &#39;criterium.core)</span>
</span><span class='line'><span class="s">             (criterium.core/quick-benchmark %s)&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cider-last-expression</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">cider-mode-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;C-c b&quot;</span><span class="p">)</span> <span class="ss">&#39;benchmark-last-expression</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I find this simple pattern to be quite handy.  Also, when I&rsquo;m showing off the power of nrepl to the uninitiated, being able to invoke arbitrary functions on whatever is at my cursor looks like pure magic.</p>

<p>I hope you find this useful and if you invent any useful bindings or alternative ways of implementing this pattern, please share!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java.awt.Shape's Insidious Insideness]]></title>
    <link href="http://adereth.github.io/blog/2014/04/30/java-dot-awt-dot-shapes-insidious-insideness/"/>
    <updated>2014-04-30T11:41:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/04/30/java-dot-awt-dot-shapes-insidious-insideness</id>
    <content type="html"><![CDATA[<p>I recently added text support to the <a href="https://github.com/farrellm/scad-clj">scad-clj</a> 3D modeling library and encountered an interesting bug:</p>

<p><img src="http://adereth.github.io/images/bad4.png" alt="Poorly rendered 4" /></p>

<p>See that 4?  No hole!  Why?!?  All the other holes are there&hellip;</p>

<h2>Shape Outlines</h2>

<p>First, let&rsquo;s look at how you get the outline of some text in a font in Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">FontRenderContext</span> <span class="n">frc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FontRenderContext</span><span class="o">(</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>        <span class="n">RenderingHints</span><span class="o">.</span><span class="na">VALUE_TEXT_ANTIALIAS_DEFAULT</span><span class="o">,</span>
</span><span class='line'>        <span class="n">RenderingHints</span><span class="o">.</span><span class="na">VALUE_FRACTIONALMETRICS_DEFAULT</span><span class="o">);</span>
</span><span class='line'><span class="n">Font</span> <span class="n">font</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Font</span><span class="o">(</span><span class="s2">&quot;Andale Mono&quot;</span><span class="o">,</span> <span class="n">Font</span><span class="o">.</span><span class="na">PLAIN</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">myText</span> <span class="o">=</span> <span class="s2">&quot;1234567890&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">PathIterator</span> <span class="n">path</span> <span class="o">=</span> <span class="n">font</span>
</span><span class='line'>       <span class="o">.</span><span class="na">createGlyphVector</span><span class="o">(</span><span class="n">frc</span><span class="o">,</span> <span class="n">myText</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">getOutline</span><span class="o">()</span>
</span><span class='line'>       <span class="o">.</span><span class="na">getPathIterator</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="mf">0.01d</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We end up with a <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html"><code>PathIterator</code></a> that traces along the outline of the character.  This code uses the version of <code>getPathIterator</code> that specifies &ldquo;flatness&rdquo;, which means that we get back a path strictly made up of straight line segments that approximate the curves.</p>

<p>Characters that are made from a single filled polygon are relatively easy; there is a single path and the bounded area is what gets filled:</p>

<p><img src="http://adereth.github.io/images/one-path.png" alt="12357" /></p>

<p>The complexity comes when the path crosses over itself or if it is discontinuous and contains multiple outlines:</p>

<p><img src="http://adereth.github.io/images/multiple-parts.png" alt="46890" /></p>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html">JavaDocs for PathIterator</a> explain a bit about how to actually determine what is inside the path.  All of the fill areas are determined using the <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/geom/PathIterator.html#WIND_EVEN_ODD"><code>WIND_EVEN_ODD</code> rule</a>: <em>a point is in the fill area if it is contained by an odd number of paths.</em></p>

<p>For example, the dotted zero is made up of three paths:</p>

<ol>
<li>The outline of the outside of the oval</li>
<li>The outline of the inside of the oval</li>
<li>The outline of the dot</li>
</ol>


<p>The points inside #1 but outside #2 are in 1 area and the points inside #3 are inside 3 areas.</p>

<h2>Counting Areas</h2>

<p>For each path, we need to count how many other paths contain it.  One way is to use <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/geom/Path2D.Double.html"><code>java.awt.geom.Path2D.Double</code></a> to make a Shape and then use the <code>contains(double x, double y)</code> method to see if any of the points from the other paths are in it.</p>

<p>I incorrectly assumed that each Shape contained at least one of the points that define it&rsquo;s outline.  It usually does, which is why all the other holes were properly rendered, but it doesn&rsquo;t for some shapes, including triangles in certain orientations!</p>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/Shape.html">JavaDoc for Shape</a> says that a point is considered to lie inside a Shape if and only if:</p>

<ol>
<li>It lies completely inside the Shape boundary or</li>
<li>It lies exactly on the Shape boundary and the space immediately adjacent to the point in the increasing X direction is entirely inside the boundary or</li>
<li>It lies exactly on a horizontal boundary segment and the space immediately adjacent to the point in the increasing Y direction is inside the boundary.</li>
</ol>


<p>The three points defining the triangle that form the hole in 4 don&rsquo;t meet any of these criteria, so instead of counting as being in 2 paths (itself and the outer outline), it was counted as being in 1.  The fix was to explicitly define a path as containing itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Printing with Clojure]]></title>
    <link href="http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure/"/>
    <updated>2014-04-09T07:02:00-07:00</updated>
    <id>http://adereth.github.io/blog/2014/04/09/3d-printing-with-clojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing some 3D printing for <a href="https://twitter.com/adereth/status/444145229109555200/photo/1">my next keyboard project</a> and I&rsquo;ve got a workflow that I&rsquo;m pretty happy with that I&rsquo;d like to share.</p>

<p>When I first started trying to make models a month ago, I tried <a href="http://www.blender.org/">Blender</a>.  It&rsquo;s an amazing beast, but after a few hours of tutorials it was clear that it would take a while to get proficient with it.  Also, it is really designed for interactive modeling and I need something that I can programmatically tweak.</p>

<h2>OpenSCAD</h2>

<p><img src="http://adereth.github.io/images/openscad.gif" alt="OpenSCAD Screenshot" /></p>

<p>A couple of friends suggested <a href="http://www.openscad.org/">OpenSCAD</a>, which is touted as &ldquo;the programmers&#8217; solid 3D CAD modeler.&rdquo;  It provides a power set of primitive shapes and operations, but the language itself leaves a bit to be desired.  This isn&rsquo;t a beat-up-on-SCAD post, but a few of the things that irked me were:</p>

<ul>
<li>Strange function application syntax (parameters in parens after the function name with an expression or block following the closing paren)</li>
<li>Unclear variable binding rules (multiple passes are made over the code and the results of changing a variable may affect things earlier in the code unexpectedly)</li>
<li>No package/namespace management</li>
<li>Multiple looping constructs that depend on what you are going to do with the results, not on how you want to loop</li>
</ul>


<h2>scad-clj</h2>

<p>Fortunately, <a href="https://github.com/farrellm">Matt Farrell</a> has written <a href="https://github.com/farrellm/scad-clj">scad-clj</a>, an OpenSCAD DSL in Clojure.  It addresses every issue I had with OpenSCAD and lends itself to a really nice workflow with the Clojure REPL.</p>

<p>To get started using it, add the dependency on <a href="https://clojars.org/scad-clj"><code>[scad-clj "0.1.0"]</code></a> to your <code>project.clj</code> and fire up your REPL.</p>

<p>All of the functions for creating 3D models live in the <code>scad-clj.model</code> namespace.  There&rsquo;s no documentation yet, so in the beginning you&rsquo;ll have to look at the <a href="https://github.com/farrellm/scad-clj/blob/master/src/scad_clj/model.clj">source for <code>model.clj</code></a> and occassionally the <a href="http://www.openscad.org/documentation.html">OpenSCAD documentation</a>.  Fortunately, there really isn&rsquo;t much to learn and it&rsquo;s quite a revelation to discover that almost everything you&rsquo;ll want to do can be done with a handful of functions.</p>

<p>Here&rsquo;s a simple model that showcases each of the primitive shapes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">primitives</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">union</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">cube</span> <span class="mi">100</span> <span class="mi">100</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">sphere</span> <span class="mi">110</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">cylinder</span> <span class="mi">10</span> <span class="mi">150</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Evaluating this gives us a data structure that can be converted into an .scad file using <code>scad-clj.scad/write-scad</code> to generate a string and <code>spit</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">spit</span> <span class="s">&quot;post-demo.scad&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">write-scad</span> <span class="nv">primitives</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re going to use OpenSCAD to view the results.  One feature of OpenSCAD that is super useful for this workflow is that it watches opened files and automatically refreshes the rendering when the file is updated.  This means that we can just re-evaluate our Clojure code and see the results immediately in another window:</p>

<p><img src="http://adereth.github.io/images/scad-primitives.png" alt="Primitives Screenshot" /></p>

<p>scad-clj makes all new primitive shapes centered at the origin.  We can use the shape operator functions to move them around and deform them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">primitives</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">union</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">cube</span> <span class="mi">100</span> <span class="mi">100</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">rotate</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">Math/PI</span> <span class="mi">4</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">translate</span> <span class="p">[</span><span class="mi">150</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">sphere</span> <span class="mi">70</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">scale</span> <span class="p">[</span><span class="mi">1</span><span class="nv">/2</span> <span class="mi">1</span><span class="nv">/2</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">translate</span> <span class="p">[</span><span class="mi">-150</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">cylinder</span> <span class="mi">10</span> <span class="mi">160</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://adereth.github.io/images/scad-operators.png" alt="Operator Screenshot" /></p>

<p>I snuck <code>union</code> into those examples.  Shapes can also be combined using <code>intersection</code>, <code>difference</code>, and <code>hull</code>.  It&rsquo;s pretty incredible how much can be done with just these.  For example, here&rsquo;s the latest iteration of my keyboard design built using clj-scad:</p>

<p><img src="http://adereth.github.io/images/scad-keyboard.png" alt="Keyboard" /></p>

<h2>3D Printing</h2>

<p>Once your design is complete, you can use OpenSCAD to export it as an STL file which can then be imported to software like <a href="http://replicat.org/">ReplicatorG</a> or <a href="https://www.makerbot.com/makerware/">Makerware</a> for processing into an .x3g file that can be printed:</p>

<p><img src="http://adereth.github.io/images/printed.JPG" alt="Keyboard" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finishing up the ErgoDox]]></title>
    <link href="http://adereth.github.io/blog/2014/02/27/finishing-up-the-ergodox/"/>
    <updated>2014-02-27T22:43:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/02/27/finishing-up-the-ergodox</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been busy with a few other keyboard projects since <a href="http://adereth.github.io/blog/2014/02/12/building-an-ergodox/">my last post on my ErgoDox build</a>.  While working on those projects, I&rsquo;ve gotten some parts and done a few more tweaks to the ErgoDox that I&rsquo;d like to share.</p>

<h2>PBT DSA Keycaps</h2>

<p>The biggest improvement was switching the keycaps.  Originally I had used keycaps from <a href="http://www.wasdkeyboards.com/index.php/">WASD Keyboards</a> that were designed to be used with a normal keyboard.  Typical keyboards use keycaps that are very similar to DCS profile caps, which have different profiles for different rows:</p>

<p><img src="http://adereth.github.io/images/dcs.jpg" alt="DCS Keycap Profile" /></p>

<p><em>Source: <a href="http://keycapsdirect.com/key-caps.php">Signature Plastics</a></em></p>

<p>In contrast, DSA keycaps have concave spherical tops and are uniform in profile:</p>

<p><img src="http://adereth.github.io/images/dsa.jpg" alt="DSA Keycap Profile" /></p>

<p>I had ordered a set of DSA keycaps from Signature Plastics for another project and decided to try them out on the ErgoDox:</p>

<p><img src="http://adereth.github.io/images/full-ergo-green.jpeg" alt="Full keyboard" /></p>

<p>I was surprised with how much better these felt, particularly on the thumb cluster.  I now realize that a lot of my discomfort reaching the upper keys on the the thumb cluster came from their relatively high profile.</p>

<p>The DSA keycaps are also made out of PBT plastic instead of ABS.  They have a nice textured feel and the plastic is supposed to be much more robust.  As I said in my last post, <a href="http://keyshop.pimpmykeyboard.com/product/dsa-pbt-blank-sets">Pimp My Keyboard shop has PBT DCA blank sets for the ErgoDox</a> for $43, which is a great deal and is definitely the way to go if you&rsquo;re sourcing your own parts.</p>

<h2>TRRS Connector</h2>

<p><a href="http://www.digikey.com/">DigiKey</a> finally got the <a href="http://www.digikey.com/product-detail/en/SJ-43514/CP-43514-ND/368146">TRRS connectors</a> in stock and sent them to me.  I was concerned that they wouldn&rsquo;t fit in my lower profile case, but a little Dremel action made it work:</p>

<p><img src="http://adereth.github.io/images/TRRS.jpeg" alt="TRRS Connector" /></p>

<p>The keyboard didn&rsquo;t work after I added the connector.  It worked fine if I just had the right side plugged in, but as soon as I connected the left side, neither worked.  I took the whole thing apart and used an ohmmeter to test the 4 connections between the two halves.  It turned out that all of the connections were there, but there was a little resistance on one of them.  I resoldered it more thoroughly and everything worked fine.</p>

<h2>Sanding</h2>

<p>Finally, I did a little experimentation with wet sanding the sides to remove some of the burn marks from the paper during the laser cutting and to give a more even finish.  I used 400 grit sandpaper and made a little progress:</p>

<p><img src="http://adereth.github.io/images/corner-zoom.jpeg" alt="corner" /></p>

<p>Acrylic dust is nasty stuff!  It didn&rsquo;t make as much of a difference as I hoped.  I&rsquo;m going to do a little more experimentation sanding with acetone to see if I can melt it smoothly and make the 5 layers of acrylic look like one piece.</p>

<h2>Next Steps</h2>

<p>My next project is going to involve a lot of acrylic bending, so I&rsquo;m probably going to also take a stab at cutting and bending a stand for the ErgoDox that tents it at a better angle.  Any suggestions are appreciated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sourcing and Building an ErgoDox Keyboard]]></title>
    <link href="http://adereth.github.io/blog/2014/02/12/building-an-ergodox/"/>
    <updated>2014-02-12T07:25:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/02/12/building-an-ergodox</id>
    <content type="html"><![CDATA[<p>The <a href="http://ergodox.org/">ErgoDox</a> is a split ergonomic keyboard project.  One of the most notable things about it is that you can&rsquo;t buy this keyboard &mdash; you have to build it yourself!  The <a href="http://ergodox.org/Hardware.aspx">parts list</a> is available on the site, along with the <a href="http://ergodox.org/Downloads.aspx">designs for the PCB and case</a>.</p>

<p>I recently built one, sourcing the parts myself, and I&rsquo;d like to share what I&rsquo;ve learned.</p>

<h2>Reference Build</h2>

<p>The easiest way to build one is to get in on one of the <a href="https://www.massdrop.com/buy/ergodox">group-buys of full kits organized by Massdrop</a>.  Their kits have become the most common build, with options for different style <a href="http://www.keyboardco.com/blog/index.php/2012/12/an-introduction-to-cherry-mx-mechanical-switches/">Cherry keyswitches</a> and either a classic case or one with wrist rests.</p>

<p><a href="https://www.massdrop.com/buy/ergodox"><img src="http://adereth.github.io/images/massdrop-ergo.jpg" alt="Massdrop's ErgoDox" /></a></p>

<p>After some investigation, I decided I could build something very similar without the kit.</p>

<h2>Ordering the Parts</h2>

<p>There are a few major things that you need to build an ErgoDox:</p>

<ul>
<li>Printed circuit boards (PCB)</li>
<li>Teensy controller</li>
<li>Keyswitches</li>
<li>Key caps</li>
<li>A bunch of little electronic components</li>
<li>A case</li>
</ul>


<p>I obtained the PCB, Teensy, and keyswitches from <a href="http://mechanicalkeyboards.com/">Mechanical Keyboards</a>.</p>

<p>I managed to pick up <a href="http://ergodox.org/Hardware.aspx">all the little electronic components</a> from <a href="http://www.digikey.com/">DigiKey</a>, except for the <a href="http://www.digikey.com/product-detail/en/SJ-43514/CP-43514-ND/368146">TRRS connectors</a> which are currently unavailable.  The TRRS connectors are the headphone-style jacks that are used to connect the two halves.  I decided to not use TRRS and to just solder basic wires directly onto the board.</p>

<p>The PCBs were \$38, the keyswitches were \$49, the Teensy was \$22 (but can be bought for less), and the rest of the components came out to about \$20.  This \$129 covers everything needed except for the case and the keycaps.  For reference, the Massdrop group buy is \$199 for everything excluding the keycaps, so I had roughly $70 to spend on the case before it would have made financial sense to wait for another group buy opportunity.</p>

<h2>Making the Case</h2>

<p>There are really two options for making a case:</p>

<ol>
<li>3-D printing</li>
<li>Laser cut acrylic</li>
</ol>


<p><a href="http://www.shapeways.com/shops/Dox">The designs for the case are available on Shapeways</a>, but it comes out to almost \$200, even when choosing the least expensive options for everything!  I considered printing it myself on the Makerbots at my office, but I was skeptical that the older models we have would result in acceptable quality.</p>

<p>Laser cutting the acrylic seemed like the way to go, so I picked up 5 12&#8221;x12&#8221; sheets of 3mm opaque white acrylic from <a href="http://canalplastic.com/">Canal Plastics</a> for \$7 a sheet.  They can be ordered from Amazon for basically the same price.  The design used in Massdrop&rsquo;s kit uses 3mm sheets for the top and bottom and 5mm sheets for the middle 3 layers, but I believed (hoped!) that I could make it all fit in a slimmer case.</p>

<p>I had never laser cut anything before, but my coworker <a href="http://trmm.net/Main_Page">Trammell</a> has a ton of experience with it and helped me out.  He&rsquo;s a member at <a href="http://www.nycresistor.com/">NYC Resistor</a> and they have a <a href="http://www.nycresistor.com/laser/">laser</a>!  We used Inkscape to generate PDFs and then used his <a href="http://trmm.net/Category:Laser_cutter#Command_line_laser_cutting">command line laser cutting tool</a> to send them over to the Epilog laser cutter.  We were able to get 2 layers out of each sheet, as you can see in these action shots:</p>

<p><img src="http://adereth.github.io/images/laser1.jpg" alt="Laser action shot 1" />
<img src="http://adereth.github.io/images/laser3.jpg" alt="Laser action shot 3" />
<img src="http://adereth.github.io/images/laser2.jpg" alt="Laser action shot 2" /></p>

<p>And the final result:</p>

<p><img src="http://adereth.github.io/images/case.jpg" alt="Final cut" /></p>

<p>It took just under 27 minutes of actual laser time, which at \$0.75/min came out to \$20.  \$55 for the case was a lot more than I expected, but it still kept the cost below \$199.  It seems like this is the part that would offer the most savings if done as part of a group buy.</p>

<h2>Keycaps</h2>

<p>Massdrop usually offers <a href="https://www.massdrop.com/buy/ergodox-keycap/talk">a separate group buy of PBT DCS keycaps</a> when they offer the full kit.  I decided to try using standard keycaps and to buy the missing ones separately.  This was a big mistake.  A proper set of keycaps for the ErgoDox requires 12 1.5x keycaps, which are way too expensive when bought separately.  Only later did I discover that the <a href="http://keyshop.pimpmykeyboard.com/product/dsa-pbt-blank-sets">Pimp My Keyboard shop has PBT DCA blank sets for the ErgoDox</a> for $43.</p>

<p>I got my keycaps from <a href="http://www.wasdkeyboards.com/index.php/">WASD Keyboards</a>.  They have a <a href="http://www.wasdkeyboards.com/index.php/products/keycap-set/87-key-cherry-mx-keycap-set.html">pretty slick keycap designer</a>.  I used it with my kids and we came up with a design they were happy with (my 3 year-old is currently obsessed with rainbows):</p>

<p><img src="http://adereth.github.io/images/keys.jpeg" alt="Rainbow keys" /></p>

<p>I decided to take advantage of their ability to print whichever letters I want on each key to make this be the <a href="http://colemak.com/">Colemak layout</a>.  I&rsquo;ve got the layout commited to muscle memory, but sometimes my kids want to type on my keyboard and it&rsquo;s annoying to switch to QWERTY so the keys match the letters printed on them.</p>

<h2>Putting It Together</h2>

<p>I did the actual soldering and assembly in the Hackerlab at <a href="http://www.twosigma.com">my office</a>:</p>

<p><img src="http://adereth.github.io/images/hackerspace.jpg" alt="TS Hackerspace" /></p>

<p>To put it together, I mostly followed <a href="https://www.massdrop.com/ext/ergodox/assembly">Massdrop&rsquo;s assembly instructions</a>.  I did a decent job soldering (it&rsquo;s almost 400 solder points), but I wish that I had watched the <a href="http://t.co/jIltwbHDhQ">EEVblog videos on soldering</a> beforehand.  That guy knows what he&rsquo;s talking about.</p>

<p>Because I used 3mm sheets instead of the recommended 5mm, there wasn&rsquo;t a lot of clearance and I had to get creative.  The keyswitches stuck out a little too far on the bottom of the PCBs, so I used flush cutters to trim the leads and the plastic nubs:</p>

<p><img src="http://adereth.github.io/images/flush-pcb.jpg" alt="flush pcb" /></p>

<p>Originally, I used the recommended header pins to connect the Teensy to the PCB, but that brought the USB connector too high and prevented the top layer from fitting.  Instead, Trammell suggested I mount it directly on the PCB.  Desoldering the Teensy was really, really hard.  The throughholes are tiny and there are so many of them!  I ended up using the Dremel to clear some space around it and then used the cutting wheel to slice the header pins.  Unfortunately, I got the angle wrong one time and took out a nice chunk of the Teensy&rsquo;s bottom:</p>

<p><img src="http://adereth.github.io/images/busted-teensy.jpg" alt="Busted teensy" /></p>

<p>I got a replacement Teensy.  With some electrical tape on the bottom, I put it directly on the PCB which got me the clearance I needed:</p>

<p><img src="http://adereth.github.io/images/sm-teensy.jpg" alt="Surface mounted teensy" /></p>

<p>The mini-USB port on the back is about 5mm tall, so it also prevented the layers from fitting together nicely.  I remedied that by dremeling a little into the 4th layer.  It&rsquo;s not beautiful, but it&rsquo;s in the back and it&rsquo;s good enough.</p>

<p><img src="http://adereth.github.io/images/mini-usb.jpg" alt="Mini USB" /></p>

<p>The Massdrop kit includes metal screws and nuts that are seriously sharp and will gouge the surface you put the ErgoDox on:</p>

<p><img src="http://adereth.github.io/images/massdrop-screws.jpg" alt="Massdrop screws" /></p>

<p>I decided to go with <a href="http://www.amazon.com/gp/product/B000NHTPKQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000NHTPKQ&amp;linkCode=as2&amp;tag=adereth-20">white nylon flat-head screws</a> and <a href="http://www.amazon.com/gp/product/B00FLM2WBC/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00FLM2WBC&amp;linkCode=as2&amp;tag=adereth-20">nuts</a> for both aesthetics and the safety of my desk:</p>

<p><a href="http://www.amazon.com/gp/product/B000NHTPKQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000NHTPKQ&amp;linkCode=as2&amp;tag=adereth-20"><img src="http://adereth.github.io/images/screw.jpg" alt="Flat-head screw" /></a>
<a href="http://www.amazon.com/gp/product/B00FLM2WBC/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00FLM2WBC&amp;linkCode=as2&amp;tag=adereth-20"><img src="http://adereth.github.io/images/nut.jpg" alt="White nylon nut" /></a></p>

<p>The Dremel came in handy again for making countersinks and for shortening the screws:</p>

<p><img src="http://adereth.github.io/images/countersink.jpg" alt="Countersink" /></p>

<p><img src="http://adereth.github.io/images/countersink-with-screw.jpg" alt="with screw" /></p>

<p><img src="http://adereth.github.io/images/trimmed-nut.jpeg" alt="trimmed nut" /></p>

<p>The only other deviation from the original design was that I didn&rsquo;t use the audio jack style connector.  This was motivated by the fact that Digikey didn&rsquo;t have it in stock and that the jack would be too tall for the 3mm sheets.  I just soldered the wires directly onto the PCB:</p>

<p><img src="http://adereth.github.io/images/wires-on-pcb.jpg" alt="wires on pcb" /></p>

<p><img src="http://adereth.github.io/images/wires-out-back.jpg" alt="wires out the back" /></p>

<h2>Programming the Teensy</h2>

<p>I used the most excellent <a href="https://www.massdrop.com/ext/ergodox">ErgoDox Layout Configurator provided by Massdrop</a> to make my own modified layout that matches what I use on my Kinesis Advantage.  It was pretty straightforward.  I made one of the inner 1.5x keys switch to a QWERTY layer as a courtesy to anyone else who wants to try it out.</p>

<h2>Final Product</h2>

<p>Here&rsquo;s how it came out:</p>

<p><img src="http://adereth.github.io/images/final-build.jpeg" alt="Final build" /></p>

<p><img src="http://adereth.github.io/images/right-zoom.jpeg" alt="Next to Massdrop's" /></p>

<p>Side-by-side comparison with one of my coworkers&#8217; build of Massdrop&rsquo;s kit with the palm rest:</p>

<p><img src="http://adereth.github.io/images/side-by-side.jpeg" alt="Next to Massdrop's" /></p>

<p>And here you can see just how much thinner the case is with all 3mm sheets:</p>

<p><img src="http://adereth.github.io/images/height-comparison.jpg" alt="Next to Massdrop's" /></p>

<p>The keycaps I used were taller than the <a href="https://www.massdrop.com/buy/ergodox-keycap/talk">PBT DCS ones sold by Massdrop</a>, so it ended up being close to the same height.</p>

<h2>Review and Next Steps</h2>

<p>The design and build were fun, but the real test is actually typing on it.  Like the Kinesis Advantage and Truly Ergonomic, the ErgoDox features a columnar layout with staggered keys, which is much more comfortable for me than the traditional layout.  Unfortunately, the PCB is flat and I find it to be less comfortable than the Kinesis&rsquo;s bowl shape.  It&rsquo;s hard to manufacture curved or flexible PCBs, so it&rsquo;s understandable that this DIY project wouldn&rsquo;t require it.</p>

<p>A common complaint about the ErgoDox is that the thumb clusters are too close to the other keys.  This turned out to be a real problem for me as it requires a serious contortion for me to his the top keys of the thumb cluster.  On the Kinesis, I have these mapped to the oft used <code>Ctrl</code> and <code>Alt</code> keys.  It was so bad that I ended up having to remap the bottom corner keys to <code>Ctrl</code> and <code>Alt</code> and relegate the top 2 keys to less used ones.  I&rsquo;m not the only one who has struggled with this and the best solution I&rsquo;ve seen so far is <a href="http://geekhack.org/index.php?topic=44940.0">AcidFire&rsquo;s Grand Piano design</a>:</p>

<p><a href="http://geekhack.org/index.php?topic=44940.0"><img src="http://adereth.github.io/images/grand-ergo.jpg" alt="Grand Ergo" /></a></p>

<p>Another issue is that I chose the wrong keyswitches.  My primary keyboard is the <a href="http://www.amazon.com/gp/product/B00IA6RDVK/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00IA6RDVK&amp;linkCode=as2&amp;tag=adereth-20">Kinesis Advantage LF</a>, which uses Cherry MX reds.  I love them, but they are really hard to find at a reasonable price.  I wasn&rsquo;t about to spend $160 on the keyswitches, so I opted for Cherry MX blacks.  They are linear feel like the reds, but much stiffer, with an activation force of 60cN instead of 45cN.  This didn&rsquo;t seem like a big deal when I tried it out with individual switches from a sampler set, but it was a whole other experience when trying to type on a full set.  It&rsquo;s much harder to type on and I could feel my fingers straining very quickly.</p>

<p>The last issue is that the ErgoDox really need to be tented at an angle for maximum comfort.  My plan was to use this as an ergonomic solution while traveling and I have some designs that would make it easy to attach to my laptop in a tented position.  Something like this:</p>

<p><img src="http://adereth.github.io/images/tented-laptop.jpg" alt="tented on laptop" /></p>

<p>I decided to hold off on this until I have a solution for the other issues I listed.</p>

<h2>Conclusion</h2>

<p>Overall, this was an incredibly fun project and I learned a ton about how keyboards are made.  For anyone who&rsquo;s waiting for the next Massdrop group buy of a kit, you should know that it can be done by yourself for about the same price if you can get access to a laser cutter or CNC mill to make the case.  I&rsquo;m sure someone can be more creative and come up with an even more accessible solution.</p>

<p>Unfortunately, I&rsquo;m not thrilled with the actual typing experience, so I can&rsquo;t recommend it over the Kinesis Advantage.  Some people love it, so try it out for yourself if you can or at least print out a stencil of it before committing.</p>

<p>My plan is to take what I&rsquo;ve learned and to try and build something that&rsquo;s an even better fit for my travel usage.  Hopefully I can procure some Cherry reds for a reasonable price in the future&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where LISP Fits]]></title>
    <link href="http://adereth.github.io/blog/2014/02/03/where-lisp-fits/"/>
    <updated>2014-02-03T07:19:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/02/03/where-lisp-fits</id>
    <content type="html"><![CDATA[<p>There are a lot of great essays about the power and joy of LISP.  I had read a bunch of them, but none convinced me to actually put the energy in to make it over those parentheses-shaped speed bumps.  A part of me always wanted to, mostly because I&rsquo;m convinced that our inevitable robot overlords will have to be programs that write programs and everything I had heard made me think that this would likely be done in a LISP.  It just makes sense to be prepared.</p>

<p>Almost two years ago, a coworker showed me some gorgeous code that used Clojure&rsquo;s <a href="http://clojuredocs.org/clojure_core/clojure.core/-%3E">thrush macro</a> and I fell in love.  I found myself jonesing for <code>C-x C-e</code> whenever I tried going back to Java.  I devoured <a href="http://www.amazon.com/gp/product/1934356867/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356867&amp;linkCode=as2&amp;tag=adereth-20">Programming Clojure</a>, then <a href="http://www.amazon.com/gp/product/1935182641/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182641&amp;linkCode=as2&amp;tag=adereth-20">The Joy of Clojure</a>.  In search of a purer hit, I turned to the source: <a href="http://www-formal.stanford.edu/jmc/recursive.pdf">McCarthy&rsquo;s original paper on LISP</a>.  After reading it, I realized what someone could have told me that would have convinced me to invest the time 12 years earlier.</p>

<p>There&rsquo;s a lot of interesting stuff in that paper, but what really struck me was that it felt like it fit into a theoretical framework that I thought I already knew reasonably well.  This post isn&rsquo;t about the power of LISP, which has been covered by others better than I could.  Rather, it&rsquo;s about where LISP fits in the world of computation.</p>

<p><em>None of what I&rsquo;m about to say is novel or rigorous.  I&rsquo;m pretty sure that all the novel and rigorous stuff around this topic is 50 &ndash; 75 years old, but I just wasn&rsquo;t exposed to it as directly as I&rsquo;m going to try and lay out.</em></p>

<h2>The Automaton Model of Computation</h2>

<p>One of my favorite classes in school was <a href="http://www.cs.cmu.edu/~lblum/flac/index.htm">15-453: Formal Languages, Automata, and Computation</a>, which used <a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=113318779X&amp;linkCode=as2&amp;tag=adereth-20">Sipser&rsquo;s Introduction to the Theory of Computation</a>:</p>

<p><a href="http://www.amazon.com/gp/product/113318779X/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=113318779X&linkCode=as2&tag=adereth-20"><img src="http://adereth.github.io/images/sipser.jpg" width="250"></a></p>

<p>One aspect that I really enjoyed was that there was a narrative; we started with Finite State Automata (FSA), analyzed the additional power of Pushdown Automata (PDA), and saw it culminate in Turing Machines (TM).  Each of these models look very similar and have a natural connection: <em>they are each just state machines with different types of external memory.</em></p>

<p>The tape in the Turing Machine can be viewed as two stacks, with one stack representing everything to the left of the current position and the other stack as the current position and everything to the right.  With this model, we can view the computational hierarchy (FSA &ndash;> PDA &ndash;> TM) as just state machines with 0, 1, or 2 stacks.  I think it&rsquo;s quite an elegant representation and it makes the progression seem quite natural.</p>

<p>A key insight along the journey is that these machines are equivalent in power to other useful systems.  A sizable section in the chapter on Finite State Automata is dedicated to their equivalence with Regular Expressions (RegEx).  Context Free Grammars (CFG) are actually introduced <em>before</em> Pushdown Automata.  But when we get to Turing Machines, there&rsquo;s nothing but a couple paragraphs in a section called &ldquo;Equivalence with Other Models&rdquo;, which says:</p>

<blockquote><p>Many [languages], such as Pascal and LISP, look quite different from one another in style and structure.  Can some algorithm be programmed in one of them and not the others?  Of course not &mdash; we can compile LISP into Pascal and Pascal into LISP, which means that the two languages describe <em>exactly</em> the same class of algorithms.  So do all other reasonable programming languages.</p></blockquote>

<p>The book and class leave it at that and proceed onto the limits of computability, which is the real point of the material.  But there&rsquo;s a natural question that isn&rsquo;t presented in the book and which I never thought to ask:</p>

<center>
Finite State Automata <i class="fa fa-arrows-h"></i> Regular Expressions<br>
Pushdown Automata <i class="fa fa-arrows-h"></i> Context Free Grammars<br>
Turing Machines <i class="fa fa-arrows-h"></i> ?
</center>


<br>


<p>While we know that there are many models that equal Turing Machines, we could also construct other models that equal FSAs or PDAs.  Why are RegExs and CFGs used as the parallel models of computation?  With the machine model, we were able to just add a stack to move up at each level &ndash; is there a natural connection between RegExs and CFGs that we extrapolate to find their next level that is Turing equivalent?</p>

<h2>The Chomsky-Schützenberger Hierarchy</h2>

<p>It turns out that the answers to these questions were well covered in the 1950&rsquo;s by the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Chomsky-Schützenberger Hierarchy of Formal Grammars</a>.</p>

<p>The left-hand side of the relations above are the automaton-based models and the right-hand side are the language-based models.  The language models are all implemented as production rules, where some symbols are converted to other symbols.  The different levels of computation just have different restrictions on what kind of replacements rules are allowed.</p>

<p>For instance RegExs are all rules of the form $A \to a$ and $A \to aB$, where the uppercase letters are <a href="http://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols">non-terminal symbols</a> and the lowercase are terminal.  In CFGs, some of the restrictions on the right-hand side are lifted.  Allowing terminals to appear on the left-hand side lets us make rules that are conditional on what has already been replaced, which appropriately gets called &ldquo;Context Sensitive Grammars.&rdquo;  Finally, when all the rules are lifted, we get Recursively Enumerable languages, which are Turing equivalent.  The <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy">Wikipedia page</a> for the hierarchy and the respective levels is a good source for learning more.</p>

<p>When you look at the definition of LISP in McCarthy&rsquo;s paper, it&rsquo;s much closer to being an applied version of Chomsky&rsquo;s style than Turing&rsquo;s.  This isn&rsquo;t surprising, given that they were contemporaries at MIT.  In McCarthy&rsquo;s <a href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html#SECTION00030000000000000000">History of Lisp</a>, he expicitly states that making a usable version of this other side was his goal:</p>

<blockquote><p>These simplifications made LISP into a way of describing computable functions much neater than the Turing machines or the general recursive definitions used in recursive function theory.  The fact that Turing machines constitute an awkward programming language doesn&rsquo;t much bother recursive function theorists, because they almost never have any reason to write particular recursive definitions, since the theory concerns recursive functions in general.  They often have reason to prove that recursive functions with specific properties exist, but this can be done by an informal argument without having to write them down explicitly.  In the early days of computing, some people developed programming languages based on Turing machines; perhaps it seemed more scientific.  Anyway, I decided to write a paper describing LISP both as a programming language and as a formalism for doing recursive function theory.</p></blockquote>

<p>Here we have it straight from the source.  McCarthy was trying to capture the power of recursive definitions in a usable form.  Just like the automata theorists, once the linguists theorist hit Turing completeness, they focused on the limits instead of the usage.</p>

<p>Theoreticians are more interested in the equality of the systems than the usability, but as practitioners we know that it matters that some problems are more readily solvable in different representations.  Sometimes it&rsquo;s more appropriate to use a RegEx and sometimes an FSA is better suited, even though you could apply either.  While nobody is busting out the Turing Machine to tackle real-world problems, some of our languages are more influenced by one side or the other.</p>

<h2>Turing Machines Considered Harmful</h2>

<p>If you track back the imperative/functional divide to Turing Machines and Chomsky&rsquo;s forms, some of the roots are showing.  Turing Machines are conducive to a couple things that are considered harmful in larger systems: GOTO-based<sup><a href="http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html">1</a></sup> and mutation-centric<sup><a href="https://www.google.com/search?q=mutable+state+considered+harmful">2</a></sup> thinking.  In a lot of cases, we&rsquo;re finding that the languages influenced by the language-side are better suited for our problems.  Paul Graham <a href="http://www.paulgraham.com/diff.html">argues</a> that the popular languages have been steadily evolving towards the LISPy side.</p>

<p>Anyway, this is a connection that I wish I had been shown at the peak of my interest in automata theory because it would have gotten me a lot more excited about LISP sooner.  I think it&rsquo;s interesting to look at LISP as something that has the same theoretical underpinnings as these other tools (RegEx and CFG) that we already acknowledged as vital.</p>

<p><em>Thanks to <a href="http://jliszka.github.io/">Jason Liszka</a> and my colleagues at <a href="http://www.twosigma.com">Two Sigma</a> for help with this post!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every project.clj]]></title>
    <link href="http://adereth.github.io/blog/2014/01/20/every-project-dot-clj/"/>
    <updated>2014-01-20T17:33:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/01/20/every-project-dot-clj</id>
    <content type="html"><![CDATA[<p>I was recently looking for an interesting relational dataset for another project and the idea of using the dependencies for every Clojure project on GitHub came up.  It turns out that it&rsquo;s possible to download almost every project.clj using <a href="https://github.com/Raynes/tentacles">Tentacles</a>, so I decided to&hellip;</p>

<p><img src="http://adereth.github.io/images/download-all.png" width="350"></p>

<p>The most annoying part was dealing with GitHub&rsquo;s rate limits, but after waiting a few hours I had them all on local disk and was able to play around.  I haven&rsquo;t gotten to dig into the data for the actual project I&rsquo;m doing, but there were a couple simple queries that I thought were worth sharing.</p>

<h2>Most frequently included packages</h2>

<p>I was able to download 10770 project.clj files.  Here are the 50 most frequently included packages listed in their <code>:dependencies</code>:</p>

<table>
<thead>
<tr>
<th>Dependency </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.clojure/clojure-contrib </td>
<td> 1524</td>
</tr>
<tr>
<td>compojure </td>
<td> 1348</td>
</tr>
<tr>
<td>hiccup </td>
<td> 743</td>
</tr>
<tr>
<td>clj-http </td>
<td> 738</td>
</tr>
<tr>
<td>ring/ring-jetty-adapter </td>
<td> 607</td>
</tr>
<tr>
<td>cheshire </td>
<td> 558</td>
</tr>
<tr>
<td>org.clojure/data.json </td>
<td> 552</td>
</tr>
<tr>
<td>clj-time </td>
<td> 526</td>
</tr>
<tr>
<td>org.clojure/tools.logging </td>
<td> 490</td>
</tr>
<tr>
<td>enlive </td>
<td> 444</td>
</tr>
<tr>
<td>noir </td>
<td> 388</td>
</tr>
<tr>
<td>ring/ring-core </td>
<td> 375</td>
</tr>
<tr>
<td>ring </td>
<td> 361</td>
</tr>
<tr>
<td>org.clojure/tools.cli </td>
<td> 348</td>
</tr>
<tr>
<td>org.clojure/java.jdbc </td>
<td> 344</td>
</tr>
<tr>
<td>org.clojure/clojurescript </td>
<td> 339</td>
</tr>
<tr>
<td>org.clojure/core.async </td>
<td> 235</td>
</tr>
<tr>
<td>midje </td>
<td> 227</td>
</tr>
<tr>
<td>org.clojure/math.numeric-tower </td>
<td> 219</td>
</tr>
<tr>
<td>korma </td>
<td> 206</td>
</tr>
<tr>
<td>incanter </td>
<td> 202</td>
</tr>
<tr>
<td>seesaw </td>
<td> 195</td>
</tr>
<tr>
<td>overtone </td>
<td> 172</td>
</tr>
<tr>
<td>slingshot </td>
<td> 160</td>
</tr>
<tr>
<td>quil </td>
<td> 158</td>
</tr>
<tr>
<td>com.taoensso/timbre </td>
<td> 150</td>
</tr>
<tr>
<td>http-kit </td>
<td> 149</td>
</tr>
<tr>
<td>ring/ring-devel </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/math.combinatorics </td>
<td> 145</td>
</tr>
<tr>
<td>org.clojure/core.logic </td>
<td> 138</td>
</tr>
<tr>
<td>environ </td>
<td> 132</td>
</tr>
<tr>
<td>aleph </td>
<td> 132</td>
</tr>
<tr>
<td>log4j </td>
<td> 131</td>
</tr>
<tr>
<td>ch.qos.logback/logback-classic </td>
<td> 125</td>
</tr>
<tr>
<td>org.clojure/tools.nrepl </td>
<td> 124</td>
</tr>
<tr>
<td>congomongo </td>
<td> 124</td>
</tr>
<tr>
<td>com.datomic/datomic-free </td>
<td> 123</td>
</tr>
<tr>
<td>com.novemberain/monger </td>
<td> 123</td>
</tr>
<tr>
<td>lib-noir </td>
<td> 121</td>
</tr>
<tr>
<td>org.clojure/core.match </td>
<td> 118</td>
</tr>
<tr>
<td>ring/ring-json </td>
<td> 111</td>
</tr>
<tr>
<td>clojure </td>
<td> 110</td>
</tr>
<tr>
<td>org.clojure/data.xml </td>
<td> 110</td>
</tr>
<tr>
<td>log4j/log4j </td>
<td> 109</td>
</tr>
<tr>
<td>mysql/mysql-connector-java </td>
<td> 109</td>
</tr>
<tr>
<td>postgresql/postgresql </td>
<td> 107</td>
</tr>
<tr>
<td>org.clojure/data.csv </td>
<td> 101</td>
</tr>
<tr>
<td>org.clojure/tools.trace </td>
<td> 98</td>
</tr>
<tr>
<td>org.clojure/tools.namespace </td>
<td> 92</td>
</tr>
<tr>
<td>ring-server </td>
<td> 92</td>
</tr>
</tbody>
</table>


<br/>


<p>I think it makes a nice hit-list of projects to check out!</p>

<p>A couple interesting things jumped out at me:</p>

<ol>
<li>12.5% of Clojure projects on GitHub are using Compojure.  Impressive.</li>
<li>congomongo, com.novemberain/monger, com.datomic/datomic-free, mysql/mysql-connector-java, and postgresql/postgresql are all clustered together in the low 100&rsquo;s.</li>
</ol>


<h2>Most frequently applied licenses</h2>

<p>Just over half of the project.clj&rsquo;s don&rsquo;t contain a <code>:license</code>.  Here are the most popular:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>EPL </td>
<td> 4430</td>
</tr>
<tr>
<td>MIT </td>
<td> 336</td>
</tr>
<tr>
<td>Apache </td>
<td> 106</td>
</tr>
<tr>
<td>BSD </td>
<td> 92</td>
</tr>
<tr>
<td>GPL </td>
<td> 90</td>
</tr>
<tr>
<td>LGPL </td>
<td> 25</td>
</tr>
<tr>
<td>CC </td>
<td> 21</td>
</tr>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>AGPL </td>
<td> 11</td>
</tr>
<tr>
<td>Mozilla  </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br/>


<p>The EPL&rsquo;s dominance doesn&rsquo;t come as a surprise, given Clojure&rsquo;s use of it for the core libraries.</p>

<p>23 projects have &ldquo;WTF&rdquo; or &ldquo;fuck&rdquo; in their license string:</p>

<table>
<thead>
<tr>
<th>License </th>
<th> Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>WTFPL </td>
<td> 18</td>
</tr>
<tr>
<td>Do What The Fuck You Want To Public License </td>
<td> 3</td>
</tr>
<tr>
<td>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2 </td>
<td> 1</td>
</tr>
<tr>
<td>All Rights Reserved Muthafucka </td>
<td> 1</td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>I&rsquo;d like to share a mirror of just the project.clj files wrapped up in a single download, but I want to be conscientious of the variety of licenses.  I&rsquo;ll clean up the code for pulling and summarizing all this data soon so others can play with it.  In the meantime, feel free to suggest other analyses that could be done on these&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quine Tweet Challenge]]></title>
    <link href="http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge/"/>
    <updated>2014-01-08T07:49:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/01/08/quine-tweet-challenge</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Quine_(computing)">quine</a> is a program which takes no input and outputs a copy of its own source code.  There&rsquo;s a history of making challenges out of variants on the idea (shortest quine, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Ouroboros_Programs">Ouroboros Programs</a>, <a href="http://en.wikipedia.org/wiki/Quine_(computing)#Multiquines">Multiquines</a>).  I&rsquo;d like to propose a new variant for our modern social age: the Quine Tweet.</p>

<h2>Inspiration</h2>

<p>Last year I was working through <a href="http://www.4clojure.com/">4Clojure</a> and I had to reacquaint myself with how to implement one for <a href="http://www.4clojure.com/problem/125">Problem #125: Gus&rsquo;s Quinundrum</a>.</p>

<p>A few months later, I saw this tweet from <a href="https://twitter.com/gtrakGT">Gary Trakhman</a>:</p>

<blockquote class="twitter-tweet" lang="en"><p>So simple!&#10;(defn send-tweet&#10;  [tweet]&#10;  (api/statuses-update :oauth-creds my-creds&#10;                       :params {:status tweet}))</p>&mdash; Gary Trakhman (@gtrakGT) <a href="https://twitter.com/gtrakGT/statuses/403227496352862208">November 20, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Seeing him tweet source code that tweets got me thinking about code that tweets its own source code.  Could a Quine Tweet be written?  I took a stab at adapting my Clojure code for Gus&rsquo;s Quinundrum, but I just couldn&rsquo;t make it fit in 140 characters.</p>

<h2>Enter Wolfram</h2>

<p>The next day, this came across my dash:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Hello world! &#8211; tweeting with <a href="https://twitter.com/search?q=%23wolframlang&amp;src=hash">#wolframlang</a> on <a href="https://twitter.com/Raspberry_Pi">@Raspberry_Pi</a> using Send[&quot;Twitter&quot;,&quot;Hello world!&quot; &#8230;]</p>&mdash; Stephen Wolfram (@stephen_wolfram) <a href="https://twitter.com/stephen_wolfram/statuses/403600114247565312">November 21, 2013</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Maybe this will enable my impossible dream of a Quine Tweet&hellip;</p>

<p>I finally got a Raspberry Pi running with the Wolfram Language and I made it happen:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>\{o, c\} = FromCharacterCode\[\{\{92, 40\}, \{92, 41\}\}\] ; SendMessage\[&quot;Twitter&quot;, StringReplace\[InString\[$Line\], \{o -&gt; &quot;&quot;, c -&gt; &quot;&quot;\}\]\]</p>&mdash; Matt Adereth (@adereth) <a href="https://twitter.com/adereth/statuses/420778395988135936">January 8, 2014</a></blockquote>


<script async src="http://adereth.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>If you paste it into a notebook and evaluate, you&rsquo;ll get prompted for authorization and it&rsquo;ll post itself.  Here&rsquo;s a brief explanation of what it does:</p>

<ol>
<li><a href="http://reference.wolfram.com/mathematica/ref/$Line.html"><code>$Line</code></a> is the count of input expressions that have been evaluated.</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/InString.html"><code>InString</code></a> is a function that gets the input for the i<sup>th</sup> input expression.  It returns a string that has some extra escaped parentheses.</li>
<li>92 is the ASCII code for <code>\\</code>. 40 and 41 are the codes for <code>(</code> and <code>)</code>.  <a href="http://reference.wolfram.com/mathematica/ref/FromCharacterCode.html"><code>FromCharacterCode</code></a> can take a list of lists of ASCII codes and return a list of strings.  The list is destructured into the variables <code>o</code> (open) and <code>c</code> (close).</li>
<li><a href="http://reference.wolfram.com/mathematica/ref/StringReplace.html"><code>StringReplace</code></a> is then used to clean up the extra parentheses.</li>
<li><code>SendMessage</code> is the new function in the Wolfram language that does all the hard work of posting.</li>
</ol>


<p>I don&rsquo;t think this is really in the true spirit of a quine, as having something like <code>InString</code> makes it a bit trivial, but you do what you must when you only have 140 characters!</p>

<h2>The Challenge</h2>

<p>So, can it be done in any other languages?  Here&rsquo;s what I think are fair restrictions:</p>

<ol>
<li>Any standard Twitter client library for your language can be linked using the language&rsquo;s normal methods (pom.xml, project.clj, etc.)</li>
<li>The authorization token can be supplied outside of source, either interactively or through a text file.  I don&rsquo;t imagine anyone wants to be sharing that&hellip;</li>
</ol>


<p>Bonus points if you manage to make the tweet and source include <code>#quine</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking Mathematica on the Raspberry Pi]]></title>
    <link href="http://adereth.github.io/blog/2014/01/06/benchmarking-mathematica-on-the-raspberry-pi/"/>
    <updated>2014-01-06T07:23:00-08:00</updated>
    <id>http://adereth.github.io/blog/2014/01/06/benchmarking-mathematica-on-the-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&rsquo;m really excited about <a href="http://blog.wolfram.com/2013/11/21/putting-the-wolfram-language-and-mathematica-on-every-raspberry-pi/">Wolfram Research&rsquo;s announcement</a> that Mathematica and the Wolfram language are now available for free on the Raspberry Pi.</p>

<p>In the announcement, Stephen Wolfram gave this disclaimer:</p>

<blockquote><p>To be clear, the Raspberry Pi is perhaps 10 to 20 times slower at running the Wolfram Language than a typical current-model laptop (and sometimes even slower when it’s lacking architecture-specific internal libraries).</p></blockquote>

<p>I&rsquo;ve got a laptop and a Raspberry Pi, so I decided to put this to the test.</p>

<h2>MathematicaMark</h2>

<p>Mathematica ships with <a href="http://reference.wolfram.com/mathematica/Benchmarking/tutorial/Benchmark.html">a benchmarking package called MathematicaMark</a>.  The latest version of the benchmark, <em>MathematicaMark9</em>, consists of 15 tests that use both numeric and symbolic functions.  The MathematicaMark score is the <a href="http://en.wikipedia.org/wiki/Geometric_mean">geometric mean</a> of the reciprocal of the timings, normalized against some reference system&rsquo;s timings:</p>

<p>$$ \sqrt[15]{\prod_{i=1}^{15} \frac{t_{r,i}}{t_{s,i}}} $$</p>

<p>&hellip;where $t_{s,i}$ is the timing for test $i$ on system $s$ and $r$ is the reference system.  For MathematicaMark9, the reference system is a 3.07 GHz Core i7-950 with 8 hyper-threaded cores running 64-bit Windows 7 Pro.  By definition, this system has a MathematicaMark9 score of 1.0.</p>

<p>We can compare systems using the MathematicaMark score.  If a system were 10 to 20 times slower, we would expect its MathematicaMark score to be anywhere from 1/10<sup>th</sup> to 1/20<sup>th</sup> the value of the faster system.  The <a href="http://reference.wolfram.com/mathematica/Benchmarking/ref/Benchmark.html"><code>Benchmark[]</code> function</a> also provides the timings for the individual tests, so we can dig in and see which functions might be benefitting from the architecture-specific internal libraries Wolfram mentioned.</p>

<h2>Raspberry Pi Configuration</h2>

<p><img src="http://adereth.github.io/images/rpi.png" width="350"></p>

<p>I used a <a href="http://en.wikipedia.org/wiki/Raspberry_Pi#Specifications">Model B Raspberry Pi with 512MB of RAM</a>.  The tests were done after a fresh install of <a href="http://www.raspberrypi.org/archives/5580">NOOBS 1.3.3</a>, which includes Mathematica and the Wolfram Language installed by default.  <code>wolfram</code> was invoked from the commandline and nothing else was running on the system, most notably the X Window System and the <a href="http://reference.wolfram.com/mathematica/tutorial/UsingANotebookInterface.html">Mathematica Notebook interface</a>.</p>

<h2>&ldquo;Typical Current-Model Laptop&rdquo;</h2>

<p><img src="http://adereth.github.io/images/mbp13.png" width="350"></p>

<p>Mathematica ships with benchmark results for 15 different systems (including the reference system).  It&rsquo;s not clear which system to use for this comparison, so I conveniently chose my Early 2013 13-inch Retina MacBook Pro, which sports a 2.6 GHz Intel Core i5 processor (4 hyper-threaded cores) as a representative &ldquo;typical current-model laptop.&rdquo;  Based on the sea of glowing Apple logos I&rsquo;ve seen in the audiences of the conferences I attended this year, I think it&rsquo;s a fair selection.</p>

<h2>MathematicaMark9 Scores</h2>

<p>With the setup out of the way, let&rsquo;s take a look at the report comparing the MacBook, Raspberry Pi, and the 15 included systems:</p>

<p><a href="http://adereth.github.io/oneoff/mathematicamark9-20131231/"><img src="http://adereth.github.io/images/MathematicaMark9.png" alt="MathematicaMark9 System Comparison Chart" /></a>
<em>Click for full-sized report</em></p>

<p>The MacBook Pro weighs in at a respectible 0.86, while the Raspberry Pi is actually getting rounded up to 0.01 from a true score of 0.005.  Running the benchmark takes 16 seconds on the laptop and <em>nearly 49 minutes</em> on the Raspberry Pi.</p>

<p>Even the slowest machine in the included benchmarks score nearly 30x higher.  I don&rsquo;t think Wolfram would consider a pre-Intel Mac to be a &ldquo;typical current-model&rdquo; computer.  To see the numbers he&rsquo;s citing, we need to dig into the timings for the individual tests.</p>

<h2>Performance on Individual Tests</h2>

<p>The source for the 15 individual tests and the timings on a variety of reference systems is included in the <a href="http://adereth.github.io/oneoff/mathematicamark9-20131231/#sources">full MathematicaMark9 Benchmark Report</a>.  Here are the timings on the Raspberry Pi and the Macbook Pro:</p>

<table>
<thead>
<tr>
<th>Test </th>
<th align="right"> Pi Timing (s) </th>
<th align="right"> Mac Timing (s) </th>
<th align="right"> Ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td>Random Number Sort </td>
<td align="right"> 25.13 </td>
<td align="right"> 1.75 </td>
<td align="right"> 14.4</td>
</tr>
<tr>
<td>Digits of Pi </td>
<td align="right"> 12.30 </td>
<td align="right"> 0.78 </td>
<td align="right"> 15.9</td>
</tr>
<tr>
<td>Matrix Arithmetic </td>
<td align="right"> 27.76 </td>
<td align="right"> 1.25 </td>
<td align="right"> 22.2</td>
</tr>
<tr>
<td>Gamma Function </td>
<td align="right"> 15.77 </td>
<td align="right"> 0.63 </td>
<td align="right"> 25.2</td>
</tr>
<tr>
<td>Large Integer Multiplication </td>
<td align="right"> 19.20 </td>
<td align="right"> 0.58 </td>
<td align="right"> 32.9</td>
</tr>
<tr>
<td>Polynomial Expansion </td>
<td align="right"> 4.55 </td>
<td align="right"> 0.12 </td>
<td align="right"> 36.4</td>
</tr>
<tr>
<td>Numerical Integration </td>
<td align="right"> 35.41 </td>
<td align="right"> 0.96 </td>
<td align="right"> 36.7</td>
</tr>
<tr>
<td>Matrix Transpose </td>
<td align="right"> 36.77 </td>
<td align="right"> 0.95 </td>
<td align="right"> 38.8</td>
</tr>
<tr>
<td>Data Fitting </td>
<td align="right"> 29.94 </td>
<td align="right"> 0.66 </td>
<td align="right"> 45.4</td>
</tr>
<tr>
<td>Discrete Fourier Transform </td>
<td align="right"> 79.28 </td>
<td align="right"> 0.95 </td>
<td align="right"> 83.4</td>
</tr>
<tr>
<td>Elementary Functions </td>
<td align="right"> 174.93 </td>
<td align="right"> 1.31 </td>
<td align="right"> 133.3</td>
</tr>
<tr>
<td>Eigenvalues of a Matrix </td>
<td align="right"> 136.87 </td>
<td align="right"> 0.79 </td>
<td align="right"> 174.1</td>
</tr>
<tr>
<td>Singular Value Decomposition </td>
<td align="right"> 433.08 </td>
<td align="right"> 1.52 </td>
<td align="right"> 284.0</td>
</tr>
<tr>
<td>Solving a Linear System </td>
<td align="right"> 745.53 </td>
<td align="right"> 1.65 </td>
<td align="right"> 452.1</td>
</tr>
<tr>
<td>Matrix Multiplication </td>
<td align="right"> 1136.51 </td>
<td align="right"> 2.15 </td>
<td align="right"> 528.9</td>
</tr>
</tbody>
</table>


<br/>


<p>Sorting by the ratio reveals that there are definitely cases where the relative performance falls in the 10x &ndash; 20x range cited by Wolfram.</p>

<p>It&rsquo;s interesting to note that the 4 worst performing tests by ratio are all linear algebra operations involving matrix decomposition or multiplication.  These are the types of operations that have probably gotten a lot of optimization love from Wolfram Research developers in the past because this is the area that potential users compare when deciding between Mathematica and its competitors, particularly Matlab.</p>

<p>If you look through <a href="http://www.wolfram.com/mathematica/quick-revision-history.html">the revision history highlights of Mathematica</a>, you&rsquo;ll see that there was a sequence of releases where every version had at least one top-level mention of linear algebra performance improvements:</p>

<ul>
<li>Mathematica 5.0 &ndash; 2003

<ul>
<li>&ldquo;Record-breaking speed through processor-optimized numerical linear algebra&rdquo;</li>
<li>&ldquo;Full support for high-speed sparse linear algebra&rdquo;</li>
</ul>
</li>
<li>Mathematica 5.1 &ndash; 2004

<ul>
<li>&ldquo;Numerical linear algebra performance enhancements&rdquo;</li>
</ul>
</li>
<li>Mathematica 5.2 &ndash; 2005

<ul>
<li>&ldquo;Multithreaded numerical linear algebra&rdquo;</li>
<li>&ldquo;Vector-based performance enhancements&rdquo;</li>
</ul>
</li>
</ul>


<p>The 5<sup>th</sup> worst test by ratio, Elementary Functions, is also interesting to dig into.  Here&rsquo;s the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Module</span><span class="p">[{</span><span class="nv">m1</span>, <span class="nv">m2</span><span class="p">}</span>,
</span><span class='line'> <span class="nv">Timing</span><span class="p">[</span>
</span><span class='line'>  <span class="nv">SeedRandom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">m1</span> <span class="nb">= </span><span class="nv">RandomReal</span><span class="p">[{}</span>, <span class="p">{</span><span class="mf">2.2</span><span class="o">`</span><span class="nv">*</span><span class="o">^</span><span class="mi">6</span><span class="p">}]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">m2</span> <span class="nb">= </span><span class="nv">RandomReal</span><span class="p">[{}</span>, <span class="p">{</span><span class="mf">2.2</span><span class="o">`</span><span class="nv">*</span><span class="o">^</span><span class="mi">6</span><span class="p">}]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">Do</span><span class="p">[</span>
</span><span class='line'>   <span class="nv">Exp</span><span class="p">[</span><span class="nv">m1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>   <span class="nv">Sin</span><span class="p">[</span><span class="nv">m1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>   <span class="nv">ArcTan</span><span class="p">[</span><span class="nv">m1</span>, <span class="nv">m2</span><span class="p">]</span>,
</span><span class='line'>   <span class="p">{</span><span class="mi">30</span><span class="p">}]]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s computing $ e^x $, $ \sin{x} $, and $ \text{tan}^{-1} \frac{x}{y} $ for lists of 2,200,000 random numbers 30 times.  <code>Exp</code>, <code>Sin</code>, and <code>ArcTan</code> all have the <a href="http://reference.wolfram.com/mathematica/ref/Listable.html"><code>Listable</code> attribute</a>, which means that they are automatically mapped over lists that are passed in as arguments.  <code>Sin[list]</code> and <code>Map[Sin, list]</code> are functionally equivalent, but the former provides the implementation the opportunity to take an optimized path if there is a faster way of computing the sine of multiple numbers.</p>

<p>We can verify that this is a case where architecture specific optimizations are in play by rewriting the test to use <code>Map</code> and <code>MapThread</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Module</span><span class="p">[{</span><span class="nv">m1</span>, <span class="nv">m2</span><span class="p">}</span>,
</span><span class='line'> <span class="nv">Timing</span><span class="p">[</span>
</span><span class='line'>  <span class="nv">SeedRandom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">m1</span> <span class="nb">= </span><span class="nv">RandomReal</span><span class="p">[{}</span>, <span class="p">{</span><span class="mf">2.2</span><span class="o">`</span><span class="nv">*</span><span class="o">^</span><span class="mi">6</span><span class="p">}]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">m2</span> <span class="nb">= </span><span class="nv">RandomReal</span><span class="p">[{}</span>, <span class="p">{</span><span class="mf">2.2</span><span class="o">`</span><span class="nv">*</span><span class="o">^</span><span class="mi">6</span><span class="p">}]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">Map</span><span class="p">[</span><span class="nv">Exp</span>, <span class="nv">m1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">Map</span><span class="p">[</span><span class="nv">Sin</span>, <span class="nv">m1</span><span class="p">]</span><span class="c1">;</span>
</span><span class='line'>  <span class="nv">MapThread</span><span class="p">[</span><span class="nv">ArcTan</span>, <span class="p">{</span><span class="nv">m1</span>, <span class="nv">m2</span><span class="p">}]</span><span class="c1">;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I&rsquo;m only running this once, as opposed to the 30 times in the original test, because the non-Listable version is so much slower.</p>

<p>The version that doesn&rsquo;t take advantage of the Listable attribute takes 1.63 seconds on the Macbook Pro and 62.64 seconds on the Raspberry Pi.  This ratio of 38.2 (vs. 133.3 before) is much closer to the ratio we see from the other tests that don&rsquo;t take advantage of specifics of the architecture.</p>

<h2>Conclusion</h2>

<p>Even though Mathematica is much slower on the Raspberry Pi, it&rsquo;s a tremendous free gift and it still has many uses:</p>

<ul>
<li><p><a href="http://www.raspberrypi.org/archives/5623">A recent guest post from Wolfram Research on the Raspberry Pi blog</a> links to several projects that take advantage of the easy ways of controlling hardware using Mathematica on the Raspberry Pi.</p></li>
<li><p>Much of what most people use Mathematica for doesn&rsquo;t require extreme performance.  For instance, getting the closed form of an integral or derivative is still practically instantaneous from a human&rsquo;s perspective.</p></li>
<li><p>Just getting to experience the language and environment with only a $35 investment is worthwhile.  For developers, there is a lot to learn from the language, which is heavily influenced by <a href="http://en.wikipedia.org/wiki/M-expression">Lisp&rsquo;s M-expressions</a>, and the notebook enviroment, which is just starting to be replicated by iPython.  On top of that, the incredible interactive documentation for the language is something everyone should experience.</p></li>
</ul>


<p>Any questions, corrections, or suggestions are appreciated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Counting Stars on GitHub]]></title>
    <link href="http://adereth.github.io/blog/2013/12/23/counting-stars-on-github/"/>
    <updated>2013-12-23T08:10:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/12/23/counting-stars-on-github</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://mbostock.github.com/d3/d3.min.js"></script>


<p>I&rsquo;ve been working on a nerd ethnography project with the <a href="http://developer.github.com/v3/">GitHub API</a>.  There&rsquo;s so much fun data to play with there that it&rsquo;s inevitable that I&rsquo;ll get a little distracted&hellip;</p>

<p>One distraction was the realization that I could use the search API to get a massive list of the top repos ordered by star count.  Once I started looking at the results, I realized that star data is an interesting alternative metric for evaluating language popularity.  Instead of looking at which languages people are actually writing new projects using, we can see which languages are used for the most popular projects.</p>

<h2>What are stars?</h2>

<p>In August 2012, GitHub <a href="https://github.com/blog/1204-notifications-stars">announced</a> a new version of their notification system that allowed users to easily mark a repository as interesting by &ldquo;starring&rdquo; it:</p>

<p><img src="http://adereth.github.io/images/github-star-ui.png" alt="GitHub star UI" /></p>

<p>Stars are essentially lightweight bookmarks that are publicly visible.  Even though they were introduced just over a year ago, all &ldquo;watches&rdquo; were converted to stars so there&rsquo;s plenty of data.</p>

<h2>Which are the most starred repos?</h2>

<p>Let&rsquo;s start by looking at the top 20:</p>

<table>
<thead>
<tr>
<th> Rank </th>
<th> Repository </th>
<th> Language </th>
<th> Stars</th>
</tr>
</thead>
<tbody>
<tr>
<td> 1 </td>
<td> <a href="http://github.com/twbs/bootstrap">twbs/bootstrap</a> </td>
<td> JavaScript </td>
<td> 62111</td>
</tr>
<tr>
<td> 2 </td>
<td> <a href="http://github.com/jquery/jquery">jquery/jquery</a> </td>
<td> JavaScript </td>
<td> 27082</td>
</tr>
<tr>
<td> 3 </td>
<td> <a href="http://github.com/joyent/node">joyent/node</a> </td>
<td> JavaScript </td>
<td> 26352</td>
</tr>
<tr>
<td> 4 </td>
<td> <a href="http://github.com/h5bp/html5-boilerplate">h5bp/html5-boilerplate</a> </td>
<td> CSS </td>
<td> 23355</td>
</tr>
<tr>
<td> 5 </td>
<td> <a href="http://github.com/mbostock/d3">mbostock/d3</a> </td>
<td> JavaScript </td>
<td> 20715</td>
</tr>
<tr>
<td> 6 </td>
<td> <a href="http://github.com/rails/rails">rails/rails</a> </td>
<td> Ruby </td>
<td> 20284</td>
</tr>
<tr>
<td> 7 </td>
<td> <a href="http://github.com/FortAwesome/Font-Awesome">FortAwesome/Font-Awesome</a> </td>
<td> CSS </td>
<td> 19506</td>
</tr>
<tr>
<td> 8 </td>
<td> <a href="http://github.com/bartaz/impress.js">bartaz/impress.js</a> </td>
<td> JavaScript </td>
<td> 18637</td>
</tr>
<tr>
<td> 9 </td>
<td> <a href="http://github.com/angular/angular.js">angular/angular.js</a> </td>
<td> JavaScript </td>
<td> 17994</td>
</tr>
<tr>
<td> 10 </td>
<td> <a href="http://github.com/jashkenas/backbone">jashkenas/backbone</a> </td>
<td> JavaScript </td>
<td> 16502</td>
</tr>
<tr>
<td> 11 </td>
<td> <a href="http://github.com/Homebrew/homebrew">Homebrew/homebrew</a> </td>
<td> Ruby </td>
<td> 15065</td>
</tr>
<tr>
<td> 12 </td>
<td> <a href="http://github.com/zurb/foundation">zurb/foundation</a> </td>
<td> JavaScript </td>
<td> 14944</td>
</tr>
<tr>
<td> 13 </td>
<td> <a href="http://github.com/blueimp/jQuery-File-Upload">blueimp/jQuery-File-Upload</a> </td>
<td> JavaScript </td>
<td> 14312</td>
</tr>
<tr>
<td> 14 </td>
<td> <a href="http://github.com/harvesthq/chosen">harvesthq/chosen</a> </td>
<td> JavaScript </td>
<td> 14232</td>
</tr>
<tr>
<td> 15 </td>
<td> <a href="http://github.com/mrdoob/three.js">mrdoob/three.js</a> </td>
<td> JavaScript </td>
<td> 13686</td>
</tr>
<tr>
<td> 16 </td>
<td> <a href="http://github.com/vhf/free-programming-books">vhf/free-programming-books</a> </td>
<td> <em>Unknown</em> </td>
<td> 13658</td>
</tr>
<tr>
<td> 17 </td>
<td> <a href="http://github.com/adobe/brackets">adobe/brackets</a> </td>
<td> JavaScript </td>
<td> 13557</td>
</tr>
<tr>
<td> 18 </td>
<td> <a href="http://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh</a> </td>
<td> Shell </td>
<td> 13337</td>
</tr>
<tr>
<td> 19 </td>
<td> <a href="http://github.com/jekyll/jekyll">jekyll/jekyll</a> </td>
<td> Ruby </td>
<td> 13283</td>
</tr>
<tr>
<td> 20 </td>
<td> <a href="http://github.com/github/gitignore">github/gitignore</a> </td>
<td> <em>Unknown</em> </td>
<td> 13128</td>
</tr>
</tbody>
</table>


<br/>


<p>If you want to play with the data yourself, I&rsquo;ve put a cache of the top 5000 repositories <a href="http://adereth.github.io/data/top-5000-repos.20131219.csv">here</a>.  I&rsquo;ve also posted the Clojure code I wrote to collect the data at <a href="https://github.com/adereth/counting-stars">adereth/counting-stars</a>.</p>

<h2>Which languages have the top spots?</h2>

<p>In <a href="http://adambard.com/blog/top-github-languages-for-2013-so-far/">Adam Bard&rsquo;s Top Github Languages for 2013 (so far)</a>, he counted repo creation and found that JavaScript and Ruby were pretty close.  The top star counts tell a very different story, with JavaScript dominating 7 of the top 10 spots.  CSS was in 11th place in his analysis, but it&rsquo;s 2 of the top 10 spots.</p>

<p>Observing that 7 of the top 10 spots are JavaScript gives a sense for both the volume and the relative ranking of JavaScript in that range of the leaderboard, but just seeing that another language is 50 of the top 5000 spots doesn&rsquo;t give nearly as much color.</p>

<p>One approach is to look at the number of repos in different ranges for each language:</p>

<table>
<thead>
<tr>
<th>Language </th>
<th> 1-10 </th>
<th> 1-100 </th>
<th> 1-1000 </th>
<th> 1-5000 </th>
<th> Top Repository</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript </td>
<td> 7 </td>
<td> 54 </td>
<td> 385 </td>
<td> 1605 </td>
<td> <a href="http://github.com/twbs/bootstrap">twbs/bootstrap</a> (1)</td>
</tr>
<tr>
<td>CSS </td>
<td> 2 </td>
<td> 8 </td>
<td> 41 </td>
<td> 174 </td>
<td> <a href="http://github.com/h5bp/html5-boilerplate">h5bp/html5-boilerplate</a> (4)</td>
</tr>
<tr>
<td>Ruby </td>
<td> 1 </td>
<td> 9 </td>
<td> 153 </td>
<td> 786 </td>
<td> <a href="http://github.com/rails/rails">rails/rails</a> (6)</td>
</tr>
<tr>
<td>Python </td>
<td>  </td>
<td> 5 </td>
<td> 64 </td>
<td> 420 </td>
<td> <a href="http://github.com/django/django">django/django</a> (44)</td>
</tr>
<tr>
<td><em>Unknown</em> </td>
<td>  </td>
<td> 5 </td>
<td> 30 </td>
<td> 138 </td>
<td> <a href="http://github.com/vhf/free-programming-books">vhf/free-programming-books</a> (15)</td>
</tr>
<tr>
<td>C++ </td>
<td>  </td>
<td> 4 </td>
<td> 22 </td>
<td> 108 </td>
<td> <a href="http://github.com/textmate/textmate">textmate/textmate</a> (35)</td>
</tr>
<tr>
<td>PHP </td>
<td>  </td>
<td> 3 </td>
<td> 38 </td>
<td> 248 </td>
<td> <a href="http://github.com/symfony/symfony">symfony/symfony</a> (58)</td>
</tr>
<tr>
<td>Shell </td>
<td>  </td>
<td> 3 </td>
<td> 19 </td>
<td> 89 </td>
<td> <a href="http://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh</a> (18)</td>
</tr>
<tr>
<td>Objective-C </td>
<td>  </td>
<td> 2 </td>
<td> 89 </td>
<td> 495 </td>
<td> <a href="http://github.com/AFNetworking/AFNetworking">AFNetworking/AFNetworking</a> (30)</td>
</tr>
<tr>
<td>C </td>
<td>  </td>
<td> 2 </td>
<td> 31 </td>
<td> 185 </td>
<td> <a href="http://github.com/torvalds/linux">torvalds/linux</a> (25)</td>
</tr>
<tr>
<td>Go </td>
<td>  </td>
<td> 2 </td>
<td> 13 </td>
<td> 61 </td>
<td> <a href="http://github.com/dotcloud/docker">dotcloud/docker</a> (45)</td>
</tr>
<tr>
<td>Java </td>
<td>  </td>
<td> 1 </td>
<td> 32 </td>
<td> 255 </td>
<td> <a href="http://github.com/nathanmarz/storm">nathanmarz/storm</a> (56)</td>
</tr>
<tr>
<td>VimL </td>
<td>  </td>
<td> 1 </td>
<td> 23 </td>
<td> 66 </td>
<td> <a href="http://github.com/mathiasbynens/dotfiles">mathiasbynens/dotfiles</a> (57)</td>
</tr>
<tr>
<td>CoffeeScript </td>
<td>  </td>
<td> 1 </td>
<td> 22 </td>
<td> 80 </td>
<td> <a href="http://github.com/jashkenas/coffee-script">jashkenas/coffee-script</a> (43)</td>
</tr>
<tr>
<td>Scala </td>
<td>  </td>
<td>  </td>
<td> 13 </td>
<td> 46 </td>
<td> <a href="http://github.com/playframework/playframework">playframework/playframework</a> (178)</td>
</tr>
<tr>
<td>C# </td>
<td>  </td>
<td>  </td>
<td> 8 </td>
<td> 65 </td>
<td> <a href="http://github.com/SignalR/SignalR">SignalR/SignalR</a> (205)</td>
</tr>
<tr>
<td>Clojure </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 37 </td>
<td> <a href="http://github.com/technomancy/leiningen">technomancy/leiningen</a> (361)</td>
</tr>
<tr>
<td>Perl </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 26 </td>
<td> <a href="http://github.com/sitaramc/gitolite">sitaramc/gitolite</a> (138)</td>
</tr>
<tr>
<td>ActionScript </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> 10 </td>
<td> <a href="http://github.com/mozilla/shumway">mozilla/shumway</a> (606)</td>
</tr>
<tr>
<td>Emacs Lisp </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 20 </td>
<td> <a href="http://github.com/technomancy/emacs-starter-kit">technomancy/emacs-starter-kit</a> (477)</td>
</tr>
<tr>
<td>Erlang </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 15 </td>
<td> <a href="http://github.com/erlang/otp">erlang/otp</a> (568)</td>
</tr>
<tr>
<td>Haskell </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 12 </td>
<td> <a href="http://github.com/jgm/pandoc">jgm/pandoc</a> (740)</td>
</tr>
<tr>
<td>TypeScript </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 4 </td>
<td> <a href="http://github.com/bitcoin/bitcoin">bitcoin/bitcoin</a> (161)</td>
</tr>
<tr>
<td>Assembly </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 3 </td>
<td> <a href="http://github.com/jmechner/Prince-of-Persia-Apple-II">jmechner/Prince-of-Persia-Apple-II</a> (269)</td>
</tr>
<tr>
<td>Elixir </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 2 </td>
<td> <a href="http://github.com/elixir-lang/elixir">elixir-lang/elixir</a> (666)</td>
</tr>
<tr>
<td>Objective-J </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 2 </td>
<td> <a href="http://github.com/cappuccino/cappuccino">cappuccino/cappuccino</a> (667)</td>
</tr>
<tr>
<td>Rust </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/mozilla/rust">mozilla/rust</a> (225)</td>
</tr>
<tr>
<td>Vala </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/p-e-w/finalterm">p-e-w/finalterm</a> (282)</td>
</tr>
<tr>
<td>Julia </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/JuliaLang/julia">JuliaLang/julia</a> (356)</td>
</tr>
<tr>
<td>Visual Basic </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> 1 </td>
<td> <a href="http://github.com/bmatzelle/gow">bmatzelle/gow</a> (800)</td>
</tr>
<tr>
<td>TeX </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 6 </td>
<td> <a href="http://github.com/ieure/sicp">ieure/sicp</a> (2441)</td>
</tr>
<tr>
<td>R </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 5 </td>
<td> <a href="http://github.com/johnmyleswhite/ML_for_Hackers">johnmyleswhite/ML_for_Hackers</a> (2125)</td>
</tr>
<tr>
<td>Lua </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 4 </td>
<td> <a href="http://github.com/leafo/moonscript">leafo/moonscript</a> (3351)</td>
</tr>
<tr>
<td>PowerShell </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 3 </td>
<td> <a href="http://github.com/chocolatey/chocolatey">chocolatey/chocolatey</a> (1580)</td>
</tr>
<tr>
<td>Prolog </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 3 </td>
<td> <a href="http://github.com/onyxfish/csvkit">onyxfish/csvkit</a> (3498)</td>
</tr>
<tr>
<td>XSLT </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/wakaleo/game-of-life">wakaleo/game-of-life</a> (1093)</td>
</tr>
<tr>
<td>Matlab </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/zk00006/OpenTLD">zk00006/OpenTLD</a> (1292)</td>
</tr>
<tr>
<td>OCaml </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/MLstate/opalang">MLstate/opalang</a> (1380)</td>
</tr>
<tr>
<td>Dart </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/dart-lang/spark">dart-lang/spark</a> (1463)</td>
</tr>
<tr>
<td>Groovy </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 2 </td>
<td> <a href="http://github.com/Netflix/asgard">Netflix/asgard</a> (1489)</td>
</tr>
<tr>
<td>Lasso </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/symfony/symfony-docs">symfony/symfony-docs</a> (2047)</td>
</tr>
<tr>
<td>LiveScript </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/gkz/LiveScript">gkz/LiveScript</a> (2226)</td>
</tr>
<tr>
<td>Scheme </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/eholk/harlan">eholk/harlan</a> (2648)</td>
</tr>
<tr>
<td>Common Lisp </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/google/lisp-koans">google/lisp-koans</a> (2889)</td>
</tr>
<tr>
<td>XML </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/kswedberg/jquery-tmbundle">kswedberg/jquery-tmbundle</a> (2972)</td>
</tr>
<tr>
<td>Mirah </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/mirah/mirah">mirah/mirah</a> (2985)</td>
</tr>
<tr>
<td>Arc </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/arclanguage/anarki">arclanguage/anarki</a> (3389)</td>
</tr>
<tr>
<td>DOT </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/cplusplus/draft">cplusplus/draft</a> (3583)</td>
</tr>
<tr>
<td>Racket </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/plt/racket">plt/racket</a> (3761)</td>
</tr>
<tr>
<td>F# </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/fsharp/fsharp">fsharp/fsharp</a> (4518)</td>
</tr>
<tr>
<td>D </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/D-Programming-Language/phobos">D-Programming-Language/phobos</a> (4719)</td>
</tr>
<tr>
<td>Ragel in Ruby Host </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/jgarber/redcloth">jgarber/redcloth</a> (4829)</td>
</tr>
<tr>
<td>Puppet </td>
<td>  </td>
<td>  </td>
<td>  </td>
<td> 1 </td>
<td> <a href="http://github.com/ansible/ansible-examples">ansible/ansible-examples</a> (4979)</td>
</tr>
</tbody>
</table>


<br/>


<p>The table is interesting, but it still doesn&rsquo;t give us a good sense for how the middle languages (C#, Scala, Clojure, Go) compare.  It also reveals that there are different star distributions within the languages.  For instance, CSS makes a showing in the top 10 but it has way fewer representatives (174) in the top 5000 than PHP (248), Objective C (495), or Java (255).</p>

<p>Looking at the top repo for each language also exposes a weakness in the methodology: GitHub&rsquo;s language identification isn&rsquo;t perfect and there are number of polyglot projects.  The top Java repo is <a href="http://github.com/nathanmarz/storm">Storm</a>, which uses enough Clojure (20.1% by GitHub&rsquo;s measure) to make this identification questionable when you take into account Clojure&rsquo;s conciseness over Java&rsquo;s.</p>

<h2>What about star counts?</h2>

<p>Looking at the results after ranking obscures the actual distribution of stars.  Using a <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.36.6685&amp;rep=rep1&amp;type=pdf">squarified treemap</a> with star count for the size and no hierarchy is a compact way of visualizing the ranking while exposing details about the absolute popularity of each repo.  The squarified treemap algorithm roughly maintains the order going from one corner to the other.</p>

<p>Here are the top 1000 repos, using stars for the size and language for the color:</p>

<p><em>(Language and repository name shown on mouseover, click to visit repository.  A bit of a fail on touch devices right now.)</em></p>

<div id='tm'></div>




<!-- CSS Styles: -->


<div>
  <style type="text/css">
.node {
  border: solid 1px white;
  font: 8px Lato;
  line-height: 12px;
  overflow: hidden;
  position: absolute;
  text-indent: 2px;
}

.tooltip{
    display: inline;
    position: relative;
}

.tooltip:hover:after{
    background: #333;
    background: rgba(0,0,0,.8);
    border-radius: 5px;
    bottom: 26px;
    color: #fff;
    content: attr(title);
    left: 20%;
    padding: 5px 15px;
    position: absolute;
    z-index: 98;
    width: 220px;
}

.tooltip:hover:before{
    border: solid;
    border-color: #333 transparent;
    border-width: 6px 6px 0 6px;
    bottom: 20px;
    content: &#8220;&#8221;;
    left: 50%;
    position: absolute;
    z-index: 99;
}

  </style>
</div>




<script type="text/javascript">

var color = d3.scale.category20();

var margin = {top: 10, right: 0, bottom: 10, left: 0},
    width = $('.entry-content').width(),
    height = 500;

var treemap = d3.layout.treemap()
    .size([width, height])
    .sticky(true)
    .value(function(d) { return d.Stars; });

var div = d3.select("#tm").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

d3.csv("/data/top-1000-repos.20131219.csv", function(repos) {
  treemap.nodes({"children": repos});

  var node = div.datum(repos).selectAll(".node")
    .data(treemap.nodes)
    .enter()
      .append("a")
      .attr("href", function(d) { return d.children ? null : ("http://github.com/" + d.Repository); })
      .attr("class", function(d) { return d.children ? null : "tooltip"; })
      .attr("title", function(d) { return d.children ? null : "Repository: " + d.Repository + "\nLanguage: " + d.Language + "\nStars: " + d.Stars; })
      .append("div")
    .attr("class", "node")
    .call(position)
    .style("background", function(d) { return d.children ? null : color(d.Language); });
});

function position() {
  this.style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; });
};

</script>


<p>Despite being a little chaotic, we can start to see some of the details of the distributions.  It still suffers from being difficult to glean information about the middling languages.  The comparisons become a little easier if we group the boxes by language.  That&rsquo;s pretty easy, since that&rsquo;s really the intended usage of treemaps.</p>

<p>Here are the top 5000 grouped by language:</p>

<div id='tm2'></div>




<script type="text/javascript">

var treemap2 = d3.layout.treemap()
    .size([width, height])
    .sticky(true)
    .value(function(d) {return d.children ? null : d.stargazers_count; });

var div2 = d3.select("#tm2").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

d3.json("/data/lang-map.json", function(root) {
  var node = div2.datum(root).selectAll(".node")
      .data(treemap2.nodes)
      .enter()
      .append("a")
      .attr("href", function(d) { return d.children ? null : ("http://github.com/" + d.user + "/" + d.name); })
      .attr("class", function(d) { return d.children ? null : "tooltip"; })
      .attr("title", function(d) { return d.children ? null : "Repository: " + d.user + "/" + d.name + "\nLanguage: " + d.language + "\nStars: " + d.stargazers_count; })

      .append("div")
      .attr("class", "node")
      .call(position)
      .style("background", function(d) { return d.children ? color(d.name) : null; });

  d3.selectAll("input").on("change", function change() {
    var value = this.value === "count"
        ? function() { return 1; }
        : function(d) { return d.size; };

    node
        .data(treemap.value(value).nodes)
      .transition()
        .duration(1500)
        .call(position);
  });
});


function position() {
  this.style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; });
};

</script>


<p>Honestly, I&rsquo;m not really in love with this visualization, but it was a fun experiment.  I have some ideas for more effective representations, but I need to work on my d3.js-fu.  Hopefully it serves as an inspirational starting point for someone else&hellip;</p>

<h2>Conclusion</h2>

<p>Firstly, GitHub&rsquo;s API is really cool and can give you some insights that aren&rsquo;t exposed through their UI.  Like I said at the start of this post, I have another project that caused me to look at this API in the first place and I&rsquo;m really excited for the possibilities with this data.</p>

<p>GitHub&rsquo;s current UI is really focused on using stars to expose what&rsquo;s trending and doesn&rsquo;t really make it easy to see the all-time greatest hits.  Perhaps the expectation is that everyone already knows these repos, but I certainly didn&rsquo;t and I&rsquo;ve discovered or rediscovered a few gems.  My <a href="http://adereth.github.io/blog/2013/12/15/font-awesome-easter-egg/">previous post</a> came about because of my discovery of <a href="http://fontawesome.io/">Font Awesome</a> through this investigation.</p>

<p>I&rsquo;ll close out with a couple questions (with no question marks) for the audience:</p>

<ol>
<li><p>Through this lens, JavaScript is <em>way</em> more popular than other metrics seem to indicate.  One hypothesis is that we all end up exposing things through the browser, so you end up doing something in JavaScript no matter what your language of choice is.  I&rsquo;m interested in other ideas and would also appreciate thoughts on how to validate them.</p></li>
<li><p>It&rsquo;s not obvious to me how to best aggregate ranking data.  I&rsquo;d love to see someone else take this data and expose something more interesting.  Even if you&rsquo;re not going to do anything with the data, any ideas are appreciated.</p></li>
</ol>


<p><i class="fa fa-star fa-2x"></i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Font Awesome Easter Egg]]></title>
    <link href="http://adereth.github.io/blog/2013/12/15/font-awesome-easter-egg/"/>
    <updated>2013-12-15T12:45:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/12/15/font-awesome-easter-egg</id>
    <content type="html"><![CDATA[<p><a href="http://fontawesome.io/">Font Awesome</a> is a gorgeous icon font designed to play nicely with Bootstrap.  I was playing around with it today and noticed the highly detailed <a href="http://fontawesome.io/icon/barcode/">fa-barcode</a> character:</p>

<p><i class="fa fa-barcode"></i></p>

<p>If we make it a little larger, we can see that it really looks like a legit barcode:</p>

<p><i class="fa fa-barcode fa-5x"></i></p>

<p>I scanned it with a barcode reader and it&rsquo;s the code for <code>FA</code>.</p>

<p><i class="fa fa-trophy"></i> Font Awesome wins at detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most frequently enabled Emacs packages]]></title>
    <link href="http://adereth.github.io/blog/2013/12/08/most-frequently-enabled-emacs-packages/"/>
    <updated>2013-12-08T20:38:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/12/08/most-frequently-enabled-emacs-packages</id>
    <content type="html"><![CDATA[<p>As part of the Emacs-24.4 release, emacs-devel is conducting <a href="http://www.emacswiki.org/emacs/FrequentlyEnabledPackages_Emacs244_Survey">a survey</a> to find out which vanilla GnuEmacs packages/modes people enable by default.  The responses are in one big plain-text alphabetical list which isn&rsquo;t really conducive to browsing.</p>

<p>I&rsquo;ve gone through the most frequently enabled ones to see what they do.  I figured others might be interested, so I&rsquo;ve put the top ones in order of popularity, along with brief descriptions and links to the related pages if one exists.  Enjoy!</p>

<ul>
<li><p><code>uniquify</code> &ndash; <a href="http://www.emacswiki.org/emacs/uniquify">Uniquify</a> overrides the default mechanism for making buffer names unique (using suffixes like <code>&lt;2&gt;</code>, <code>&lt;3&gt;</code> etc.) with a more sensible behaviour which use parts of the file names to make the buffer names distinguishable.  This will be turned on by default in 24.4.</p></li>
<li><p><code>column-number-mode</code> &ndash; Displays which column the cursor is currently on in the mode line.</p></li>
<li><p><code>show-paren-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/ShowParenMode">show-paren-mode</a> allows you to see matching pairs of parentheses and other characters. When the cursor is on one of the paired characters, the other is highlighted.</p></li>
<li><p><code>ido-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/InteractivelyDoThings">Ido</a> lets you interactively do things with buffers and files.  The <a href="http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/">Introduction to Ido Mode</a> on <a href="http://www.masteringemacs.org/">Mastering Emacs</a> does a much better job of explaining why and how you should use it.</p></li>
<li><p><code>transient-mark-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/TransientMarkMode">Transient Mark mode</a> gives you much of the standard selection-highlighting behavior of other editors.  This is on by default in recent Emacsen.</p></li>
<li><p><code>ibuffer</code> &ndash; <a href="http://www.emacswiki.org/emacs/IbufferMode">Ibuffer</a> is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired.</p></li>
<li><p><code>blink-cursor-mode</code> &ndash; Toggle cursor blinking.  This is on by default.</p></li>
<li><p><code>flyspell-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/FlySpell">Flyspell</a> enables on-the-fly spell checking in Emacs by the means of a minor mode.</p></li>
<li><p><code>recentf-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/RecentFiles">Recentf</a> is a minor mode that builds a list of recently opened files. This list is is automatically saved across Emacs sessions. You can then access this list through a menu.</p></li>
<li><p><code>eldoc-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/ElDoc">Eldoc-mode</a> is a MinorMode which shows you, in the echo area, the argument list of the function call you are currently writing.</p></li>
<li><p><code>dired-x</code> &ndash; <a href="http://www.emacswiki.org/emacs/DiredExtra">Dired X</a> provides extra functionality for DiredMode.</p></li>
<li><p><code>windmove</code> &ndash; <a href="http://www.emacswiki.org/emacs/WindMove">Wind Move</a> lets you move point from window to window using Shift and the arrow keys.</p></li>
<li><p><code>line-number-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/LineNumbers">Line Numbers</a> displays line numbers in a buffer, or otherwise indicates line numbers, without actually changing the buffer content.</p></li>
<li><p><code>winner-mode</code> &ndash; <a href="http://www.emacswiki.org/emacs/WinnerMode">Winner Mode</a> allows you to undo and redo changes in the window configuration with the key commands <code>C-c left</code> and <code>C-c right</code>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorful Equations with MathJax]]></title>
    <link href="http://adereth.github.io/blog/2013/11/29/colorful-equations/"/>
    <updated>2013-11-29T09:18:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/11/29/colorful-equations</id>
    <content type="html"><![CDATA[<p><a href="http://www.altdevblogaday.com/author/stuart-riffle/">Stuart Riffle</a> wrote up <a href="http://www.altdevblogaday.com/2011/05/17/understanding-the-fourier-transform/">a great explanation of the Fourier transform</a>.  There are a number of great visualizations in his post, but the climax is his explanation of the inverse discrete Fourier transform formula:</p>

<p><img class="center" src="http://adereth.github.io/images/DerivedDFT.png"></p>

<p>What a brilliant representation!  My first thought was that more equations should have such elegant explanations that focus on the comprehension of the reader.  I&rsquo;d love to be able to produce such clear explanations in this style, so I did a little experimenting with Octopress and <a href="http://www.mathjax.org/">MathJax</a> to see how easy it would be.</p>

<p>It turns out to only require a few minor yak trimmings to get something nice:</p>

<div style="font-size: 150%;">
$$
\definecolor{energy}{RGB}{114,0,172}
\definecolor{freq}{RGB}{45,177,93}
\definecolor{spin}{RGB}{251,0,29}
\definecolor{signal}{RGB}{18,110,213}
\definecolor{circle}{RGB}{217,86,16}
\definecolor{average}{RGB}{203,23,206}
\color{energy} X_{\color{freq} k} \color{black} =
\color{average} \frac{1}{N} \sum_{n=0}^{N-1} 
\color{signal}x_n \color{spin} 
e^{\mathrm{i} \color{circle} 2\pi \color{freq}k \color{average} \frac{n}{N}}
$$
</div>


<blockquote><p>To find <font color="#7200AC">the energy</font> <font color="2DB15D">at a particular frequency</font>, <font color="#FB001D">spin</font> <font color="#126ED5">your signal</font> <font color="#D04400">around a circle</font> <font color="2DB15D">at that frequency</font>, and <font color="#CB17CE">average a bunch of points along that path</font>.</p></blockquote>

<p>By using MathJax instead of including a .png we get some nice benefits:</p>

<ol>
<li>Accessibility via screen readers</li>
<li>Scalable renderings that look awesome on Retina displays</li>
<li>$\LaTeX$ source that is accessible by the audience (right click on the formula)</li>
<li>Simplified page-build process and source management</li>
</ol>


<p>There are <a href="http://www.google.com/search?q=octopress%20mathjax">a bunch of guides on setting up MathJax with Octopress</a>, but I didn&rsquo;t mess with any of them because the <a href="https://github.com/bijumon/oct2">oct2 theme</a> ships with an alternative <code>head.html</code> that is preconfigured to support it.</p>

<p>The only tweak I made was to load the <a href="http://docs.mathjax.org/en/latest/tex.html#color">Color extension for MathJax</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span> <span class="nx">TeX</span><span class="o">:</span> <span class="p">{</span> <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;color.js&quot;</span><span class="p">]</span> <span class="p">}});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding that, I was able to use the <code>\definecolor</code> and <code>\color</code> directives just like I would in a paper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>energy<span class="nb">}{</span>RGB<span class="nb">}{</span>114,0,172<span class="nb">}</span>
</span><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>freq<span class="nb">}{</span>RGB<span class="nb">}{</span>45,177,93<span class="nb">}</span>
</span><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>spin<span class="nb">}{</span>RGB<span class="nb">}{</span>251,0,29<span class="nb">}</span>
</span><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>signal<span class="nb">}{</span>RGB<span class="nb">}{</span>18,110,213<span class="nb">}</span>
</span><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>circle<span class="nb">}{</span>RGB<span class="nb">}{</span>217,86,16<span class="nb">}</span>
</span><span class='line'><span class="k">\definecolor</span><span class="nb">{</span>average<span class="nb">}{</span>RGB<span class="nb">}{</span>203,23,206<span class="nb">}</span>
</span><span class='line'><span class="k">\color</span><span class="nb">{</span>energy<span class="nb">}</span> X<span class="nb">_{</span><span class="k">\color</span><span class="nb">{</span>freq<span class="nb">}</span> k<span class="nb">}</span> <span class="k">\color</span><span class="nb">{</span>black<span class="nb">}</span> =
</span><span class='line'><span class="k">\color</span><span class="nb">{</span>average<span class="nb">}</span> <span class="k">\frac</span><span class="nb">{</span>1<span class="nb">}{</span>N<span class="nb">}</span> <span class="k">\sum</span><span class="nb">_{</span>n=0<span class="nb">}^{</span>N-1<span class="nb">}</span>
</span><span class='line'><span class="k">\color</span><span class="nb">{</span>signal<span class="nb">}</span>x<span class="nb">_</span>n <span class="k">\color</span><span class="nb">{</span>spin<span class="nb">}</span>
</span><span class='line'>e<span class="nb">^{</span><span class="k">\mathrm</span><span class="nb">{</span>i<span class="nb">}</span> <span class="k">\color</span><span class="nb">{</span>circle<span class="nb">}</span> 2<span class="k">\pi</span> <span class="k">\color</span><span class="nb">{</span>freq<span class="nb">}</span>k
</span><span class='line'><span class="k">\color</span><span class="nb">{</span>average<span class="nb">}</span> <span class="k">\frac</span><span class="nb">{</span>n<span class="nb">}{</span>N<span class="nb">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There were a couple issues:</p>

<ol>
<li>As mentioned in several of the guides, the default markdown processor for Octopress will interfere with the <code>_</code> and <code>^</code> in your TeX.  I had originally worked around this by escaping them.  At the end, I wrapped the whole expression in a <code>&lt;div&gt;</code> to make the font larger, which had the side-effect of eliminating the need for escaping.</li>
<li>MathJax&rsquo;s <code>\definecolor</code> doesn&rsquo;t seem to support the <code>HTML</code> color space, which lets you specify colors in hex codes.  I ended up manually converting the colors back and forth between decimal and hexidecimal for the prose below the equation:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>To find <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;#7200AC&quot;</span><span class="nt">&gt;</span>the energy<span class="nt">&lt;/font&gt;</span>
</span><span class='line'><span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;2DB15D&quot;</span><span class="nt">&gt;</span>at a particular frequency<span class="nt">&lt;/font&gt;</span>,
</span><span class='line'><span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;#FB001D&quot;</span><span class="nt">&gt;</span>spin<span class="nt">&lt;/font&gt;</span> <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;#126ED5&quot;</span><span class="nt">&gt;</span>your
</span><span class='line'>signal<span class="nt">&lt;/font&gt;</span> <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;#D04400&quot;</span><span class="nt">&gt;</span>around a circle<span class="nt">&lt;/font&gt;</span>
</span><span class='line'><span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;2DB15D&quot;</span><span class="nt">&gt;</span>at that frequency<span class="nt">&lt;/font&gt;</span>, and
</span><span class='line'><span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&quot;#CB17CE&quot;</span><span class="nt">&gt;</span>average a bunch of points along that
</span><span class='line'>path<span class="nt">&lt;/font&gt;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Now I just need a formula to explain&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A few interesting Clojure microbenchmarks]]></title>
    <link href="http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks/"/>
    <updated>2013-11-22T07:50:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/11/22/a-few-interesting-clojure-microbenchmarks</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>


<!--       font-family: Arial, sans-serif; "Menlo","Monaco","Andale Mono","lucida console","Courier New",monospace;-->


<!-- CSS Styles: -->


<div>
  <style type="text/css">

    .chart {
      font-family: monospace;
      font-size: 10px;
      margin-top: -40px;
    }

    .bar {
      fill: grey;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

  </style>
</div>




<!-- Global Variables and Handlers: -->


<script type="text/javascript">

  var margin = {top: 40, right: 40, bottom: 60, left: 110},
      width = $('.entry-content').width();

  $(window).resize(function() {
    width = $('.entry-content').width();
  });

  function draw(data, chart, height) {

    $(chart).empty();

    var x = d3.scale.linear()
        .domain([0, d3.max(data, function(d) { return d.mean})])
        .range([0, width - margin.left - margin.right]);

    var y = d3.scale.ordinal()
        .domain(d3.range(data.length))
        .rangeRoundBands([height - margin.top - margin.bottom, 0], 0.2);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .tickPadding(8)
    .ticks(8);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickPadding(8)
        .tickSize(0);

    var svg = d3.select(chart).append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('class', 'chart')
          .append('g')
        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    svg.selectAll('.chart')
        .data(data)
    .enter().append('rect')
        .attr('class', 'bar')
        .attr('y', function(d, i) { return y(i) })
        .attr('width', function(d) { return x(d.mean) })
        .attr('height', y.rangeBand());

    svg.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(0, ' + y.rangeExtent()[1] + ')')
        .call(xAxis);

    svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "end")
        .attr("x", width / 2 - 45)
        .attr("y", height - 60)
        .text("nanoseconds");

    svg.append('g')
        .attr('class', 'y axis')
        .call(yAxis)
      .selectAll('text')
        .text(function(d) { return data[d].code; });

  }

  function drawWithResize(data, chart, height) {
    draw(data, chart, height);
    $(window).resize(function() {draw(data, chart, height); })
  }
;


</script>


<p><a href="http://ideolalia.com/">Zach Tellman</a> delivered a really informative and practical unsession at <a href="http://clojure-conj.org/">Clojure Conj 2013</a> entitled &ldquo;Predictably Fast Clojure.&rdquo;  It was described as:</p>

<blockquote><p>An exploration of some of the underlying mechanisms in Clojure, and how to build an intuition for how fast your code should run. Time permitting, we&rsquo;ll also explore how to work around these mechanisms, and exploit the full power of the JVM.</p></blockquote>

<p>I&rsquo;d like to share a few interesting things that I learned from this talk and that I subsequently verified and explored.</p>

<h2>How to benchmark</h2>

<p>It turns out that benchmarking is hard and benchmarking on the JVM is even harder.  Fortunately, the folks at the Elliptic Group have thought long and hard about how to do it right and have written <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=robust+java+benchmarking">a couple of great articles</a> on the matter.  Hugo Duncan&rsquo;s <a href="https://github.com/hugoduncan/criterium">Criterium library</a> makes it super easy to use these robust techniques.</p>

<p>All the benchmarks in this post were run on my dual-core 2.6 GHz Intel Core i5 laptop.  The JVM was started with <code>lein with-profile production repl</code>, which enables more aggressive JIT action at the cost of slower start times.  If you try to use Criterium without this, you&rsquo;ll get warnings spewed for every benchmark you run.</p>

<h2>Surprising operations on lists, vectors, and tuples</h2>

<p>The first thing that he discussed was the relatively poor performance of <code>first</code> on vectors.</p>

<p>For the tests, I made the some simple collections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ve</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">li</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tu</span> <span class="p">(</span><span class="nf">clj-tuple/tuple</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then I timed them each with <code>first</code> and <code>(nth coll 0)</code>:</p>

<div id='chart-1'></div>


<script type='text/javascript'>
  var data = [
      {code: "(first ve)", mean: 59.387551, lower: 56.557346, upper: 75.434730},
      {code: "(first li)", mean: 11.814687, lower: 9.933760, upper: 17.651180},
      {code: "(first tu)", mean: 12.026005, lower: 11.096498, upper: 17.716830},
      {code: "(nth ve 0)", mean: 14.507457, lower: 13.379794, upper: 19.732508},
      {code: "(nth li 0)", mean: 132.042247, lower: 123.849601, upper: 173.395438},
      {code: "(nth tu 0)", mean: 11.240653, lower: 10.739338, upper: 12.333350},
      ];
  data.reverse();
  drawWithResize(data, '#chart-1', 275);
</script>


<p>The <a href="http://clojuredocs.org/clojure_core/clojure.core/first">documentation</a> says that <code>first</code> &ldquo;calls seq on its argument.&rdquo;  This is effectively true, but if you look at the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/RT.java#L575">source</a> you&rsquo;ll see that if the collection implements <code>ISeq</code>, <code>seq</code> doesn&rsquo;t need to be called.  As a result, the performance of <code>first</code> on lists, which do implement <code>ISeq</code>, is much better than on vectors, which don&rsquo;t.  Zach took advantage of this observation in his <a href="https://github.com/ztellman/clj-tuple">clj-tuple</a> library and made sure that tuples implement <code>ISeq</code>.</p>

<p>What&rsquo;s really interesting is that you can use <code>(nth coll 0)</code> to get the first element of a vector faster that you can with <code>first</code>.  Unfortunately, this only does well with vectors.  The performance is abysmal when applied to lists, so you should stick to <code>first</code> if you don&rsquo;t know the data structure you are operating on.</p>

<p>The apparent slowness of <code>seq</code> on a vector made me wonder about the <code>empty?</code> function, which uses <code>seq</code> under the hood:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">source</span> <span class="nv">empty?</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">empty?</span>
</span><span class='line'>  <span class="s">&quot;Returns true if coll has no items - same as (not (seq coll)).</span>
</span><span class='line'><span class="s">  Please use the idiom (seq x) rather than (not (empty? x))&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>   <span class="ss">:static</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span><span class="p">]</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">seq </span><span class="nv">coll</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If using <code>seq</code> is so slow, perhaps we can get better performance by just getting the count of elements and testing if it&rsquo;s zero:</p>

<div id='chart-empty'></div>


<script type='text/javascript'>
  var dataE = [
{code: "(empty? ve)", mean: 22.436542, lower: 22.052842, upper: 23.003189},
{code: "(empty? li)", mean: 12.293540, lower: 11.680523, upper: 15.369996},
{code: "(empty? tu)", mean: 18.512765, lower: 17.351246, upper: 22.757244},
{code: "(= 0 (count ve))", mean: 11.209652, lower: 10.451370, upper: 15.123089},
{code: "(= 0 (count li))", mean: 10.710336, lower: 10.417919, upper: 11.667121},
{code: "(= 0 (count tu))", mean: 10.741061, lower: 10.396224, upper: 13.246183},
      ];
  dataE.reverse();
  drawWithResize(dataE, '#chart-empty', 275);
</script>


<p>Of course, this is a bad idea for lazy sequences and should probably be avoided, as we&rsquo;ll incur a cost that is linear in the size of the sequence just to get the count.</p>

<p>I don&rsquo;t think this will affect my day to day code, but it certainly is interesting and surfaced a bit more about how things actually work in Clojure.</p>

<h2>Inconsistent protocol timings</h2>

<p>This was a surprising one that also peeled back a layer on Clojure&rsquo;s implementation.  In Fogus&rsquo;s <a href="http://blog.fogus.me/2011/10/14/why-clojure-doesnt-need-invokedynamic-but-it-might-be-nice/">Why Clojure might not need invokedynamic, but it might be nice</a>, he explained:</p>

<blockquote><p>Clojure&rsquo;s protocols are polymorphic on the type of the first argument. The protocol functions are call-site cached (with no per-call lookup cost if the target class remains stable). In other words, the implementation of Clojure&rsquo;s protocols are built on polymorphic inline caches.</p></blockquote>

<p>The consequence of this is that we will see worse performance if the type of the first argument to a protocol&rsquo;s method keeps changing.  I made a simple test to see how significant this is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">P</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">x</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">P</span>
</span><span class='line'>  <span class="nv">String</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">Long</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">g</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">f</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">s0</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">s1</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n0</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n1</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>g</code> calls <code>f</code> on both its arguments and we expect <code>f</code> to perform best when it&rsquo;s consistently called on a single type:</p>

<div id='chart-2'></div>


<script type='text/javascript'>
  var data2 = [
{code: "(g n0 n1)", mean: 21.597699},
{code: "(g s0 s1)", mean: 22.550262},
{code: "(g n0 s0)", mean: 37.527409}
      ];
  data2.reverse();
  drawWithResize(data2, '#chart-2', 190);
</script>


<p>The expectation was correct.  There was some subsequent talk about whether the penalty of this cache miss was predictable.  Theoretically, the cost could be unbounded if you extend the protocol with enough types and have horrible luck with the hash codes of those types colliding, but my understanding of the caching logic is that it will usually be the small constant that we observed here.</p>

<p>You can see why by taking a look at how the cache works in <a href="https://github.com/clojure/clojure/blob/1.5.x/src/jvm/clojure/lang/MethodImplCache.java#L76">MethodImplCache.java</a>.  The hash code of the class is shifted and masked by values that form a simple perfect hash, which is determined by the <a href="https://github.com/clojure/clojure/blob/1.5.x/src/clj/clojure/core.clj#L5971"><code>maybe-min-hash</code> function</a>.  The use of a perfect hash means that we should see consistent lookup times for even moderately large caches.</p>

<p>In the rare case that a perfect hash can&rsquo;t be found by <code>maybe-min-hash</code>, the cache falls back to using a <code>PersistentArrayMap</code>, which can have slightly worse performance.  In any case, I don&rsquo;t think there&rsquo;s much to worry about here.</p>

<p>One neat thing I discovered while testing all of this is that you don&rsquo;t suffer this cache-miss penalty if you declare that you support a protocol in your <code>deftype</code> or if you <code>reify</code>, but you do if you use <code>extend-protocol</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">X</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">P</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dt</span> <span class="p">(</span><span class="nf">X.</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">re</span> <span class="p">(</span><span class="nf">reify</span> <span class="nv">P</span> <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">Y</span> <span class="p">[])</span>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">P</span>
</span><span class='line'>  <span class="nv">Y</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="p">[</span><span class="nv">_</span><span class="p">]</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ep</span> <span class="p">(</span><span class="nf">Y.</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<div id='chart-3'></div>


<script type='text/javascript'>
  var data3 = [
      {code: "(g s0 dt)", mean: 19.389459},
      {code: "(g s0 re)", mean: 19.747690},
      {code: "(g s0 ep)", mean: 76.890915},
      ];
  data3.reverse();
  drawWithResize(data3, '#chart-3', 190);
</script>


<p>My understanding is that the declaration of a protocol results in the creation of function objects and in a corresponding interface.  When the function is called, the first thing it does when trying to dispatch is see if the first argument implements the interface for the protocol that declared the function in the first place.  If it did, the corresponding method on the object is called.  If it doesn&rsquo;t implement the interface, it next uses the MethodImplCache and has the potential to suffer from the cache miss.  What&rsquo;s great is that if the object does implement the interface, the most recent entry in the cache is unaffected.</p>

<p>We can verify that the reified object and the instance of the type that was deftyped with the protocol both implement the interface and the other one doesn&rsquo;t:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">dt</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">user.P</span> <span class="nv">clojure.lang.IType</span> <span class="nv">java.lang.Object</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">re</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">clojure.lang.IObj</span> <span class="nv">user.P</span> <span class="nv">java.lang.Object</span> <span class="nv">clojure.lang.IMeta</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">supers</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">ep</span><span class="p">))</span>
</span><span class='line'><span class="o">#</span><span class="p">{</span><span class="nv">clojure.lang.IType</span> <span class="nv">java.lang.Object</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Determining if your type hints worked</h2>

<p>Often when we want to squeeze every last bit of performance, we use type hints to avoid reflection and to force the use of primitives.  Zach demonstrated how to use Gary Trakhman&rsquo;s <a href="https://github.com/gtrak/no.disassemble">no.disassemble</a> to inspect the byte code of a function directly from the REPL.</p>

<p>I haven&rsquo;t gotten to play with it yet, but the ability to quickly compare the byte code between two implementations in the REPL looked amazing.</p>

<h2>Thanks</h2>

<p>Thanks to Zach Tellman for the informative presentation that motivated this and to David Greenberg for help investigating the protocol performance issues.</p>

<p>If there&rsquo;s anything I got wrong, please let me know in the comments&hellip; thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[core.matrix + Apache Commons Math]]></title>
    <link href="http://adereth.github.io/blog/2013/11/08/core-dot-matrix-plus-apache-commons-math/"/>
    <updated>2013-11-08T08:08:00-08:00</updated>
    <id>http://adereth.github.io/blog/2013/11/08/core-dot-matrix-plus-apache-commons-math</id>
    <content type="html"><![CDATA[<p>I&rsquo;d like to share a little project I did to make it more convenient to use Apache Commons Math&rsquo;s linear algebra classes with Clojure.</p>

<h2>Apache Commons Math</h2>

<p><img src="http://adereth.github.io/images/acm.gif" alt="Apache Commons Math Logo" /></p>

<p><a href="http://commons.apache.org/proper/commons-math/index.html">Apache Commons Math</a> is a Java library of mathematics and statistics components.  It&rsquo;s loaded with useful things including:</p>

<ul>
<li>Statistics</li>
<li>Data Generation</li>
<li>Probability Distributions</li>
<li>Machine Learning</li>
<li>Optimization</li>
<li>Numerical Analysis</li>
<li>Curve Fitting</li>
<li>Linear Algebra</li>
<li>Complex Numbers</li>
<li>Ordinary Differential Equations</li>
</ul>


<p>I highly recommend at least skimming the <a href="http://commons.apache.org/proper/commons-math/userguide/index.html">User Guide</a>.  It&rsquo;s useful to know what&rsquo;s already available and you may even discover a branch of mathematics that you find interesting.</p>

<p>As with most Java libraries, it&rsquo;s generally pleasant to use from Clojure via interop.  Of course, there are a few places where there&rsquo;s unnecessary object constructiion just to get at methods that could easily be static and there are a few others where <em>mutation</em> rears its ugly head.  For the non-static cases, it&rsquo;s trivial enough to create a <code>fn</code> that creates the object and calls the method you need.</p>

<p>Many of the methods in the library either accept or return matrices and vectors, using the <a href="http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/linear/RealMatrix.html">RealMatrix</a> and <a href="http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/linear/RealVector.html">RealVector</a> interfaces.  While we could use interop to create and use these, it&rsquo;s nice to be able to use them in idiomatic Clojure and even nicer to be able to seamlessly use them with pure Clojure data structures.</p>

<h2>core.matrix</h2>

<p><a href="https://github.com/mikera/core.matrix">core.matrix</a> is a library and API that aims to make matrix and array programming idiomatic, elegant and fast in Clojure.  It features pluggable support for different underlying matrix library implementations.</p>

<p>For all my examples, I&rsquo;ve included core.matrix as <code>m</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.core.matrix</span> <span class="ss">:as</span> <span class="nv">m</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>apache-commons-matrix</h2>

<p>After implementing a few protocols, I was able to get full support for Apache Commons Math&rsquo;s matrices and vectors into the core.matrix API, which I&rsquo;ve released as <a href="https://github.com/adereth/apache-commons-matrix">adereth/apache-commons-matrix</a>.</p>

<p>Once you&rsquo;ve loaded <code>apache-commons-matrix.core</code>, you can begin using the <code>core.matrix</code> functions on any combination of Apache Commons Math matrices and vectors and any other implementation of matrix and vectors, including Clojure&rsquo;s built-in persistent vectors.</p>

<p>Without this, you have to write some pretty cumbersome array manipulation code to get the interop to work.  For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">org.apache.commons.math3.linear.Array2DRowRealMatrix.</span>
</span><span class='line'> <span class="p">(</span><span class="nb">into-array </span><span class="p">[(</span><span class="nf">double-array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">double-array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">])]))</span>
</span><span class='line'><span class="c1">;; #&lt;Array2DRowRealMatrix Array2DRowRealMatrix{ {1.0,1.0}, {1.0,0.0} }&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;versus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">m/matrix</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]]))</span>
</span><span class='line'><span class="c1">;; #&lt;Array2DRowRealMatrix Array2DRowRealMatrix{ {1.0,1.0}, {1.0,0.0} }&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re working from the REPL or otherwise don&rsquo;t care about indirectly changing the behavior of your code, you could even avoid <code>with-implementation</code> and just make <code>:apache-commons</code> the default by evaluating:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/set-current-implementation</span> <span class="ss">:apache-commons</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things become really convenient when you start combining Apache Commons Math data structures with Clojure&rsquo;s.  For example, we can multiply a <code>RealMatrix</code> and a vector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib-matrix</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/matrix</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">m/transform</span> <span class="nv">fib-matrix</span> <span class="p">[</span><span class="mi">5</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; #&lt;ArrayRealVector {8; 5}&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the type of the result depends on the implementation of the first parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fib-vector</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/with-implementation</span> <span class="ss">:apache-commons</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/array</span> <span class="p">[</span><span class="mi">5</span> <span class="mi">3</span><span class="p">])))</span>
</span><span class='line'><span class="c1">;; #&lt;ArrayRealVector {5; 3}&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">m/transform</span> <span class="p">[[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]]</span> <span class="nv">fib-vector</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; [8.0 5.0]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementation Experience</h2>

<p>It was really easy to follow the <a href="https://github.com/mikera/core.matrix/wiki/Implementation-Guide">Implementation Guide for core.matrix</a> that Mike Anderson wrote.  There were just a handful of protocols that I needed to implement and I magically got all the functionality of core.matrix.  The test framework is incredibly thorough and it immediately revealed a number of subtle bugs in my initial implementation.  Overall, it was a great experience and I wish that all interfaces provided such nice documentation and testing.</p>

<h2>Conclusion</h2>

<p>If you&rsquo;re doing any math on the JVM, you should at least check out what Apache Commons Math has to offer.  If you&rsquo;re using it in Clojure, I recommend using core.matrix instead of interop whenever possible.  If you do try this out, please let me know if there&rsquo;s anything missing or just send me a pull request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficiently Computing Kendall's Tau]]></title>
    <link href="http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau/"/>
    <updated>2013-10-30T21:45:00-07:00</updated>
    <id>http://adereth.github.io/blog/2013/10/30/efficiently-computing-kendalls-tau</id>
    <content type="html"><![CDATA[<p>Typically when people talk about correlation they are referring to the <a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson&rsquo;s product-moment coefficient</a>:</p>

<p>$$\rho_{X,Y}={E[(X-\mu_X)(Y-\mu_Y)] \over \sigma_X\sigma_Y}$$</p>

<p>The Pearson coefficient is 1 if the datasets have a perfectly positive linear relationship and -1 if they have a perfectly negative linear relationship.  But what if our data has a clear positive relationship, but it&rsquo;s not linear?  Or what if our data isn&rsquo;t even numeric and doesn&rsquo;t have a meaningful way of computing the average, $\mu$, or standard deviation, $\sigma$?</p>

<p>In these cases, Kendall&rsquo;s Tau is a useful way of measuring the correlation since it only requires that we have a <a href="http://en.wikipedia.org/wiki/Total_order">total ordering</a> for each of our datasets.  For each pair of observations, $(x_1, y_1)$ and $(x_2, y_2)$, we call the pair <em>concordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 &lt; y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 > y_2$$
&hellip;and we call the pair <em>discordant</em> if:
$$x_1 &lt; x_2 \text{ and } y_1 > y_2$$
$$\text{or}$$
$$x_1 > x_2 \text{ and } y_1 &lt; y_2$$
If $x_1 = x_2 \text{ or } y_1 = y_2$, the pair is neither concordant nor discordant.</p>

<p>Kendall&rsquo;s Tau is then defined as:
$$\tau = \frac{n_c-n_d}{\frac{1}{2} n (n-1) }$$
Where $n_c$ is the number of concordant pairs and $n_d$ is the number of discordant pairs.
Since $n (n-1) / 2$ is the total number of pairs, this value ranges from -1 to 1.</p>

<p>Unfortunately, this approach doesn&rsquo;t deal well with tied values.  Consider the following set of $(x,y)$ observations:
$$(1,1), (1,1), (2,2), (3,3)$$
There&rsquo;s a perfectly positive linear relationship between X and Y, but only 5 of the 6 pairs are concordant.  For this case we want to use the $\tau_B$ modified version:</p>

<p>$$\tau_B = \frac{n_c-n_d}{\sqrt{(n_0-n_1)(n_0-n_2)}}$$</p>

<p>&hellip;where:</p>

<p>$$n_0 = n(n-1)/2$$
$$n_1 = \text{Number of pairs with tied values in } X$$
$$n_2 = \text{Number of pairs with tied values in } Y$$</p>

<h2>Computing Naively</h2>

<p>We can compute $\tau_B$ in $O(n^{2})$ by looking at every pair of observations and tallying the number of concordant, discordant, and tied pairs.  Once we have the tallies, we&rsquo;ll apply the formula:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kendalls-tau-from-tallies</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">concordant</span> <span class="nv">discordant</span> <span class="nv">pairs</span> <span class="nv">x-ties</span> <span class="nv">y-ties</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">concordant</span> <span class="nv">discordant</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">x-ties</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">- </span><span class="nv">pairs</span> <span class="nv">y-ties</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a given pair of observations, we&rsquo;ll construct a map describing which tallies it will contribute to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kendall-relations</span> <span class="p">[[[</span><span class="nv">x1</span> <span class="nv">y1</span><span class="p">]</span> <span class="p">[</span><span class="nv">x2</span> <span class="nv">y2</span><span class="p">]]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span> <span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:x-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)</span> <span class="p">{</span><span class="ss">:y-ties</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">y1</span> <span class="nv">y2</span><span class="p">)))</span> <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:else</span> <span class="p">{</span><span class="ss">:discordant</span> <span class="mi">1</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need a way of generating every pair:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">pairs</span> <span class="p">[[</span><span class="nv">o</span> <span class="o">&amp;</span> <span class="nv">more</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="nv">o</span><span class="p">)</span> <span class="nv">nil</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">vector </span><span class="nv">o</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">more</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">more</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; (pairs [1 2 3 4])</span>
</span><span class='line'><span class="c1">;; =&gt; ([1 2] [1 3] [1 4] [2 3] [2 4] [3 4])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we put it all together by computing the relations tally for each pair and combining them using <code>merge-with</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">naive-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">relations</span> <span class="p">(</span><span class="nb">map </span><span class="nv">kendall-relations</span> <span class="p">(</span><span class="nf">pairs</span> <span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">tallies</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="nb">partial merge-with </span><span class="nv">+</span>
</span><span class='line'>                                 <span class="p">{</span><span class="ss">:pairs</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>                        <span class="p">{</span><span class="ss">:concordant</span> <span class="mi">0</span> <span class="ss">:discordant</span> <span class="mi">0</span>
</span><span class='line'>                         <span class="ss">:x-ties</span> <span class="mi">0</span> <span class="ss">:y-ties</span> <span class="mi">0</span> <span class="ss">:pairs</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>                        <span class="nv">relations</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">kendalls-tau-from-tallies</span> <span class="nv">tallies</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Knight&rsquo;s Algorithm</h2>

<p>In 1966, William R. Knight was a visiting statistician at the Fisheries Research Board of Canada.  He wrote:</p>

<blockquote><p>The problem of calculating Kendall&rsquo;s tau arose while attempting to evaluate species associations in catches by the Canadian east coast offshore fishery.  Sample sizes ranging up to 400 were common, making manual calculations out of the question; indeed, an initial program using an asymptotically inefficient method proved expensively slow.</p></blockquote>

<p>Necessity is the mother of invention, so he came up with a clever algorithm for computing Kendall&rsquo;s Tau in $O(n \log{n})$ which he published in his paper entitled &ldquo;<a href="http://www.jstor.org/stable/2282833">A Computer Method for Calculating Kendall&rsquo;s Tau with Ungrouped Data</a>&rdquo;.</p>

<p>First, sort the observations by their $x$ values using your favorite $O(n \log{n})$ algorithm.  Next, sort <em>that</em> sorted list by the $y$ values using a slightly modified <a href="http://en.wikipedia.org/wiki/Merge_sort">merge sort</a> that keeps track of the size of the swaps it had to perform.</p>

<p>Recall that merge sort works as follows:</p>

<ol>
<li>Divide the unsorted list into $n$ sublists, each containing 1 element (a list of 1 element is considered sorted).</li>
<li>Repeatedly merge sublists to produce new sublists until there is only 1 sublist remaining. This will be the sorted list.</li>
</ol>


<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" title="Merge Sort Animation" >
<em>(description and animation from <a href="http://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a>)</em></p>

<p>The trick is performed when merging sublists.  The list was originally sorted by $x$ values, so whenever an element from the second sublist is smaller than the next element from the first sublist we know that the corresponding observation is discordant with however many elements remain in the first sublist.</p>

<p>We can implement this modified merge sort by first handling the case of merging two sorted sequences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Takes a sequence containing two sorted sequences and merges them.  If an</span>
</span><span class='line'><span class="s">element from the second sequence is less than the head of the first sequence, we</span>
</span><span class='line'><span class="s">know that it was discordant with all the elements remaining in the first</span>
</span><span class='line'><span class="s">sequence.  This is the insight that allows us to avoid the O(n^2) comparisons in</span>
</span><span class='line'><span class="s">the naive algorithm.</span>
</span><span class='line'>
</span><span class='line'><span class="s">A tuple containing the count of discords and the merged sequence is returned.&quot;</span>
</span><span class='line'>  <span class="p">[[</span><span class="nv">coll1</span> <span class="nv">coll2</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">;; Explicitly track the remaining counts to avoid doing a linear</span>
</span><span class='line'>         <span class="c1">;; scan of the sequence each time, which would get us back to O(n^2)</span>
</span><span class='line'>         <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll1</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">remaining-j</span> <span class="p">(</span><span class="nb">count </span><span class="nv">coll2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">[</span><span class="nv">i</span> <span class="o">&amp;</span> <span class="nv">rest-i</span> <span class="ss">:as</span> <span class="nv">all-i</span><span class="p">]</span> <span class="nv">coll1</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">j</span> <span class="o">&amp;</span> <span class="nv">rest-j</span> <span class="ss">:as</span> <span class="nv">all-j</span><span class="p">]</span> <span class="nv">coll2</span>
</span><span class='line'>         <span class="nv">result</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-j</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-i</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">zero? </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="p">[</span><span class="nv">swaps</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">result</span> <span class="nv">all-j</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">i</span> <span class="nv">j</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">swaps</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-i</span><span class="p">)</span> <span class="nv">remaining-j</span>
</span><span class='line'>                     <span class="nv">rest-i</span> <span class="nv">all-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>     <span class="ss">:j&gt;i</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">remaining-i</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">remaining-i</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">remaining-j</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">all-i</span> <span class="nv">rest-j</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">result</span> <span class="nv">j</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can do the full merge sort by applying that function to piece sizes that double until the whole collection is covered by a single sorted piece:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">merge-sort-and-count-discords</span>
</span><span class='line'>  <span class="s">&quot;Returns a vector containing the number of discordant swaps and the sorted</span>
</span><span class='line'><span class="s">collection.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">swaps</span> <span class="mi">0</span>
</span><span class='line'>         <span class="nv">coll</span> <span class="nv">coll</span>
</span><span class='line'>         <span class="nv">piece-size</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="nv">piece-size</span> <span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">piece-pairs</span> <span class="p">(</span><span class="nf">partition-all</span> <span class="mi">2</span> <span class="nv">pieces</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">piece-pairs</span> <span class="nb">first </span><span class="nv">second</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">new-swaps</span> <span class="nv">new-coll</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">piece-pairs</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">map </span><span class="nv">merge-two-sorted-seqs-and-count-discords</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">acc-s</span> <span class="nv">acc-c</span><span class="p">]</span> <span class="p">[</span><span class="nv">s</span> <span class="nv">c</span><span class="p">]]</span>
</span><span class='line'>                             <span class="p">[(</span><span class="nb">+ </span><span class="nv">acc-s</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">acc-c</span> <span class="nv">c</span><span class="p">)])</span>
</span><span class='line'>                           <span class="p">[</span><span class="mi">0</span> <span class="p">[]]))]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">swaps</span> <span class="nv">new-swaps</span><span class="p">)</span> <span class="nv">new-coll</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">piece-size</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">coll</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing we are missing now is the tallies of tied pairs.  We could use <a href="http://clojuredocs.org/clojure_core/clojure.core/frequencies"><code>clojure.core/frequencies</code></a>, but Knight&rsquo;s original paper alludes to a different way which takes advantage of the fact that at different stages of the algorithm we have the list sorted by $X$ and then $Y$.  Most implementations do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tied-pair-count</span> <span class="p">[</span><span class="nv">sorted-coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">sorted-coll</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">partition-by</span> <span class="nv">identity</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="nv">count</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">%</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">%</span><span class="p">))</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have all the pieces, so we just have to put them together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">knights-kendalls-tau</span> <span class="p">[</span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">observations</span> <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">map vector </span><span class="nv">xs</span> <span class="nv">ys</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">n</span> <span class="p">(</span><span class="nb">count </span><span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">pair-count</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">xy-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">observations</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">x-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="p">(</span><span class="nb">map first </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">swaps</span> <span class="nv">sorted-ys</span><span class="p">]</span> <span class="p">(</span><span class="nf">merge-sort-and-count-discords</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">map second </span><span class="nv">observations</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">y-pair-ties</span> <span class="p">(</span><span class="nf">tied-pair-count</span> <span class="nv">sorted-ys</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">concordant-minus-discordant</span> <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span>
</span><span class='line'>                                       <span class="nv">x-pair-ties</span>
</span><span class='line'>                                       <span class="nv">y-pair-ties</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">- </span><span class="nv">xy-pair-ties</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">swaps</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="nv">concordant-minus-discordant</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">x-pair-ties</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">- </span><span class="nv">pair-count</span> <span class="nv">y-pair-ties</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>There are certainly many things I would write differently above if I was really trying for performance.  The goal here was to clearly illustrate the algorithm and maintain the asymptotic run-time characteristics.</p>

<p>Also, I recently submitted <a href="https://issues.apache.org/jira/browse/MATH-814">a patch</a> to the Apache Commons Math library that contains an implementation of this in pure Java if that&rsquo;s your thing.</p>

<p>I think this algorithm is a clever little gem and I really enjoyed learning it.  Deconstructing a familiar algorithm like merge sort and utilizing its internal operations for some other purpose is a neat approach that I&rsquo;ll definitely keep in my algorithmic toolbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unicode-math 0.2.0 released]]></title>
    <link href="http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released/"/>
    <updated>2013-10-13T14:28:00-07:00</updated>
    <id>http://adereth.github.io/blog/2013/10/13/unicode-math-0-dot-2-0-released</id>
    <content type="html"><![CDATA[<p>I just deployed a new version of <a href="https://github.com/adereth/unicode-math">unicode-math</a> to Clojars.  It&rsquo;s a silly toy project that implements as many of <a href="http://symbolcodes.tlt.psu.edu/bylanguage/mathchart.html">Unicode&rsquo;s math symbols</a> as possible in Clojure.  If you <code>use</code> it, you can write things like:</p>

<p><a href="http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html">Binet&rsquo;s Fibonacci Number Formula</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">binet-fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="err">ⁿ</span> <span class="err">φ</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="err">ⁿ</span> <span class="p">(</span><span class="nb">- </span><span class="err">φ</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>     <span class="p">(</span><span class="err">√</span> <span class="mi">5</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/deMorgansLaws.html">de Morgan&rsquo;s Laws</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="err">∀</span> <span class="p">[</span><span class="nv">p</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]</span> <span class="nv">q</span> <span class="p">[</span><span class="nv">true</span> <span class="nv">false</span><span class="p">]]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="err">¬</span> <span class="p">(</span><span class="err">∧</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="err">∨</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="err">¬</span> <span class="nv">q</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://mathworld.wolfram.com/Inclusion-ExclusionPrinciple.html">Inclusion-Exclusion Principle</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∪</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">count </span><span class="nv">B</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="err">∩</span> <span class="nv">A</span> <span class="nv">B</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instructions for use are on the <a href="https://github.com/adereth/unicode-math">project&rsquo;s Github page</a>.  The full list of implemented symbols is in <a href="https://github.com/adereth/unicode-math/blob/master/src/unicode_math/core.clj">src/unicode_math/core.clj</a>.</p>
]]></content>
  </entry>
  
</feed>
